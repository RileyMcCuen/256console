{"version":3,"sources":["aws-constants.ts","db.ts","actions.ts","db-status.tsx","project-iteration-selector.tsx","reducers.ts","store.ts","update-projects.tsx","table.tsx","aws-service.ts","file-input.tsx","login.tsx","button-with-description.tsx","hit-generator.tsx","App.tsx","tab.tsx","serviceWorker.ts","index.tsx"],"names":["METHODS","BaseURL","process","Types","table","PrimaryKey","name","prefix","metaDataKeyName","metaDataType","this","pk","parsePrefixRegEx","exec","data","toMetaData","key","parseDataRegEx","SortKey","metaDataKeyNames","metaDataTypes","prefixRegEx","test","Error","sk","values","slice","split","length","ret","forEach","value","index","push","obj","val","undefined","indexOf","AEntity","type","Str","Bool","trim","toLowerCase","Num","Number","Object","keys","primaryKey","getMetaDataKeyName","convert","toMetaDataFromData","getMetaDataType","sortKey","metaData","getMetaDataTypes","getMetaDataKeyNames","includes","DynamoDB","Converter","marshall","ClassTable","fetchClient","Name","PKName","SKName","addEntity","HIT","ProjectDescription","entity","delete","PKMeta","SKMeta","get","query","PK","sortKeyPrefix","map","item","wustlKey","sortKeyData","pkName","skName","entities","Map","mapMap","primaryKeyPrefix","set","KeyType","AttributeName","AttributeType","url","request","fetch","json","method","GET","headers","fetchJSON","resp","TableNames","POST","body","JSON","stringify","TableName","getName","Item","toDBForm","getKey","Key","unmarshall","ctor","getEntityConstructor","getPrefixFromPK","getPrefixFromSK","DELETE","console","log","keyConditionExpression","expressionAttributeValues","KeyConditionExpression","ExpressionAttributeValues","ClassTableEntity","ProjectName","TaskTags","construct","tags","toString","EDBStatus","WUSTLKey","Iteration","HITName","Cnt","AWSIDs","projectName","iteration","hitName","cnt","awsIDs","updateProjects","projects","sortedProjects","sort","a","b","currentProject","Create","updateSPIData","spiData","updateStudents","students","mapDispatchToProps","updateDBStatus","dbStatus","connector","connect","state","className","onClick","props","exists","Created","DoesNotExist","Unknown","renderCheck","status","React","Component","updateCurrentProject","updateCurrentIteration","currentIteration","iterations","onChange","ev","target","selectedIndex","project","parseInt","num","fun","i","ffor","defaultState","loggedIn","store","createStore","action","reducerHelper","updates","assign","lin","lout","udbs","up","ui","ucp","uci","uspid","us","compose","applyMiddleware","thunk","UpdateProject","inputElem","createRef","tagInputElem","selected","editing","event","stopPropagation","select","disabled","ref","setState","current","focus","update","tag","filter","t","placeholder","newInput","dispatch","projectSave","deleteEntity","alert","newVal","put","callback","newProjectName","tableRef","displayTable","student","name1","name2","name3","count1","count2","count3","spiDataForStud","projDataForStud","iterDataForStud","AWS","require","IdentityPoolId","config","region","credentials","CognitoIdentityCredentials","UploadStatus","userPool","CognitoUserPool","UserPoolId","ClientId","cognitoUser","getCurrentUser","awsFetchClient","createCredentials","result","Logins","getIdToken","getJwtToken","refreshCredentials","Promise","resolve","fail","refresh","error","AwsClient","secretAccessKey","accessKeyId","sessionToken","expired","createTable","dbCreateTable","asyncStore","getProjectNames","e","nullifyAllServiceGlobals","clearIncorrectUserdata","awsLogin","username","password","CognitoUser","Username","Pool","authenticationDetails","AuthenticationDetails","Password","authenticateUser","onSuccess","onFailure","err","newPasswordRequired","userAttributes","requiredAttributes","completeNewPasswordChallenge","session","getSession","awsLogout","signOut","login","logout","Login","usernameField","passwordField","then","reason","catch","id","onSubmit","preventDefault","autoComplete","Logout","ButtonWithDescription","display","buttonClass","buttonTitle","description","csvp","Generated","fileUploaded","NO_UPLOAD","every","row","onFileChange","validateStudents","studData","secret","SUCCESS","FAILURE","FileInput","fileInput","accept","file","files","fr","FileReader","onloadend","readyState","DONE","out","readAsText","htmlFor","NavLocation","max","rands","ri","Math","floor","random","newSPIData","stud","studSPI","pis","threeRands","ind","generated","LOADING","some","pi","GENERATED","NOT_GENERATED","generate","Tab","actions","children","component","SemesterManagementTab","HitManagementTab","PostHitManagementTab","SessionManagementTab","uri","encodeURIComponent","document","createElement","style","href","download","appendChild","click","remove","NavBar","rs","Array","fill","currentActive","navLocation","SemesterManagement","oldActive","classList","add","onUpdateActive","startNavLocation","updateActive","Footer","title","HITManagement","PostHITManagement","SessionManagement","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gLAIYA,E,6IAHCC,EAAUC,+D,SAGXF,K,UAAAA,E,YAAAA,E,UAAAA,E,iBAAAA,M,KAOL,ICYFG,EAVMC,EAA2B,M,SAUjCD,O,eAAAA,I,aAAAA,I,cAAAA,M,SAMCE,E,WAcF,WAAYC,EAAcC,EAAgBC,EAAyBC,GAAsB,yBALxEH,UAKuE,OAJvEC,YAIuE,OAHvEC,qBAGuE,OAFvEC,kBAEuE,EACpFC,KAAKJ,KAAOA,EACZI,KAAKH,OAASA,EACdG,KAAKF,gBAAkBA,EACvBE,KAAKD,aAAeA,E,iEAbME,GAC1B,OAAQN,EAAWO,iBAAiBC,KAAKF,GAAwB,O,+CAgBjE,OAAOD,KAAKJ,O,2CAIZ,OAAOI,KAAKF,kB,wCAIZ,OAAOE,KAAKD,e,yCAGGK,GACf,OAAOJ,KAAKK,WAAWD,EAAKJ,KAAKJ,S,iCAG1BU,GACP,OAAQX,EAAWY,eAAeJ,KAAKG,GAAyB,K,+BAG3DF,GACL,MAAM,IAAN,OAAWJ,KAAKH,OAAhB,YAA0BO,O,KA1C5BT,EAEqBO,iBAAmB,sBAFxCP,EAGqBY,eAAiB,oC,IAiDtCC,E,WAcF,WAAYZ,EAAcC,EAAgBY,EAA4BC,GAClE,GAD2F,yBAL9Ed,UAK6E,OAJ7EC,YAI6E,OAH7EY,sBAG6E,OAF7EC,mBAE6E,GACrFF,EAAQG,YAAYC,KAAKf,GAC1B,MAAM,IAAIgB,MAAM,8DAEpBb,KAAKJ,KAAOA,EACZI,KAAKH,OAASA,EACdG,KAAKS,iBAAmBA,EACxBT,KAAKU,cAAgBA,E,iEAhBKI,GAC1B,OAAQN,EAAQN,iBAAiBC,KAAKW,GAAwB,O,+CAmB9D,OAAOd,KAAKJ,O,4CAIZ,OAAOI,KAAKS,mB,yCAIZ,OAAOT,KAAKU,gB,yCAGGN,GACf,OAAOJ,KAAKK,WAAWD,EAAKJ,KAAKJ,S,iCAG1BU,GAA0B,IAAD,OAChC,GAAe,MAAXA,EAAI,GAAY,CAEhB,IAAMS,GADNT,EAAMA,EAAIU,MAAM,IACGC,MAAM,KACzB,GAAKF,EAAOG,OAAS,IAAOlB,KAAKS,iBAAiBS,OAAQ,CACtD,IAAMC,EAAkB,GASxB,OARAJ,EAAOK,SAAQ,SAACC,EAAOC,GAChBA,EAAQ,GACRH,EAAII,KAAK,CACLjB,IAAK,EAAKG,iBAAiBa,EAAQ,GACnCD,MAAOA,OAIXF,EAEX,MAAM,IAAIN,MAAJ,6DAEV,MAAM,IAAIA,MAAJ,oF,+BAGDW,GACL,IAAIL,EAAG,WAAOnB,KAAKH,QAWnB,OAVAG,KAAKS,iBAAiBW,SAAQ,SAAAd,GAC1B,IAAMmB,EAAM,GAAKD,EAAIlB,GACrB,QAAYoB,IAARD,GAA6B,OAARA,EACrB,MAAM,IAAIZ,MAAJ,oIAAuIP,EAAvI,MAEV,IAA0B,IAAtBmB,EAAIE,QAAQ,OAAqC,IAAtBF,EAAIE,QAAQ,KACvC,MAAM,IAAId,MAAM,gHAEpBM,GAAG,WAAQM,MAERN,M,KAzETX,EAEqBG,YAAc,mBAFnCH,EAGqBN,iBAAmB,sB,IAsF/B0B,E,WAEX,aAAyB,oB,oDAEjBxB,EAAcyB,GAClB,OAAQA,GACJ,KAAKpC,EAAMqC,IACP,OAAO1B,EACX,KAAKX,EAAMsC,KACP,MAAqC,SAA9B3B,EAAK4B,OAAOC,cACvB,KAAKxC,EAAMyC,IACP,OAAOC,OAAO/B,M,gCAIhBA,GAA6C,IAAD,OAClDgC,OAAOC,KAAKjC,GAAMgB,SAAQ,SAAAd,GACrB,EAAaA,GAAOF,EAAKE,MAE7BN,KAAaA,KAAKsC,aAAaC,sBAAwBvC,KAAKwC,QAAQxC,KAAKsC,aAAaG,mBAAmBrC,GAAOJ,KAAKsC,aAAaI,mBACnI1C,KAAK2C,UACAF,mBAAmBrC,GACnBgB,SAAQ,SAACwB,EAAUtB,GACf,EAAasB,EAAStC,KAAO,EAAKkC,QAAQI,EAASvB,MAAO,EAAKsB,UAAUE,mBAAmBvB,S,iCAI3C,IAAD,OACnDH,EAAM,GAMZ,OALAiB,OAAOC,KAAKrC,MAAMoB,SAAQ,SAAAd,GAChB,EAAKqC,UAAUG,sBAAsBC,SAASzC,IAAU,EAAKgC,aAAaC,uBAAyBjC,IACpGa,EAAYb,GAAQ,EAAaA,OAGnC0C,IAASC,UAAUC,SAAS/B,O,KA6L9BgC,EAAb,kDAMI,WAAYC,GAAyB,IAAD,8BAChC,cAAMA,EAAaD,EAAWE,KAAMF,EAAWG,OAAQH,EAAWI,SAC7DC,UAAUC,GACVD,UAAUE,GAHiB,EANxC,kGAauBC,GAbvB,0FAce3D,KAAK4D,OAAOD,EAAOE,OAAQF,EAAOG,SAdjD,gLAiBoBH,GAjBpB,0FAkBe3D,KAAK+D,IAAIJ,EAAOE,OAAQF,EAAOG,SAlB9C,yQAsBsB9D,KAAKgE,MACf,6CACA,CACI,MAAON,EAAmBO,GAC1B,OAAQ,IAAMP,EAAmBQ,gBA1BjD,uCA4BaC,KAAI,SAAAC,GAAI,OAAI,IAAIV,EAAmBU,OA5BhD,uLA+B4BC,EAAkBC,GA/B9C,mK,WA5KI,WAAYlB,EAAwBxD,EAAc2E,EAAgBC,GAAiB,yBANlEpB,iBAMiE,OALjExD,UAKiE,OAJjE2E,YAIiE,OAHjEC,YAGiE,OAFjEC,cAEiE,EAC9EzE,KAAKoD,YAAcA,EACnBpD,KAAKJ,KAAOA,EACZI,KAAKuE,OAASA,EACdvE,KAAKwE,OAASA,EACdxE,KAAKyE,SAAW,IAAIC,I,sDAKdf,GACN,IAAIgB,EAAS3E,KAAKyE,SAASV,IAAIJ,EAAOiB,kBAMtC,YALelD,IAAXiD,GAAmC,OAAXA,IACxBA,EAAS,IAAID,IACb1E,KAAKyE,SAASI,IAAIlB,EAAOiB,iBAAkBD,IAE/CA,EAAOE,IAAIlB,EAAOO,cAAeP,GAC1B3D,O,gCAIP,OAAOA,KAAKJ,O,2CAGKgF,EAA0BV,GAAwB,IAAD,EAClE,iBAAOlE,KAAKyE,SAASV,IAAIa,UAAzB,aAAO,EAAqCb,IAAIG,K,qCAIhD,MAAO,CACH,CACIY,QAAS,OACTC,cAAe/E,KAAKuE,QAExB,CACIO,QAAS,QACTC,cAAe/E,KAAKwE,W,gDAM5B,MAAO,CACH,CACIO,cAAe/E,KAAKuE,OACpBS,cAAe,KAEnB,CACID,cAAe/E,KAAKwE,OACpBQ,cAAe,Q,6BAKpB/E,EAAYa,GACf,IAAMR,EAAW,GAGjB,OAFAA,EAAIN,KAAKuE,QAAUtE,EACnBK,EAAIN,KAAKwE,QAAU1D,EACZR,I,yEAGK2E,EAAaC,G,iFACXlF,KAAKoD,YAAY+B,MAAMF,EAAKC,G,uCAAUE,Q,gQA2BvC,aACD7F,EADC,aAET2F,EAAU,CACVG,OAAQ/F,EAAQgG,IAChBC,QD9SD,CACH,eAAgB,qB,SC+SGvF,KAAKwF,UALZjG,wEAK2B2F,G,cAAjCO,E,0BACiE,IAA/DA,EAAKC,WAAwB/D,QD3TpBnC,gB,yKCgUX4E,G,6EACO,YACD7E,EADC,YAET2F,EAAU,CACVG,OAAQ/F,EAAQqG,KAChBJ,QD3TD,CACH,eAAgB,oBC2TZK,KAAMC,KAAKC,UAAU,CACjBC,UAAW/F,KAAKgG,UAChBC,KAAM7B,EAAK8B,c,kBAGZlG,KAAKwF,UATAjG,uEASe2F,I,4MAOrBjF,EAAYa,G,mFACL,qBACDvB,EADC,qBAEPe,EAAMN,KAAKmG,OAAOlG,EAAIa,GACtBoE,EAAU,CACZG,OAAQ/F,EAAQqG,KAChBJ,QD9UD,CACH,eAAgB,oBC8UZK,KAAMC,KAAKC,UAAU,CACjBC,UAAW/F,KAAKgG,UAChBI,IAAKpD,IAASC,UAAUC,SAAS5C,M,KAG5B0C,IAASC,U,SAA4BjD,KAAKwF,UAV3CjG,gFAU0D2F,G,gCACzDxD,KADP0C,E,KAA0BiC,W,2DAErBjC,G,eAELkC,EAAOtG,KAAKuG,qBAAqB5G,EAAW6G,gBAAgBpC,EAAKpE,KAAKuE,SAAU/D,EAAQiG,gBAAgBrC,EAAKpE,KAAKwE,U,kBACjH,IAAK8B,EAAalC,I,gLAGhBnE,EAAYa,G,+EACR,YACDvB,EADC,YAEPe,EAAMN,KAAKmG,OAAOlG,EAAIa,GACtBoE,EAAU,CACZG,OAAQ/F,EAAQoH,OAChBnB,QDlWD,CACH,eAAgB,oBCkWZK,KAAMC,KAAKC,UAAU,CACjBC,UAAW/F,KAAKgG,UAChBI,IAAKpD,IAASC,UAAUC,SAAS5C,M,KAGzCqG,Q,SAAkB3G,KAAKwF,UAVXjG,uEAU0B2F,G,wBAA9B0B,I,8LAIAC,EAAgCC,G,6EAC3B,kBACDvH,EADC,kBAET2F,EAAU,CACVG,OAAQ/F,EAAQqG,KAChBJ,QDjXD,CACH,eAAgB,oBCiXZK,KAAMC,KAAKC,UAAU,CACjBC,UAAW/F,KAAKgG,UAChBe,uBAAwBF,EACxBG,0BAA2BhE,IAASC,UAAUC,SAAS4D,M,SAGjD9G,KAAKwF,UAVPjG,6EAUsB2F,G,6CAAmBf,KAAI,SAACC,GAAD,OAAiCpB,IAASC,UAAUoD,WAAWjC,O,iHAKnHjB,EAEcE,KDzYF7D,cCuYZ2D,EAGcG,OAAS,SAHvBH,EAIcI,OAAS,S,IAgDrB0D,E,4MAEXpD,Y,IAEAC,Y,cAJoClC,GAQ3B8B,EAAb,kDAgBI,WAAYtD,GAA6C,IAAD,6BACpDA,EAAI,YAAkBsD,EAAmBwD,aACzC,gBARJA,iBAMwD,IAJxD7D,UAIwD,IAFxD8D,cAEwD,EAGpD,EAAKC,UAAUhH,QAEOsB,IAAlB,EAAKyF,WACL,EAAKA,SAAW,IANgC,EAhB5D,yDA2BQ,OAAOzD,EAAmBpB,aA3BlC,gCA+BQ,OAAOoB,EAAmBf,UA/BlC,oCAmCQ,OAAOe,EAAmBQ,iBAnClC,8BAsCyBtE,EAAcyH,GAC/B,OAAO,IAAI3D,EAAmB,CAC1BG,OAAQH,EAAmBO,GAC3BH,OAAQ9D,KAAK2C,QAAQ2E,SAAS,CAACjE,KAAMzD,IACrCuH,SAAUE,QA1CtB,GAAwCJ,GAA3BvD,EAEFwD,YAAc,cAFZxD,EAGFkB,iBAAmB,QAHjBlB,EAIFQ,cAAgB,eAJdR,EAKFO,GAAK,IAAMP,EAAmBkB,iBAAmB,IAAMlB,EAAmBwD,YALxExD,EAMcpB,WAAa,IAAI3C,EAAWwD,EAAWG,OAAQI,EAAmBkB,iBAAkB,cAAenF,EAAMqC,KANvH4B,EAOcf,QAAU,IAAInC,EAAQ2C,EAAWI,OAAQG,EAAmBQ,cAAe,CAAC,QAAS,CAACzE,EAAMqC,IAAKrC,EAAMyC,MAyC3H,ICnfKqF,EDmfC9D,EAAb,kDAoBI,WAAYrD,GAA6C,IAAD,8BACpD,gBAbJoH,cAYwD,IAVxDN,iBAUwD,IARxDO,eAQwD,IANxDC,aAMwD,IAJxDC,SAIwD,IAFxDC,YAEwD,EAEpD,EAAKR,UAAUhH,GAFqC,EApB5D,yDA0BQ,OAAOqD,EAAInB,aA1BnB,gCA8BQ,OAAOmB,EAAId,UA9BnB,oCAkCQ,OAAOc,EAAIS,iBAlCnB,8BAqCyBG,EAAkBwD,EAAqBC,EAAmBC,EAAiBC,EAAaC,GACzG,OAAO,IAAIxE,EAAI,CACXI,OAAQ7D,KAAKsC,WAAWgF,SAASjD,GACjCP,OAAQ9D,KAAK2C,QAAQ2E,SAAS,CAACJ,YAAaW,EAAaJ,UAAWK,EAAWJ,QAASK,IACxFJ,IAAKK,EACLJ,OAAQK,QA1CpB,GAAyBhB,GAAZxD,EAEFmB,iBAAmB,UAFjBnB,EAGFS,cAAgB,MAHdT,EAIcnB,WAAa,IAAI3C,EAAWwD,EAAWG,OAAQG,EAAImB,iBAAkB,WAAYnF,EAAMqC,KAJrG2B,EAKcd,QAAU,IAAInC,EAAQ2C,EAAWI,OAAQE,EAAIS,cAAe,CAAC,cAAe,YAAa,WAAY,CAACzE,EAAMqC,IAAKrC,EAAMyC,IAAKzC,EAAMqC,M,SCxfjJyF,O,qBAAAA,I,qBAAAA,I,gCAAAA,M,KA4DL,IAqBMW,EAAiB,SAACC,GAC3B,IAAMC,EAAiBD,EAASE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEjF,KAAOkF,EAAElF,MAAQ,EAAI,KACtE,MAAO,CACHxB,KA1EuB,kBA2EvBsG,SAAUC,EACVI,eAAgBJ,EAAe,GAAKA,EAAe,GAAK1E,EAAmB+E,OAAO,kBAAmB,MA0BhGC,EAAgB,SAACC,GAC1B,MAAO,CACH9G,KApGuB,kBAqGvB8G,YAIKC,EAAiB,SAACC,GAC3B,MAAO,CACHhH,KA1GuB,kBA2GvBgH,aCjHFC,EAAqB,CACvBC,eDgE0B,SAACC,GAC3B,MAAO,CACHnH,KAnEwB,mBAoExBmH,cCnBOC,EA7CGC,aAVD,SAACC,GACd,MAAO,CACHH,SAAUG,EAAMH,YAQYF,EA6CrBG,C,4KArCI,IAAD,OACV,OACE,4BAAQG,UAAW,2BAA4BC,QAAO,sBAAE,sBAAAf,EAAA,kEACpD,EAAKgB,MAD+C,gBACnB5J,QADmB,IACnBA,OADmB,EACnBA,EAAO6J,OADY,uCACFhC,EAAUiC,QADR,2BACkBjC,EAAUkC,aAD5B,sBACzCV,eADyC,6DAAxD,W,+BASF,OAAQ/I,KAAKsJ,MAAMN,UACf,KAAKzB,EAAUmC,QACX,MAAO,4DACX,KAAKnC,EAAUiC,QACX,MAAO,iDACX,KAAKjC,EAAUkC,aACX,MAAO,wF,+BAKf,OACI,yBAAKL,UAAW,oBACXpJ,KAAK2J,cACN,gDAGA,uBAAGP,UAAW,UACTpJ,KAAK4J,e,GA/BHC,IAAMC,YCPhBhB,EAAqB,CAC9BiB,qBFqFgC,SAACvB,GACjC,MAAO,CACH3G,KAxF8B,yBAyF9B2G,mBEvFJwB,uBF2FkC,SAACC,GACnC,MAAO,CACHpI,KA9FgC,2BA+FhCoI,sBE3FFhB,EAAYC,aAdM,SAACC,GACrB,MAAO,CACHhB,SAAUgB,EAAMhB,SAChB+B,WAAYf,EAAMe,WAClB1B,eAAgBW,EAAMX,eACtByB,iBAAkBd,EAAMc,oBASInB,GAuDrBG,I,uKApCD,IAAD,OACL,OACI,yBAAKG,UAAW,8BACZ,yBAAKA,UAAW,iCAAhB,2BAGA,6BACI,4BAAQA,UAAW,mBAAoBe,SAAU,SAAAC,GAAE,OAAI,EAAKd,MAAMS,qBAAqB,EAAKT,MAAMnB,SAASiC,EAAGC,OAAOC,kBAE7GtK,KAAKsJ,MAAMnB,SAAShE,KAAI,SAACoG,EAASjJ,GAC9B,OACI,4BAAQhB,IAAKiK,EAAQlH,KAAMhC,MAAOkJ,EAAQlH,MACrCkH,EAAQlH,UAM7B,0BAAM+F,UAAW,aAAjB,KACA,4BAAQA,UAAW,qBAAsBe,SAAU,SAAAC,GAAE,OAAI,EAAKd,MAAMU,uBAAuBQ,SAASJ,EAAGC,OAAOhJ,UA7BrH,SAACoJ,EAAaC,GAEvB,IADA,IAAIvJ,EAAM,GACDwJ,EAAI,EAAGA,EAAIF,EAAKE,IACrBxJ,EAAII,KAAKmJ,EAAIC,IAEjB,OAAOxJ,EA0BiByJ,CAAK5K,KAAKsJ,MAAMY,YAAa,SAAApC,GACzB,OACI,4BAAQxH,IAAKwH,EAAWzG,MAAOyG,GAC1BA,EAAY,a,GA1Bd+B,IAAMC,Y,QCfvCe,EAA0B,CAC5BC,UAAU,EACV9B,SAAUzB,EAAUmC,QACpBvB,SAAU,GACV+B,WAAY,EACZ1B,eAAgB9E,EAAmB+E,OAAO,GAAI,IAC9CwB,iBAAkB,EAClBtB,QAAS,KACTE,SAAU,I,YCzBDkC,EAAQC,aD4Bd,WAAsD,IAAjC7B,EAAgC,uDAA1B0B,EAAcI,EAAY,uCAClDC,EAAgB,SAACC,GACnB,OAAO/I,OAAOgJ,OAAO,GAAIjC,EAAOgC,IAEpC,OAAOF,EAAOpJ,MACV,IH5Ba,QG6BT,IAAMwJ,EAAMJ,EACZ,OAAOC,EAAc,CACjBJ,SAAUO,EAAIP,WAEtB,IHhCc,SGiCV,IAAMQ,EAAOL,EACb,OAAOC,EAAc,CACjBJ,SAAUQ,EAAKR,WAEvB,IHpCwB,mBGqCpB,IAAMS,EAAON,EACb,OAAOC,EAAc,CACjBlC,SAAUuC,EAAKvC,WAEvB,IHxCuB,kBGyCnB,IAAMwC,EAAKP,EACX,OAAOC,EAAc,CACjB/C,SAAUqD,EAAGrD,SACbK,eAAgBgD,EAAGhD,iBAE3B,IH7CyB,oBG8CrB,IAAMiD,EAAKR,EACX,OAAOC,EAAc,CACjBhB,WAAYuB,EAAGvB,WACfD,iBAAkBwB,EAAG3D,YAE7B,IHlD8B,yBGmD1B,IAAM4D,EAAMT,EACZ,OAAOC,EAAc,CACjB1C,eAAgBkD,EAAIlD,iBAE5B,IHtDgC,2BGuD5B,IAAMmD,EAAMV,EACZ,OAAOC,EAAc,CACjBjB,iBAAkB0B,EAAI1B,mBAE9B,IH1DuB,kBG2DnB,IAAM2B,EAAQX,EACd,OAAOC,EAAc,CACjBvC,QAASiD,EAAMjD,UAEvB,IH9DuB,kBG+DnB,IAAMkD,EAAKZ,EACX,OAAOC,EAAc,CACjBrC,SAAUgD,EAAGhD,WAErB,QACI,OAAOM,KCjF2B2C,YAC1CC,YAAgBC,OCOdlD,EAAqB,CACvBZ,kBAGEe,EAAYC,aAVD,SAACC,GACd,MAAO,CACHhB,SAAUgB,EAAMhB,YAQYW,GAc9BmD,E,kDAKF,WAAY3C,GAA4B,IAAD,8BACnC,cAAMA,IAJF4C,UAAYrC,IAAMsC,YAGa,EAF/BC,aAAevC,IAAMsC,YAIzB,EAAKhD,MAAQ,CACTkD,UAAU,EACVC,SAAS,EACT7K,IAAK6H,EAAMiB,QAAQlH,MALY,E,qDAS7B,IAAD,OACL,OACI,wBAAI+F,UAAWpJ,KAAKsJ,MAAM+C,SAAW,0BAA4B,iBAAkBhD,QAAS,SAAAkD,GACxFA,EAAMC,kBACN,EAAKlD,MAAMmD,QAAO,iBAElB,yBAAKrD,UAAW,gBACZ,2BAAOvH,KAAM,OACNR,MAAOrB,KAAKmJ,MAAM1H,IAClBiL,UAAW1M,KAAKmJ,MAAMmD,QACtBK,IAAK3M,KAAKkM,UACV/B,SAAU,SAAAC,GAAE,OAAI,EAAKwC,SAAS,CAACnL,IAAK2I,EAAGC,OAAOhJ,WAErD,4BAAQ+H,UAAW,SAAUC,QAAS,kBAAM,EAAKC,MAAM1F,WAAvD,UAGA,4BAAQ8I,SAAU1M,KAAKmJ,MAAMmD,QACrBjD,QAAS,WACL,EAAKuD,SAAS,CAACN,SAAS,IAAO,kCAAM,EAAKJ,UAAUW,eAArB,aAAM,EAAwBC,aAFzE,QAOA,4BAAQJ,UAAW1M,KAAKmJ,MAAMmD,QACtBjD,QAAS,WACL,EAAKC,MAAMyD,OAAOrJ,EAAmB+E,OAAO,EAAKU,MAAM1H,IAAK,EAAK6H,MAAMiB,QAAQpD,WAC/E,EAAKyF,SAAS,CAACN,SAAS,MAHpC,QAQA,4BAAQI,UAAW1M,KAAKmJ,MAAMmD,QACtBjD,QAAS,WACL,EAAKuD,SAAS,CAACnL,IAAK,EAAK6H,MAAMiB,QAAQlH,KAAMiJ,SAAS,MAFlE,WAQJ,yBAAKlD,UAAWpJ,KAAKsJ,MAAM+C,SAAW,eAAiB,QACnD,uEAGA,4BAEQrM,KAAKsJ,MAAMiB,QAAQpD,SAAShD,KAAI,SAAA6I,GAC5B,OACI,wBAAI1M,IAAK0M,GACJA,EACD,4BACI5D,UAAW,eACXC,QAAS,WACL,EAAKC,MAAMyD,OAAOrJ,EAAmB+E,OAAO,EAAKa,MAAMiB,QAAQlH,KAAM,EAAKiG,MAAMiB,QAAQpD,SAAS8F,QAAO,SAAAC,GAAC,OAAIA,IAAMF,SAH3H,gBAUhB,4BACI,2BACInL,KAAM,OACNsL,YAAa,uBACbR,IAAK3M,KAAKoM,eAEd,4BAAQ/C,QAAS,WACT,EAAK+C,aAAaS,SACqB,KAApC,EAAKT,aAAaS,QAAQxL,QACgD,IAA1E,EAAKiI,MAAMiB,QAAQpD,SAASxF,QAAQ,EAAKyK,aAAaS,QAAQxL,SAEjE,EAAKiI,MAAMyD,OAAOrJ,EAAmB+E,OAAO,EAAKa,MAAMiB,QAAQlH,KAA7C,sBAAuD,EAAKiG,MAAMiB,QAAQpD,UAA1E,CAAoF,EAAKiF,aAAaS,QAAQxL,UAChI,EAAK+K,aAAaS,QAAQxL,MAAQ,MAN1C,iB,GA/EAwI,IAAMC,WAqMnBb,I,kDAhGX,WAAYK,GAAe,IAAD,8BACtB,cAAMA,IAHF8D,SAAWvD,IAAMsC,YAIrB,EAAKhD,MAAQ,CACTkD,UAAW,GAHO,E,qDAOhB,IAAD,OACL,OACI,yBAAKjD,UAAW,mBAAoBC,QAAS,WAAO,EAAKuD,SAAS,CAACP,UAAW,MAC1E,iDAGA,wBAAIjD,UAAW,YAEPpJ,KAAKsJ,MAAMnB,SAAShE,KAAI,SAACoG,EAASjJ,GAAV,OACpB,kBAAC,EAAD,CACIiJ,QAASA,EACT8B,SAAU/K,IAAU,EAAK6H,MAAMkD,SAC/BzI,OAAQ,WACJmH,EAAMsC,SACF,uCAAO,WAAOA,GAAP,iBAAA/E,EAAA,6DACG1I,EAAO2K,EAAQlH,KACfiK,EAAc5J,EAAmB+E,OAAO7I,EAAM2K,EAAQpD,UAFzD,yBAIOzH,QAJP,IAIOA,OAJP,EAIOA,EAAO6N,aAAaD,GAJ3B,OAKCD,EACI,EAAK/D,MAAMpB,eACP,EAAKoB,MAAMnB,SAAS8E,QAChB,SAAA5L,GAAK,OAAIA,EAAMgC,OAASiK,EAAYjK,UARjD,gDAaCmK,MAAM,kEAAD,kBAbN,yDAAP,wDAkBRT,OAAQ,SAACU,GACL1C,EAAMsC,SACF,uCAAO,WAAOA,GAAP,SAAA/E,EAAA,yDACCiC,EAAQlH,OAASoK,EAAOpK,MACrBkH,EAAQpD,SAASjG,SAAWuM,EAAOtG,SAASjG,OAFhD,iFAOOxB,QAPP,IAOOA,OAPP,EAOOA,EAAO6N,aAAahD,GAP3B,8BAQO7K,QARP,IAQOA,OARP,EAQOA,EAAOgO,IAAID,GARlB,OASCJ,EACI,EAAK/D,MAAMpB,eAAX,sBACQ,EAAKoB,MAAMnB,SAAS8E,QACpB,SAAA5L,GAAK,OAAIA,EAAMgC,OAASoK,EAAOpK,SAFvC,CAGOoK,MAbZ,kDAiBCD,MAAM,kEAAD,kBAjBN,0DAAP,wDAsBRf,OAAQ,SAACkB,GACL,EAAKf,SAAS,CAACP,SAAU/K,GAAQqM,IAErCrN,IAAKiK,EAAQlH,UAGzB,4BACI,2BAAOsJ,IAAK3M,KAAKoN,SAAUvL,KAAM,OAAQsL,YAAa,wBACtD,4BAAQ9D,QAAS,WACT0B,EAAMsC,SACF,uCAAO,WAAOA,GAAP,eAAA/E,EAAA,0DACC,EAAK8E,SAASP,SAAkD,KAAvC,EAAKO,SAASP,QAAQxL,MAAMW,OADtD,iCAGW4L,EAAiBlK,EAAmB+E,OAAQ,EAAK2E,SAAiBP,QAAQxL,MAAO,IAH5F,gBAIW3B,QAJX,IAIWA,OAJX,EAIWA,EAAOgO,IAAIE,GAJtB,OAKKP,EAAS,EAAK/D,MAAMpB,eAAX,sBAA8B,EAAKoB,MAAMnB,UAAzC,CAAmDyF,MAC5D,EAAKR,SAASP,QAAQxL,MAAQ,GANnC,gDAQKmM,MAAM,+DAAD,kBARV,yDAAP,yDAFZ,c,GA3EK3D,IAAMC,YCQpBb,EAxHGC,aAXD,SAACC,GACd,MAAO,CACHX,eAAgBW,EAAMX,eACtByB,iBAAkBd,EAAMc,iBACxBtB,QAASQ,EAAMR,QACfE,SAAUM,EAAMN,YAIG,GA0HZI,C,kDA9GX,WAAYK,GAAe,IAAD,8BACtB,cAAMA,IAHFuE,SAAWhE,IAAMsC,YAIrB,EAAKhD,MAAQ,CACT2E,cAAc,GAHI,E,qDAOhB,IAAD,OACL,OACI,yBAAK1E,UAAW,mBACZ,yBAAKA,UAAW,qBACZ,4BACIA,UAAW,aACXC,QAAS,WACL,EAAKuD,SAAS,CAACkB,cAAe,EAAK3E,MAAM2E,iBAHjD,WAQA,4BACK9N,KAAKsJ,MAAMd,eAAenF,KAD/B,MACwCrD,KAAKsJ,MAAMW,iBAAmB,GAEtE,yEACgDjK,KAAKsJ,MAAMW,iBAAmB,EAD9E,iBAC+FjK,KAAKsJ,MAAMd,eAAenF,KADzH,OAIJ,2BAAO+F,UAAWpJ,KAAKmJ,MAAM2E,aAAe,GAAK,OAAQnB,IAAK3M,KAAK6N,UAC/D,+BACI,4BACA,yCAGA,qCAGA,2CAGA,qCAGA,2CAGA,qCAGA,6CAKJ,+BAEI7N,KAAKsJ,MAAMT,SAAS1E,KAAI,SAAC4J,EAASzM,GAC9B,IAAIqH,EAAmC,CACnCqF,MAAO,OACPC,MAAO,OACPC,MAAO,OACPC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,GAEZ,GAAI,EAAK/E,MAAMX,QAAS,CACpB,IAAM2F,EAAiB,EAAKhF,MAAMX,QAAQoF,EAAQ1J,UAClD,QAAuB3C,IAAnB4M,EAA8B,CAC9B,IAAMC,EAAkBD,EAAe,EAAKhF,MAAMd,eAAenF,MACjE,QAAwB3B,IAApB6M,EAA+B,CAC/B,IAAMC,EAAkBD,EAAgB,EAAKjF,MAAMW,uBAC3BvI,IAApB8M,IACA7F,EAAU6F,KAK1B,OACI,wBAAIlO,IAAKgB,GACL,4BACKyM,EAAQ1J,UAEb,4BACKsE,EAAQqF,OAEb,4BACKrF,EAAQwF,QAEb,4BACKxF,EAAQsF,OAEb,4BACKtF,EAAQyF,QAEb,4BACKzF,EAAQuF,OAEb,4BACKvF,EAAQ0F,mB,GApG7BxE,IAAMC,Y,gBCdpB2E,EAAMC,EAAQ,KAEdC,EAAiB,iDAIvBF,EAAIG,OAAOC,OTbW,YSctBJ,EAAIG,OAAOE,YAAc,IAAIL,EAAIM,2BAA2B,CACxDJ,eAAgBA,IAGpB,ICGKK,EDHCC,EAAW,IAAIC,IAAgB,CACjCC,WARe,sBASfC,SAVa,+BAabC,GAAkCJ,EAASK,iBAG3CC,GAAmC,KAEjCC,GAAoB,SAACC,GACvBhB,EAAIG,OAAOE,YAAc,IAAIL,EAAIM,2BAA2B,CACxDJ,eAAgBA,EAChBe,OAAO,qCT/BO,YS+BR,0BApBK,uBAqBgDD,EAAOE,aAAaC,kBAcjFC,GAAkB,uCAAG,sBAAAvH,EAAA,sEACV,IAAIwH,SAAiB,SAACC,EAASC,GACxCvB,EAAIG,OAAOE,YAAYmB,SAAQ,SAACC,GACxBA,GACAF,EAAKE,GAZjBX,GAAiB,IAAIY,YAAU,CAC3BC,gBAAiB3B,EAAIG,OAAOE,YAAYsB,gBACxCC,YAAa5B,EAAIG,OAAOE,YAAYuB,YACpCC,aAAc7B,EAAIG,OAAOE,YAAYwB,eAEjC7B,EAAIG,OAAOE,YAAYyB,QAUvBR,GAAQ,SAPO,mFAAH,qDAYlBS,GAAc,WAChB,GAAuB,OAAnBjB,GACA,MAAM,IAAI1O,MAAM,oER7CG,SAAC0O,GACxB7P,EAAQ,IAAIyD,EAAWoM,GQ8CvBkB,CAAclB,KAGZmB,GAAa,WACf3F,EAAMsC,SP+DN,uCAAO,WAAOA,GAAP,eAAA/E,EAAA,+EAE0B5I,EAAqBiR,kBAF/C,OAEOxI,EAFP,OAGCxB,QAAQC,IAAIuB,GACZkF,EAASnF,EAAeC,IAJzB,gDAKUxB,QAAQC,IAAR,MALV,yDAAP,uDO9DAmE,EAAMsC,SPwEN,uCAAO,WAAOA,GAAP,SAAA/E,EAAA,sDACH,IACI+E,EAAS3E,EAAc,KACzB,MAAOkI,GAAIjK,QAAQC,IAAIgK,GAHtB,2CAAP,wDOrEEC,GAA2B,WAC7BxB,GAAc,KACU,KACxBE,GAAiB,MAGfuB,GAAyB,WAC3BzB,GAAc,KACU,MAGf0B,GAAQ,uCAAG,WAAOC,EAAkBC,GAAzB,eAAA3I,EAAA,yDACH,KAAb0I,GAAgC,KAAbC,EADH,uBAEhBtK,QAAQC,IAAIyI,IACQ,OAAhBA,KACAA,GAAc,IAAI6B,IAAY,CAC1BC,SAAUH,EACVI,KAAMnC,KAGRoC,EAAwB,IAAIC,IAAsB,CACpDH,SAAUH,EACVO,SAAUN,IAXE,SAaH,IAAInB,SAAiB,SAACC,EAASC,GAAU,IAAD,EAEtC,QAAX,EAAAX,UAAA,SAAamC,iBAAiBH,EAAuB,CACjDI,UAAU,WAAD,4BAAE,WAAMhC,GAAN,SAAAnH,EAAA,sEAEHkH,GAAkBC,GAFf,SAGGI,KAHH,OAIHW,KACAE,KACAX,GAAQ,GANL,gDAQHe,KACAd,EAAK,EAAD,IATD,yDAAF,mDAAC,GAaV0B,UAAW,SAAAC,GACPb,KACAd,EAAK2B,IAGTC,oBAAqB,SAACC,EAAgBC,GAAwB,IAAD,EACzD,iBAAOzC,UAAP,aAAO,EAAa0C,6BAA6Bd,EAAUa,EAAoB,CAC3EL,UAAW,SAAAO,GACiBA,EACxBjC,GAAQ,IAEZ2B,UAAW,SAAAC,GACPb,KACAd,EAAK2B,YA1CT,gEAiDH,IAAI7B,SAAiB,SAACC,EAASC,GACpB,OAAhBX,GACAA,GAAY4C,WAAZ,uCAAuB,WAAON,EAAUlC,GAAjB,SAAAnH,EAAA,0DACfmH,EADe,iCAGXD,GAAkBC,GAHP,SAILI,KAJK,OAKXW,KACAE,KACAX,GAAQ,GAPG,kDASXe,KACAnK,QAAQC,IAAR,MACAoJ,EAAK,EAAD,IAXO,gCAcfc,KACAd,EAAK2B,GAfU,0DAAvB,0DAmBAb,KACAd,EAAK,wBAvEG,qFAAH,wDA6ERkC,GAAS,uCAAG,sBAAA5J,EAAA,0DACjB+G,GADiB,gCAEJ,IAAIS,SAAiB,SAACC,EAASC,GAExC,IAAK,IAAD,EACW,QAAX,EAAAX,UAAA,SAAa8C,UACbtB,KACAd,GAAQ,GACV,MAAOa,GACLC,KACAb,EAAKY,OAVI,yEAcd,GAdc,2CAAH,qDErJhB9H,GAAqB,CACvBsJ,MToDiB,WACjB,MAAO,CACHvQ,KAvDa,QAwDbiJ,UAAU,IStDduH,OT0DkB,WAClB,MAAO,CACHxQ,KA7Dc,SA8DdiJ,UAAU,KS1DZ7B,GAAYC,aATD,SAACC,GACd,MAAO,KAQyBL,IAMvBwJ,GAAQrJ,GAAS,kDAK1B,WAAYK,GAAe,IAAD,8BACtB,cAAMA,IAJViJ,cAAgB1I,IAAMsC,YAGI,EAF1BqG,cAAgB3I,IAAMsC,YAIlB4E,GAAS,GAAI,IACR0B,MACD,SAAApR,GACQA,GACA,EAAKiI,MAAM8I,WAGnB,SAAAM,OAGCC,OAAM,SAAAD,OAZW,EALA,qDAsBhB,IAAD,OACL,OACI,yBAAKE,GAAI,mBACL,0BAAMC,SAAQ,uCACV,WAAMzI,GAAN,SAAA9B,EAAA,yDACI8B,EAAG0I,kBACC,EAAKP,cAAc1F,UACnB,EAAK2F,cAAc3F,QAH3B,gCAK8BkE,GAAS,EAAKwB,cAAc1F,QAAQxL,MAAO,EAAKmR,cAAc3F,QAAQxL,OALpG,eAOY,EAAKiI,MAAM8I,QAPvB,2CADU,uDAaV,+CAGA,kCACI,4CACA,2BAAOvQ,KAAK,OAAOsL,YAAa,cAAeR,IAAK3M,KAAKuS,cAAeQ,aAAa,cAEzF,kCACI,4CACA,2BAAOlR,KAAK,WAAWsL,YAAa,cAAeR,IAAK3M,KAAKwS,cAAeO,aAAa,sBAE7F,4BAAQ3J,UAAU,QAAQvH,KAAK,UAA/B,iBAjDU,GAAqBgI,IAAMC,YAyD5CkJ,GAAS/J,GAAS,uKAEjB,IAAD,OACL,OAAQ,4BAAQG,UAAU,OAAOC,QAAO,sBAAE,sBAAAf,EAAA,sEAC5B4J,KAD4B,kCAElC,EAAK5I,MAAM+I,SAFuB,4CAAlC,gBAHe,GAAsBxI,IAAMC,YC/DtCmJ,G,kDAEjB,WAAY3J,GAAe,IAAD,8BACtB,cAAMA,IACDH,MAAQ,CACT+J,SAAS,GAHS,E,qDAOhB,IAAD,OACL,OAAOlT,KAAKsJ,MAAM4J,QACd,yBAAK9J,UAAW,2BACZ,yBAAKA,UAAW,oBACZ,4BAAQC,QAASrJ,KAAKsJ,MAAMD,QAASD,UAAWpJ,KAAKsJ,MAAM6J,aAAcnT,KAAKsJ,MAAM8J,aACpF,4BAAQhK,UAAU,OAAOC,QAAS,kBAAM,EAAKuD,SAAS,CAACsG,SAAU,EAAK/J,MAAM+J,YAA5E,SAEJ,yBAAK9J,UAAWpJ,KAAKmJ,MAAM+J,QAAU,qBAAuB,2BAA4BlT,KAAKsJ,MAAM+J,cAExG,S,GAlBwCxJ,IAAMC,WFXnDwJ,GAAO5E,EAAQ,KAQR5F,GAAqB,CAC9BF,kBAGEK,GAAYC,aAVM,SAACC,GACrB,MAAO,CACHN,SAAUM,EAAMN,YAQYC,K,SAM/BkG,K,2CAAAA,E,0DAAAA,E,+EAAAA,M,KAUU/F,IGNVsK,GHMUtK,MAAS,kDAEpB,WAAYK,GAAe,IAAD,8BACtB,cAAMA,IACDH,MAAQ,CACTqK,aAAcxE,EAAayE,WAHT,EAFN,6DASH1S,GACb,OAAOA,EAAOG,OAAS,GACQ,cAAxBH,EAAO,GAAG,GAAGiB,QACW,eAAxBjB,EAAO,GAAG,GAAGiB,QACW,mBAAxBjB,EAAO,GAAG,GAAGiB,QACbjB,EAAO2S,OAAM,SAAAC,GACZ,OAAsB,IAAfA,EAAIzS,YAfH,+BAmBV,IAAD,OACL,OACI,yBAAKkI,UAAW,sBACZ,6BACI,4BACKpJ,KAAKmJ,MAAMqK,cAEhB,kBAAC,GAAD,CAAWI,aAAc,SAACxT,GAClB,EAAKyT,iBAAiBzT,IACtB,EAAKkJ,MAAMV,eACPxI,EACKY,MAAM,GACNmD,KAAI,SAAA2P,GACD,MAAO,CACHzP,SAAUyP,EAAS,GAAG9R,OACtB4Q,GAAIkB,EAAS,GAAG9R,OAChB+R,OAAQD,EAAS,GAAG9R,YAIpC,EAAK4K,SAAS,CAAC4G,aAAcxE,EAAagF,WAE1C,EAAKpH,SAAS,CAAC4G,aAAcxE,EAAaiF,mBAzC9C,GAAgCpK,IAAMC,YAsDjDoK,GAAb,4MAEYC,UAAYtK,IAAMsC,YAF9B,uDAIc,IAAD,OACL,OACQ,8BACI,2BACIQ,IAAK3M,KAAKmU,UACVtS,KAAM,OACNuS,OAAQ,WACRhL,UAAW,aACXxJ,KAAM,gBACNgT,GAAI,gBACJzI,SAAU,SAAAoC,GAAU,IAAD,EACT8H,EAAI,UAAG9H,EAAMlC,OAAOiK,aAAhB,aAAG,EAAoBlQ,KAAK,GACtC,GAAIiQ,EAAM,CACN,IAAME,EAAK,IAAIC,WACfD,EAAGE,UAAY,WACPF,EAAGG,aAAeF,WAAWG,MAC7BrB,GAAKiB,EAAG9E,OAAQ,IAAI,SAACkC,EAAUiD,GACvBjD,EACAnE,MAAM,0CAAD,OAA2CmE,EAA3C,OAELhL,QAAQC,IAAIgO,GACZ,EAAKtL,MAAMsK,aAAagB,QAKxCL,EAAGM,WAAWR,EAAM,aAIhC,2BACIjL,UAAW,gBACX0L,QAAS,iBAFb,kDAlCpB,GAA+BjL,IAAMC,WGvExBhB,GAAqB,CAC9BF,iBACAF,iBAGEO,GAAYC,aAdM,SAACC,GACrB,MAAO,CACHc,iBAAkBd,EAAMc,iBACxBzB,eAAgBW,EAAMX,eACtBK,SAAUM,EAAMN,SAChBF,QAASQ,EAAMR,WASaG,K,SAM/ByK,O,qBAAAA,I,iCAAAA,I,0BAAAA,Q,KASUtK,IC3BV8L,GD2BU9L,MAAS,yKAET+L,GACP,GAAIA,EAAM,EACN,MAAO,CAAC,EAAG,EAAG,GAIlB,IAFA,IAAIC,EAAQ,EAAE,GAAI,GAAI,GAClB3T,EAAQ,GACiB,IAAvB2T,EAAMtT,SAAS,IAAW,CAC5B,IAAMuT,EAAKC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMJ,KACtB,IAAvBC,EAAMtT,QAAQuT,KACdD,EAAM3T,GAAS4T,EACf5T,GAAS,GAGjB,OAAO2T,IAfS,iCAkBR,IAAD,OACoB,OAAvBjV,KAAKsJ,MAAMX,SACX6E,MAAM,gEAEV,IAAM8H,EAAa,GACnBlT,OAAOgJ,OAAOkK,EAAYtV,KAAKsJ,MAAMX,SACrC3I,KAAKsJ,MAAMT,SAASzH,SAAQ,SAAAmU,GAExB,IAAIC,EAAUF,EAAWC,EAAKlR,eACd3C,IAAZ8T,IACAA,EAAU,GAEVF,EAAWC,EAAKlR,UAAYmR,GAEhC,IAAIC,EAAMD,EAAQ,EAAKlM,MAAMd,eAAenF,MAK5C,SAJY3B,IAAR+T,IACAA,EAAM,GACND,EAAQ,EAAKlM,MAAMd,eAAenF,MAAQoS,GAEvCA,EAAIvU,QAAU,EAAKoI,MAAMW,kBAC5BwL,EAAIlU,KX3CT,CACHyM,MAAO,OACPC,MAAO,OACPC,MAAO,OACPC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,IWuCJ,IACMhH,EADQ,EAAKqO,WAAW,EAAKpM,MAAMd,eAAerB,SAASjG,QAC9CiD,KAAI,SAAAwR,GAAG,OAAI,EAAKrM,MAAMd,eAAerB,SAASwO,MACjEF,EAAI,EAAKnM,MAAMW,kBAAoB,CAC/B+D,MAAO3G,EAAK,GACZ4G,MAAO5G,EAAK,GACZ6G,MAAO7G,EAAK,GACZ8G,OAAQ,EACRC,OAAQ,EACRC,OAAQ,GAEZ1H,QAAQC,IAAI6O,EAAIA,EAAIvU,OAAS,OAEjClB,KAAKsJ,MAAMZ,cAAc4M,KApDT,+BAwDV,IAAD,OACCM,EAAmC,OAAvB5V,KAAKsJ,MAAMX,QACvB4K,GAAUsC,QACV7V,KAAKsJ,MAAMT,SAASiN,MAAK,SAAAP,GACvB,IAAMzB,EAAY,EAAKxK,MAAMX,QAAoB4M,EAAKlR,UACtD,GAAIyP,EAAU,CACV,IAAMiC,EAAKjC,EAAS,EAAKxK,MAAMd,eAAenF,MAC9C,GAAI0S,EACA,YAA2CrU,IAApCqU,EAAG,EAAKzM,MAAMW,kBAG7B,OAAO,KACNsJ,GAAUyC,UAAYzC,GAAU0C,cACzC,OACI,yBAAK7M,UAAW,gBACZ,yBAAKA,UAAWwM,IAAcrC,GAAUsC,QAAU,GAAK,QACnD,2OAIJ,kBAAC,GAAD,CACIzC,YAAa,WACbC,YAAa,qTACbF,YAAa,OACb9J,QAAS,WACL,EAAK6M,YAEThD,QAAS0C,IAAcrC,GAAU0C,gBAErC,kBAAC,GAAD,CACI7C,YAAa,aACbC,YAAa,uXACbF,YAAa,SACb9J,QAAS,WACL,EAAK6M,YAEThD,QAAS0C,IAAcrC,GAAUyC,iBA5F7B,GAA4BnM,IAAMC,YEf7CqM,GAAb,kDAEI,WAAY7M,GAAkB,IAAD,8BACzB,cAAMA,IACDH,MAAQ,CACT7H,MAAO,GAHc,EAFjC,oDASYA,GACJtB,KAAK4M,SAAS,CAACtL,YAVvB,+BAac,IAAD,OACL,OACI,yBAAK8H,UAAWpJ,KAAKsJ,MAAM4J,QAAU,MAAQ,YACzC,yBAAK9J,UAAW,eACZ,yBAAKA,UAAW,WAAhB,sBAEYpJ,KAAKsJ,MAAM8M,QAAQjS,KAAI,SAAC8G,EAAQ3J,GAAT,OACvB,4BACI8H,UAAW9H,IAAU,EAAK6H,MAAM7H,MAAQ,gBAAkB,SAC1D+H,QAAS,kBAAM,EAAK6J,QAAQ5R,IAC5BhB,IAAKgB,GAGD2J,EAAOrL,UAT3B,CAYY,yBAAKwJ,UAAW,iBAAkB9I,IAAKN,KAAKsJ,MAAM8M,QAAQlV,QAA1D,QAGZ,yBAAKkI,UAAW,oBACZ,yBAAKA,UAAW,UACXpJ,KAAKsJ,MAAM+M,SAAWrW,KAAKsJ,MAAM+M,SAAU,KAExCrW,KAAKsJ,MAAM8M,QAAQjS,KAAI,SAAC8G,EAAQ3J,GAC5B,OACI,yBACI8H,UAAW9H,IAAU,EAAK6H,MAAM7H,MAAQ,oBAAsB,yBAC9DhB,IAAKgB,GAEL,yBAAK8H,UAAW,cACZ,4BAEQ6B,EAAOrL,MAGf,uBAAGwJ,UAAW,eAEN6B,EAAOoI,cAKfpI,EAAOqL,sBAvDvD,GAAyBzM,IAAMC,WA0ElByM,GAAb,uKAGQ,OAAO,kBAAC,GAAD,CACHrD,QAASlT,KAAKsJ,MAAM4J,QACpBkD,QAAS,CACL,CACIxW,KAAM,iBACNyT,YAAa,8HACbiD,UAAY,6BACI,6BACI,kBAAC,GAAD,CAAuBlD,YAAa,iBACbC,YAAa,uRACbF,YAAa,SAAU9J,QAAS,aAAU6J,SAAS,KAE9E,kBAAC,EAAD,QAGpB,CACItT,KAAM,kBACNyT,YAAa,0DACbiD,UAAW,kBAAC,EAAD,cArB/B,GAA2CzM,IAAMC,WA6BpC0M,GAAb,uKAGQ,OAAO,kBAAC,GAAD,CACCtD,QAASlT,KAAKsJ,MAAM4J,QACpBkD,QAAS,CACL,CACIxW,KAAM,gBACNyT,YAAa,oLACbiD,UACI,6BACI,kBAAC,GAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UAKpB,kBAAC,EAAD,WAlBZ,GAAsCzM,IAAMC,WAwB/B2M,GAAb,uKAGQ,OAAO,kBAAC,GAAD,CACHvD,QAASlT,KAAKsJ,MAAM4J,QACpBkD,QAAS,SALrB,GAA0CvM,IAAMC,WAWnC4M,GAAb,uKAGQ,OAAO,kBAAC,GAAD,CACHxD,QAASlT,KAAKsJ,MAAM4J,QACpBkD,QACI,CACI,CACIxW,KAAM,2BACNyT,YAAa,iGACbiD,UACI,6BACI,kBAAC,GAAD,MACA,kBAAC,GAAD,CACIlD,YAAa,2BACbC,YAAa,iNACbF,YAAa,OACb9J,QAAS,WACL,IAAMsN,EAAM,iCAAmCC,mBAAmB,0CAC5DtO,EAAIuO,SAASC,cAAc,KACjCxO,EAAEyO,MAAM7D,QAAU,OAClB5K,EAAE0O,KAAOL,EACTrO,EAAE2O,SAAW,0BACbJ,SAASjR,KAAKsR,YAAY5O,GAC1BA,EAAE6O,QACF7O,EAAE8O,UAENlE,SAAS,MAIzB,CACItT,KAAM,SACNyT,YAAa,0CACbiD,UAAW,kBAAC,GAAD,cAlCnC,GAA0CzM,IAAMC,Y,SDtJ3CiL,K,4BAAAA,E,uBAAAA,E,oCAAAA,E,qCAAAA,Q,SAOCsC,G,kDAGF,WAAY/N,GAAwF,IAAD,8BAC/F,cAAMA,IAHVgO,GAAK,IAAIC,MAAgDnV,OAAOC,KAAK0S,IAAa7T,QAAQsW,MAAK,kBAAM3N,IAAMsC,cAAgC,EAAG/J,OAAOC,KAAK0S,IAAa7T,QAAQiD,KAAI,SAAAuG,GAAG,OAAIA,OAItL,EAAKvB,MAAQ,CACTsO,cAAe,CAACnW,MAAO,EAAGoW,YAAa3C,GAAY4C,qBAHwC,E,yDAOtFrW,EAAeoW,GAA2B,IAAD,IAC5CE,EAAY5X,KAAKmJ,MAAMsO,cACzBG,EAAUtW,QAAUA,IAGxB,UAAAtB,KAAKsX,GAAGM,EAAUtW,OAAOuL,eAAzB,SAAkCgL,UAAUT,OAAO,UACnD,UAAApX,KAAKsX,GAAGhW,GAAOuL,eAAf,SAAwBgL,UAAUC,IAAI,UACtC9X,KAAK4M,SAAS,CAAC6K,cAAe,CAACnW,MAAOA,EAAOoW,YAAaA,KAC1D1X,KAAKsJ,MAAMyO,eAAeL,M,+BAGpB,IAAD,OACL,OACI,yBAAKtO,UAAU,UAAf,CAGa,yBAAKA,UAAW,cAAe9I,KAAM,GAArC,YAHb,mBAKwBN,KAAKsX,GAAGnT,KAAI,SAAC1C,EAAKH,GAC9B,IAAMqU,EAAMrU,EACNoW,EAActV,OAAOrB,OAAOgU,IAAaY,GAC/C,OACI,4BAAQhJ,IAAKlL,EAAKnB,IAAKqV,EACfvM,UAAW,EAAKE,MAAM0O,mBAAqBN,EAAc,SAAW,GACpErO,QAAS,kBAAM,EAAK4O,aAAatC,EAAK+B,KACzCA,a,GAnCZ7N,IAAMC,WA8CrBoO,G,uKAEE,OACI,yBAAK9O,UAAW,UACZ,yBAAKA,UAAW,eAAhB,oBAEI,uBAAG4N,KAAK,0CAA0CmB,MAAM,UAAxD,UAFJ,eAMI,uBAAGnB,KAAK,4BAA4BmB,MAAM,YAA1C,0B,GAVCtO,IAAMC,WAmEZb,GAxCGC,aARD,SAACC,GACd,MAAO,CACH2B,SAAU3B,EAAM2B,YAIG,GA0CZ7B,C,kDAzBX,WAAYK,GAAe,IAAD,gCACtB,cAAMA,IARVgO,IAO0B,mBANrBvC,GAAY4C,mBAAqB9N,IAAMsC,aAMlB,cALrB4I,GAAYqD,cAAgBvO,IAAMsC,aAKb,cAJrB4I,GAAYsD,kBAAoBxO,IAAMsC,aAIjB,cAHrB4I,GAAYuD,kBAAoBzO,IAAMsC,aAGjB,GAEtB,EAAKhD,MAAQ,CACTuO,YAAa3C,GAAYuD,mBAHP,E,qDAOhB,IAAD,OACL,OAAOtY,KAAKsJ,MAAMwB,SACb,yBAAK1B,UAAU,OACZ,kBAAC,GAAD,CAAQ4O,iBAAkBhY,KAAKmJ,MAAMuO,YAC7BK,eAAgB,SAACL,GAAD,OAAiB,EAAK9K,SAAS,CAAC8K,YAAaA,OACrE,kBAAC,GAAD,CAAsBxE,QAASlT,KAAKmJ,MAAMuO,cAAgB3C,GAAYuD,oBACtE,kBAAC,GAAD,CAAkBpF,QAASlT,KAAKmJ,MAAMuO,cAAgB3C,GAAYqD,gBAClE,kBAAC,GAAD,CAAsBlF,QAASlT,KAAKmJ,MAAMuO,cAAgB3C,GAAYsD,oBACtE,kBAAC,GAAD,CAAuBnF,QAASlT,KAAKmJ,MAAMuO,cAAgB3C,GAAY4C,qBACvE,kBAAC,GAAD,OAGH,yBAAKvO,UAAU,OACZ,kBAAC,GAAD,W,GA7BES,IAAMC,YEjFJyO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,CAAU9N,MAAOA,GACb,kBAAC,GAAD,OAEN8L,SAASiC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxG,MAAK,SAAAyG,GACJA,EAAaC,gBAEdxG,OAAM,SAAAzC,GACLvJ,QAAQuJ,MAAMA,EAAMkJ,a","file":"static/js/main.4897ee4b.chunk.js","sourcesContent":["export const Region = 'us-east-1';\r\nexport const BaseURL = process.env.REACT_APP_BASE_URL;\r\nexport const TableName = process.env.REACT_APP_TABLE_NAME;\r\n\r\nexport enum METHODS {\r\n    GET= 'GET',\r\n    POST = 'POST',\r\n    PUT = 'PUT',\r\n    DELETE = 'DELETE'\r\n}\r\n\r\nexport const AppJSONHeaders = () => {\r\n    return {\r\n        'Content-Type': 'application/json'\r\n    }\r\n}","import DynamoDB from \"aws-sdk/clients/dynamodb\";\r\nimport {AppJSONHeaders, BaseURL, METHODS, TableName} from \"./aws-constants\";\r\nimport {AwsClient} from \"aws4fetch\";\r\n//\r\n// {\r\n//     \"TableName\": \"CSE256-Data-Testing\",\r\n//     \"Key\": {\r\n//          \"PKMeta\": {\"S\": \"#CLASS:ProjectName\"},\r\n//          \"SKMeta\": {\"S\": \"#PROJECT_NAME:Cognitive Load\"}\r\n//     }\r\n// }\r\n//\r\n\r\nexport let table: ClassTable | null = null;\r\n\r\nexport const createTable = (awsFetchClient: AwsClient) => {\r\n    table = new ClassTable(awsFetchClient);\r\n}\r\n\r\nexport const getTable = () => {\r\n    return table;\r\n}\r\n\r\nenum Types {\r\n    Bool,\r\n    Num,\r\n    Str\r\n}\r\n\r\nclass PrimaryKey {\r\n\r\n    public static readonly parsePrefixRegEx = /^#([a-zA-Z0-9_.]+):/;\r\n    public static readonly parseDataRegEx = /^#[a-zA-Z0-9_.]+:([a-zA-Z0-9_.]+)/;\r\n\r\n    public static getPrefixFromPK(pk: string): string {\r\n        return (PrimaryKey.parsePrefixRegEx.exec(pk) as RegExpExecArray)[1];\r\n    }\r\n\r\n    private readonly name: string;\r\n    private readonly prefix: string;\r\n    private readonly metaDataKeyName: string;\r\n    private readonly metaDataType: Types;\r\n\r\n    constructor(name: string, prefix: string, metaDataKeyName: string, metaDataType: Types) {\r\n        this.name = name;\r\n        this.prefix = prefix;\r\n        this.metaDataKeyName = metaDataKeyName;\r\n        this.metaDataType = metaDataType;\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getMetaDataKeyName(): string {\r\n        return this.metaDataKeyName;\r\n    }\r\n\r\n    getMetaDataType(): Types {\r\n        return this.metaDataType;\r\n    }\r\n\r\n    toMetaDataFromData(data: DynamoDB.DocumentClient.AttributeMap): string {\r\n        return this.toMetaData(data[this.name]);\r\n    }\r\n\r\n    toMetaData(key: string) {\r\n        return (PrimaryKey.parseDataRegEx.exec(key) as RegExpExecArray)[1];\r\n    }\r\n\r\n    toString(data: string) {\r\n        return `#${this.prefix}:${data}`;\r\n    }\r\n\r\n}\r\n\r\ntype SKMetaData = {\r\n    key: string,\r\n    value: string\r\n}[];\r\n\r\nclass SortKey {\r\n\r\n    public static readonly prefixRegEx = /([a-zA-Z0-9_.]+)/;\r\n    public static readonly parsePrefixRegEx = /^#([a-zA-Z0-9_.]+):/;\r\n\r\n    public static getPrefixFromSK(sk: string): string {\r\n        return (SortKey.parsePrefixRegEx.exec(sk) as RegExpExecArray)[1];\r\n    }\r\n\r\n    private readonly name: string;\r\n    private readonly prefix: string;\r\n    private readonly metaDataKeyNames: string[];\r\n    private readonly metaDataTypes: Types[];\r\n\r\n    constructor(name: string, prefix: string, metaDataKeyNames: string[], metaDataTypes: Types[]) {\r\n        if (!SortKey.prefixRegEx.test(prefix)) {\r\n            throw new Error('Prefix is only allowed to take format: /([a-zA-Z0-9_.]+)/.');\r\n        }\r\n        this.name = name;\r\n        this.prefix = prefix;\r\n        this.metaDataKeyNames = metaDataKeyNames;\r\n        this.metaDataTypes = metaDataTypes;\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getMetaDataKeyNames(): string[] {\r\n        return this.metaDataKeyNames;\r\n    }\r\n\r\n    getMetaDataTypes(): Types[] {\r\n        return this.metaDataTypes;\r\n    }\r\n\r\n    toMetaDataFromData(data: DynamoDB.DocumentClient.AttributeMap) {\r\n        return this.toMetaData(data[this.name]);\r\n    }\r\n\r\n    toMetaData(key: string): SKMetaData {\r\n        if (key[0] === '#') {\r\n            key = key.slice(1); // Slice pound off of front of string\r\n            const values = key.split(':');\r\n            if ((values.length - 1) === this.metaDataKeyNames.length) {\r\n                const ret: SKMetaData = [];\r\n                values.forEach((value, index) => {\r\n                   if (index > 0) { // Skip prefix string\r\n                       ret.push({\r\n                           key: this.metaDataKeyNames[index - 1],\r\n                           value: value\r\n                       });\r\n                   }\r\n                });\r\n                return ret;\r\n            }\r\n            throw new Error(`Provided key does not have the expected number of values.`)\r\n        }\r\n        throw new Error(`Provided key does not follow expected pattern. Missing '#' at front of string.`)\r\n    }\r\n\r\n    toString(obj: any) {\r\n        let ret = `#${this.prefix}`;\r\n        this.metaDataKeyNames.forEach(key => {\r\n            const val = '' + obj[key];\r\n            if (val === undefined || val === null) {\r\n                throw new Error(`Provided object must have a non-null value for every key in sort key metaData. This object was missing at least this key: ${key}.`);\r\n            }\r\n            if (val.indexOf(':') !== -1 || val.indexOf('#') !== -1) {\r\n                throw new Error('Sort Key meta data cannot include # or : in it. This will ruin the invariant that allows the parser to work.')\r\n            }\r\n            ret += `:${val}`;\r\n        });\r\n        return ret;\r\n    }\r\n}\r\n\r\ninterface EntityConstructor {\r\n    new (data: DynamoDB.DocumentClient.AttributeMap): IEntity;\r\n    readonly sortKeyPrefix: string;\r\n    readonly primaryKeyPrefix: string;\r\n}\r\n\r\ninterface IEntity {\r\n    primaryKey(): PrimaryKey;\r\n    sortKey(): SortKey;\r\n    toDBForm(): DynamoDB.DocumentClient.PutItemInputAttributeMap;\r\n}\r\n\r\nabstract class AEntity implements IEntity {\r\n\r\n    protected constructor() {}\r\n\r\n    convert(data: string, type: Types) {\r\n        switch (type) {\r\n            case Types.Str:\r\n                return data;\r\n            case Types.Bool:\r\n                return data.trim().toLowerCase() === 'true';\r\n            case Types.Num:\r\n                return Number(data);\r\n        }\r\n    }\r\n\r\n    construct(data: DynamoDB.DocumentClient.AttributeMap) {\r\n        Object.keys(data).forEach(key => {\r\n            (this as any)[key] = data[key];\r\n        });\r\n        (this as any)[this.primaryKey().getMetaDataKeyName()] = this.convert(this.primaryKey().toMetaDataFromData(data), this.primaryKey().getMetaDataType());\r\n        this.sortKey()\r\n            .toMetaDataFromData(data)\r\n            .forEach((metaData, index) => {\r\n                (this as any)[metaData.key] = this.convert(metaData.value, this.sortKey().getMetaDataTypes()[index]);\r\n            });\r\n    }\r\n\r\n    toDBForm(): DynamoDB.DocumentClient.PutItemInputAttributeMap {\r\n        const ret = {};\r\n        Object.keys(this).forEach(key => {\r\n            if ((!this.sortKey().getMetaDataKeyNames().includes(key)) && (this.primaryKey().getMetaDataKeyName() !== key)) {\r\n                (ret as any)[key] = (this as any)[key];\r\n            }\r\n        });\r\n        return DynamoDB.Converter.marshall(ret);\r\n    }\r\n\r\n    abstract primaryKey(): PrimaryKey;\r\n\r\n    abstract sortKey(): SortKey;\r\n\r\n}\r\n\r\nclass Table {\r\n\r\n    private readonly fetchClient: AwsClient;\r\n    private readonly name: string;\r\n    private readonly pkName: string;\r\n    private readonly skName: string;\r\n    private readonly entities: Map<string, Map<string, EntityConstructor>>;\r\n\r\n    constructor(fetchClient: AwsClient, name: string, pkName: string, skName: string) {\r\n        this.fetchClient = fetchClient;\r\n        this.name = name;\r\n        this.pkName = pkName;\r\n        this.skName = skName;\r\n        this.entities = new Map<string, Map<string, EntityConstructor>>();\r\n    }\r\n\r\n    //// Misc. helpers\r\n\r\n    addEntity(entity: EntityConstructor): Table {\r\n        let mapMap = this.entities.get(entity.primaryKeyPrefix);\r\n        if (mapMap === undefined || mapMap === null) {\r\n            mapMap = new Map<string, EntityConstructor>();\r\n            this.entities.set(entity.primaryKeyPrefix, mapMap);\r\n        }\r\n        mapMap.set(entity.sortKeyPrefix, entity);\r\n        return this;\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getEntityConstructor(primaryKeyPrefix: string, sortKeyPrefix: string) {\r\n        return this.entities.get(primaryKeyPrefix)?.get(sortKeyPrefix);\r\n    }\r\n\r\n    getKeySchema() {\r\n        return [\r\n            {\r\n                KeyType: 'HASH',\r\n                AttributeName: this.pkName\r\n            },\r\n            {\r\n                KeyType: 'RANGE',\r\n                AttributeName: this.skName\r\n            }\r\n        ];\r\n    }\r\n\r\n    getAttributeDefinitions() {\r\n        return [\r\n            {\r\n                AttributeName: this.pkName,\r\n                AttributeType: 'S'\r\n            },\r\n            {\r\n                AttributeName: this.skName,\r\n                AttributeType: 'S'\r\n            }\r\n        ];\r\n    }\r\n\r\n    getKey(pk: string, sk: string) {\r\n        const key: any = {};\r\n        key[this.pkName] = pk;\r\n        key[this.skName] = sk;\r\n        return key;\r\n    }\r\n\r\n    async fetchJSON(url: string, request: RequestInit) {\r\n        return (await this.fetchClient.fetch(url, request)).json();\r\n    }\r\n\r\n    //// Table operations:\r\n\r\n    // create(throughput: DynamoDB.ProvisionedThroughput) {\r\n    //     return this.dbClient.createTable({\r\n    //         TableName: this.name,\r\n    //         KeySchema: this.getKeySchema(),\r\n    //         AttributeDefinitions: this.getAttributeDefinitions(),\r\n    //         ProvisionedThroughput: throughput\r\n    //     }).promise();\r\n    // }\r\n\r\n    // delete() {\r\n    //     return this.dbClient.deleteTable({\r\n    //         TableName: this.name\r\n    //     }).promise();\r\n    // }\r\n\r\n    // describe() {\r\n    //     return this.dbClient.describeTable({\r\n    //         TableName: this.name\r\n    //     }).promise();\r\n    // }\r\n\r\n    async exists() {\r\n        const path = '/db/tables';\r\n        const url = BaseURL + path;\r\n        let request = {\r\n            method: METHODS.GET,\r\n            headers: AppJSONHeaders(),\r\n        } as any;\r\n        const resp = await this.fetchJSON(url, request);\r\n        return (resp.TableNames as string[]).indexOf(TableName as string) !== -1;\r\n    }\r\n\r\n    //// Item operations:\r\n\r\n    async put(item: IEntity) {\r\n        const path = '/db/table';\r\n        const url = BaseURL + path;\r\n        let request = {\r\n            method: METHODS.POST,\r\n            headers: AppJSONHeaders(),\r\n            body: JSON.stringify({\r\n                TableName: this.getName(),\r\n                Item: item.toDBForm()\r\n            })\r\n        };\r\n        return this.fetchJSON(url, request);\r\n    }\r\n\r\n    update() {\r\n\r\n    }\r\n\r\n    async get(pk: string, sk: string) {\r\n        const path = '/db/table/get-item';\r\n        const url = BaseURL + path;\r\n        const key = this.getKey(pk, sk);\r\n        const request = {\r\n            method: METHODS.POST,\r\n            headers: AppJSONHeaders(),\r\n            body: JSON.stringify({\r\n                TableName: this.getName(),\r\n                Key: DynamoDB.Converter.marshall(key)\r\n            })\r\n        };\r\n        const item = DynamoDB.Converter.unmarshall((await this.fetchJSON(url, request))['Item']);\r\n        if (item === undefined) {\r\n            return item;\r\n        }\r\n        const ctor = this.getEntityConstructor(PrimaryKey.getPrefixFromPK(item[this.pkName]), SortKey.getPrefixFromSK(item[this.skName]));\r\n        return new (ctor as any)(item);\r\n    }\r\n\r\n    async delete(pk: string, sk: string) {\r\n        const path = '/db/table';\r\n        const url = BaseURL + path;\r\n        const key = this.getKey(pk, sk);\r\n        const request = {\r\n            method: METHODS.DELETE,\r\n            headers: AppJSONHeaders(),\r\n            body: JSON.stringify({\r\n                TableName: this.getName(),\r\n                Key: DynamoDB.Converter.marshall(key)\r\n            })\r\n        };\r\n        console.log(await this.fetchJSON(url, request));\r\n        // const item = DynamoDB.Converter.unmarshall((await this.fetchJSON(url, request))['Item']);\r\n    }\r\n\r\n    async query(keyConditionExpression: string, expressionAttributeValues: {[key: string]: any}): Promise<{[p: string]: any}[]> {\r\n        const path = '/db/table/query';\r\n        const url = BaseURL + path;\r\n        let request = {\r\n            method: METHODS.POST,\r\n            headers: AppJSONHeaders(),\r\n            body: JSON.stringify({\r\n                TableName: this.getName(),\r\n                KeyConditionExpression: keyConditionExpression,\r\n                ExpressionAttributeValues: DynamoDB.Converter.marshall(expressionAttributeValues)\r\n            })\r\n        };\r\n        return (await this.fetchJSON(url, request))['Items'].map((item: DynamoDB.AttributeMap) => DynamoDB.Converter.unmarshall(item));\r\n    }\r\n\r\n}\r\n\r\nexport class ClassTable extends Table {\r\n\r\n    public static readonly Name = TableName as string;\r\n    public static readonly PKName = 'PKMeta';\r\n    public static readonly SKName = 'SKMeta';\r\n\r\n    constructor(fetchClient: AwsClient) {\r\n        super(fetchClient, ClassTable.Name, ClassTable.PKName, ClassTable.SKName);\r\n        this.addEntity(HIT)\r\n            .addEntity(ProjectDescription);\r\n        // this.getProjectNames().then(console.log).catch(console.log)\r\n    }\r\n\r\n    async deleteEntity(entity: ClassTableEntity) {\r\n        return this.delete(entity.PKMeta, entity.SKMeta);\r\n    }\r\n\r\n    async getEntity(entity: ClassTableEntity) {\r\n        return this.get(entity.PKMeta, entity.SKMeta);\r\n    }\r\n\r\n    async getProjectNames() {\r\n        return (await this.query(\r\n            'PKMeta = :pk AND begins_with(SKMeta, :skp)',\r\n            {\r\n                ':pk': ProjectDescription.PK,\r\n                ':skp': '#' + ProjectDescription.sortKeyPrefix\r\n            }))\r\n            .map(item => new ProjectDescription(item));\r\n    }\r\n\r\n    async incrementHITCount(wustlKey: string, sortKeyData: HITSortKeyData) {\r\n        // const key = this.getKey(wustlKey, HIT.sortKey.toString(sortKeyData));\r\n        // const ret = await this.docClient.update({\r\n        //     TableName: this.getName(),\r\n        //     Key: key,\r\n        //     ExpressionAttributeValues: {':c': 1},\r\n        //     UpdateExpression: 'ADD Cnt :c',\r\n        //     ReturnValues: 'ALL_OLD'\r\n        // }).promise();\r\n        // return (this.getEntityConstructor(HIT.sortKeyPrefix))(ret.)\r\n        // return ret;\r\n    }\r\n\r\n}\r\n\r\ntype HITSortKeyData = {\r\n    ProjectName: string,\r\n    Iteration: number,\r\n    HITName: string\r\n}\r\n\r\nabstract class ClassTableEntity extends AEntity {\r\n    // @ts-ignore\r\n    PKMeta: string;      // Partition Key\r\n    // @ts-ignore\r\n    SKMeta: string;      // Sort Key\r\n\r\n}\r\n\r\nexport class ProjectDescription extends ClassTableEntity {\r\n\r\n    static ProjectName = 'ProjectName';\r\n    static primaryKeyPrefix = 'CLASS';\r\n    static sortKeyPrefix = 'PROJECT_NAME';\r\n    static PK = '#' + ProjectDescription.primaryKeyPrefix + ':' + ProjectDescription.ProjectName;\r\n    public static readonly primaryKey = new PrimaryKey(ClassTable.PKName, ProjectDescription.primaryKeyPrefix, 'ProjectName', Types.Str);\r\n    public static readonly sortKey = new SortKey(ClassTable.SKName, ProjectDescription.sortKeyPrefix, ['Name'], [Types.Str, Types.Num]);\r\n\r\n    // @ts-ignore\r\n    ProjectName: string;\r\n    // @ts-ignore\r\n    Name: string;\r\n    // @ts-ignore\r\n    TaskTags: string[];\r\n\r\n    constructor(data: DynamoDB.DocumentClient.AttributeMap) {\r\n        data['ProjectName'] = ProjectDescription.ProjectName;\r\n        super();\r\n        this.construct(data);\r\n        // @ts-ignore\r\n        if (this.TaskTags === undefined) {\r\n            this.TaskTags = [];\r\n        }\r\n    }\r\n\r\n    primaryKey(): PrimaryKey {\r\n        return ProjectDescription.primaryKey;\r\n    }\r\n\r\n    sortKey(): SortKey {\r\n        return ProjectDescription.sortKey;\r\n    }\r\n\r\n    get sortKeyPrefix(): string {\r\n        return ProjectDescription.sortKeyPrefix;\r\n    }\r\n\r\n    public static Create(name: string, tags: string[]) {\r\n        return new ProjectDescription({\r\n            PKMeta: ProjectDescription.PK,\r\n            SKMeta: this.sortKey.toString({Name: name}),\r\n            TaskTags: tags\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport class HIT extends ClassTableEntity {\r\n\r\n    static primaryKeyPrefix = 'STUDENT';\r\n    static sortKeyPrefix = 'HIT';\r\n    public static readonly primaryKey = new PrimaryKey(ClassTable.PKName, HIT.primaryKeyPrefix, 'WUSTLKey', Types.Str);\r\n    public static readonly sortKey = new SortKey(ClassTable.SKName, HIT.sortKeyPrefix, ['ProjectName', 'Iteration', 'HITName'], [Types.Str, Types.Num, Types.Str]);\r\n\r\n    // @ts-ignore\r\n    WUSTLKey: string;    // WUSTLKey\r\n    // @ts-ignore\r\n    ProjectName: string; // ProjectName\r\n    // @ts-ignore\r\n    Iteration: number;   // Iteration\r\n    // @ts-ignore\r\n    HITName: string;     // HITName\r\n    // @ts-ignore\r\n    Cnt: number;         // Cnt (short for Count or Counter which are both reserved keywords)\r\n    // @ts-ignore\r\n    AWSIDs: string[];    // AWSIDs\r\n\r\n    constructor(data: DynamoDB.DocumentClient.AttributeMap) {\r\n        super();\r\n        this.construct(data);\r\n    }\r\n\r\n    primaryKey(): PrimaryKey {\r\n        return HIT.primaryKey;\r\n    }\r\n\r\n    sortKey(): SortKey {\r\n        return HIT.sortKey;\r\n    }\r\n\r\n    get sortKeyPrefix(): string {\r\n        return HIT.sortKeyPrefix;\r\n    }\r\n\r\n    public static Create(wustlKey: string, projectName: string, iteration: number, hitName: string, cnt: number, awsIDs: string[]) {\r\n        return new HIT({\r\n            PKMeta: this.primaryKey.toString(wustlKey),\r\n            SKMeta: this.sortKey.toString({ProjectName: projectName, Iteration: iteration, HITName: hitName}),\r\n            Cnt: cnt,\r\n            AWSIDs: awsIDs\r\n        });\r\n    }\r\n\r\n}\r\n","import {table, ClassTable, ProjectDescription} from \"./db\";\r\n\r\nexport enum EDBStatus {\r\n    Unknown,\r\n    Created,\r\n    DoesNotExist,\r\n}\r\n\r\n// action types\r\nexport const LOGIN = 'LOGIN';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const UPDATE_DB_STATUS = 'UPDATE_DB_STATUS';\r\nexport const UPDATE_PROJECTS = 'UPDATE_PROJECTS';\r\nexport const UPDATE_ITERATIONS = 'UPDATE_ITERATIONS';\r\nexport const UPDATE_CURRENT_PROJECT = 'UPDATE_CURRENT_PROJECT';\r\nexport const UPDATE_CURRENT_ITERATION = 'UPDATE_CURRENT_ITERATION';\r\nexport const UPDATE_SPI_DATA = 'UPDATE_SPI_DATA';\r\nexport const UPDATE_STUDENTS = 'UPDATE_STUDENTS';\r\n\r\nexport interface StudentProjectIteration {\r\n    name1: string;\r\n    name2: string;\r\n    name3: string;\r\n    count1: number;\r\n    count2: number;\r\n    count3: number;\r\n}\r\n\r\nexport function DefaultStudentProjectIteration(): StudentProjectIteration {\r\n    return {\r\n        name1: 'none',\r\n        name2: 'none',\r\n        name3: 'none',\r\n        count1: 0,\r\n        count2: 0,\r\n        count3: 0\r\n    }\r\n}\r\n\r\nexport interface SPIData {\r\n    [wustlKey: string]: {\r\n        [projectName: string]: StudentProjectIteration[]\r\n    };\r\n}\r\n\r\nexport interface Student {\r\n    wustlKey: string;\r\n    id: string;\r\n    secret: string;\r\n}\r\n\r\nexport interface RootState {\r\n    loggedIn: boolean;\r\n    dbStatus: EDBStatus;\r\n    projects: ProjectDescription[];\r\n    iterations: number;\r\n    currentProject: ProjectDescription;\r\n    currentIteration: number;\r\n    spiData: null | SPIData;\r\n    students: Student[];\r\n}\r\n\r\nexport const login = () => {\r\n    return {\r\n        type: LOGIN,\r\n        loggedIn: true\r\n    };\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: LOGOUT,\r\n        loggedIn: false\r\n    };\r\n}\r\n\r\nexport const updateDBStatus = (dbStatus: EDBStatus) => {\r\n    return {\r\n        type: UPDATE_DB_STATUS,\r\n        dbStatus\r\n    };\r\n}\r\n\r\nexport const updateProjects = (projects: ProjectDescription[]) => {\r\n    const sortedProjects = projects.sort((a, b) => a.Name < b.Name ? -1 : 1);\r\n    return {\r\n        type: UPDATE_PROJECTS,\r\n        projects: sortedProjects,\r\n        currentProject: sortedProjects[0] ? sortedProjects[0] : ProjectDescription.Create('No Projects Yet', [])\r\n    }\r\n}\r\n\r\nexport const updateIterations = (iterations: number) => {\r\n    return {\r\n        type: UPDATE_ITERATIONS,\r\n        iterations,\r\n        iteration: 0\r\n    }\r\n}\r\n\r\nexport const updateCurrentProject = (currentProject: ProjectDescription) => {\r\n    return {\r\n        type: UPDATE_CURRENT_PROJECT,\r\n        currentProject\r\n    };\r\n}\r\n\r\nexport const updateCurrentIteration = (currentIteration: number) => {\r\n    return {\r\n        type: UPDATE_CURRENT_ITERATION,\r\n        currentIteration\r\n    };\r\n}\r\n\r\nexport const updateSPIData = (spiData: SPIData) => {\r\n    return {\r\n        type: UPDATE_SPI_DATA,\r\n        spiData\r\n    }\r\n}\r\n\r\nexport const updateStudents = (students: Student[]) => {\r\n    return {\r\n        type: UPDATE_STUDENTS,\r\n        students\r\n    }\r\n}\r\n\r\nexport const fetchProjects = () => {\r\n    return async (dispatch: any) => {\r\n        try {\r\n            const projects = (await (table as ClassTable).getProjectNames());\r\n            console.log(projects)\r\n            dispatch(updateProjects(projects));\r\n        } catch (e) {console.log(e);}\r\n    }\r\n}\r\n\r\nexport const fetchSPIData = () => {\r\n    return async (dispatch: any) => {\r\n        try {\r\n            dispatch(updateSPIData({}));\r\n        } catch (e) {console.log(e);}\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport {EDBStatus, RootState, updateDBStatus} from \"./actions\";\r\nimport {table} from \"./db\";\r\n\r\nconst mapState = (state: RootState) => {\r\n    return {\r\n        dbStatus: state.dbStatus\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateDBStatus\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\nclass DBStatus extends React.Component<Props, {}> {\r\n\r\n    renderCheck() {\r\n        return (\r\n          <button className={\"status-update safe right\"} onClick={async () => {\r\n              this.props.updateDBStatus((await table?.exists) ? EDBStatus.Created : EDBStatus.DoesNotExist);\r\n          }}>\r\n              Check\r\n          </button>\r\n        );\r\n    }\r\n\r\n    status() {\r\n        switch (this.props.dbStatus) {\r\n            case EDBStatus.Unknown:\r\n                return 'The status is currently unknown. Would you like to check?';\r\n            case EDBStatus.Created:\r\n                return 'The database is created and awaiting requests.';\r\n            case EDBStatus.DoesNotExist:\r\n                return 'The database does not exist. You should initialize it if you would like to use it.';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"status-container\"}>\r\n                {this.renderCheck()}\r\n                <h2>\r\n                    Database Status:\r\n                </h2>\r\n                <p className={\"status\"}>\r\n                    {this.status()}\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connector(DBStatus);","import React from \"react\";\r\nimport {RootState, updateCurrentIteration, updateCurrentProject} from \"./actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {ProjectDescription} from \"./db\";\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        projects: state.projects,\r\n        iterations: state.iterations,\r\n        currentProject: state.currentProject,\r\n        currentIteration: state.currentIteration\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {\r\n    updateCurrentProject,\r\n    updateCurrentIteration\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\ntype State = {\r\n}\r\n\r\nconst ffor = (num: number, fun: (num: number) => any) => {\r\n    let ret = [];\r\n    for (let i = 0; i < num; i++) {\r\n        ret.push(fun(i));\r\n    }\r\n    return ret;\r\n};\r\n\r\nclass ProjectIterationSelector extends React.Component<Props, State> {\r\n\r\n    render() {\r\n        return (\r\n            <div className={'project-iteration-selector'}>\r\n                <div className={'project-iteration-description'}>\r\n                    Project Name: Iteration\r\n                </div>\r\n                <div>\r\n                    <select className={'project-selector'} onChange={ev => this.props.updateCurrentProject(this.props.projects[ev.target.selectedIndex])}>\r\n                        {\r\n                            this.props.projects.map((project, index) => {\r\n                                return (\r\n                                    <option key={project.Name} value={project.Name}>\r\n                                        {project.Name}\r\n                                    </option>\r\n                                );\r\n                            })\r\n                        }\r\n                    </select>\r\n                    <span className={'separator'}>:</span>\r\n                    <select className={'iteration-selector'} onChange={ev => this.props.updateCurrentIteration(parseInt(ev.target.value))}>\r\n                        {\r\n                            ffor(this.props.iterations, (iteration => {\r\n                                return (\r\n                                    <option key={iteration} value={iteration}>\r\n                                        {iteration + 1}\r\n                                    </option>\r\n                                );\r\n                            }))\r\n                        }\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connector(ProjectIterationSelector);","import {\r\n    UPDATE_DB_STATUS,\r\n    EDBStatus,\r\n    UPDATE_CURRENT_PROJECT,\r\n    RootState,\r\n    UPDATE_CURRENT_ITERATION,\r\n    UPDATE_PROJECTS, UPDATE_ITERATIONS, UPDATE_SPI_DATA, SPIData, UPDATE_STUDENTS, Student, LOGIN, LOGOUT\r\n} from \"./actions\";\r\nimport {ProjectDescription} from \"./db\";\r\n\r\n// const defaultState: RootState = {\r\n//     loggedIn: false,\r\n//     dbStatus: EDBStatus.Unknown,\r\n//     projects: ['project 1', 'project 2', 'project 3'],\r\n//     iterations: 3,\r\n//     currentProject: 'project 1',\r\n//     currentIteration: 0,\r\n//     spiData: {'riley.mccuen': {project1: [{name1: 'math', name2: 'birthdays', name3: 'treats', count1: 2, count2: 2, count3: 3}]}},\r\n//     students: [{wustlKey: 'riley.mccuen', id: '', secret: ''}]\r\n// };\r\n\r\nconst defaultState: RootState = {\r\n    loggedIn: false,\r\n    dbStatus: EDBStatus.Unknown,\r\n    projects: [],\r\n    iterations: 3,\r\n    currentProject: ProjectDescription.Create('', []),\r\n    currentIteration: 0,\r\n    spiData: null,\r\n    students: []\r\n};\r\n\r\nexport function rootReducer(state=defaultState, action: any){\r\n    const reducerHelper = (updates: object) => {\r\n        return Object.assign({}, state, updates);\r\n    };\r\n    switch(action.type) {\r\n        case LOGIN:\r\n            const lin = action as {loggedIn: boolean};\r\n            return reducerHelper({\r\n                loggedIn: lin.loggedIn\r\n            });\r\n        case LOGOUT:\r\n            const lout = action as {loggedIn: boolean};\r\n            return reducerHelper({\r\n                loggedIn: lout.loggedIn\r\n            });\r\n        case UPDATE_DB_STATUS:\r\n            const udbs = action as {dbStatus: EDBStatus};\r\n            return reducerHelper({\r\n                dbStatus: udbs.dbStatus\r\n            });\r\n        case UPDATE_PROJECTS:\r\n            const up = action as {projects: string[], currentProject: string};\r\n            return reducerHelper({\r\n                projects: up.projects,\r\n                currentProject: up.currentProject\r\n            });\r\n        case UPDATE_ITERATIONS:\r\n            const ui = action as {iterations: number, iteration: number};\r\n            return reducerHelper({\r\n                iterations: ui.iterations,\r\n                currentIteration: ui.iteration\r\n            });\r\n        case UPDATE_CURRENT_PROJECT:\r\n            const ucp = action as {currentProject: string};\r\n            return reducerHelper({\r\n                currentProject: ucp.currentProject\r\n            });\r\n        case UPDATE_CURRENT_ITERATION:\r\n            const uci = action as {currentIteration: number};\r\n            return reducerHelper({\r\n                currentIteration: uci.currentIteration\r\n            });\r\n        case UPDATE_SPI_DATA:\r\n            const uspid = action as {spiData: SPIData};\r\n            return reducerHelper({\r\n                spiData: uspid.spiData\r\n            });\r\n        case UPDATE_STUDENTS:\r\n            const us = action as {students: Student[]};\r\n            return reducerHelper({\r\n                students: us.students\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import {applyMiddleware, compose, createStore} from \"redux\";\r\nimport {rootReducer} from \"./reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport const store = createStore(rootReducer, compose(\r\n    applyMiddleware(thunk)\r\n));","import React from \"react\";\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport {RootState, updateProjects} from \"./actions\";\r\nimport {store} from \"./store\";\r\nimport {ProjectDescription, table} from \"./db\";\r\n\r\nconst mapState = (state: RootState) => {\r\n    return {\r\n        projects: state.projects\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateProjects\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\ntype UpdateProjectProps = {\r\n    project: ProjectDescription,\r\n    selected: boolean,\r\n    delete: () => any,\r\n    update: (newVal: ProjectDescription) => any,\r\n    select: (callback: () => any) => any\r\n}\r\n\r\nclass UpdateProject extends React.Component<UpdateProjectProps, {editing: boolean, val: string, selected: boolean}> {\r\n\r\n    private inputElem = React.createRef<HTMLInputElement>();\r\n    private tagInputElem = React.createRef<HTMLInputElement>();\r\n\r\n    constructor(props: UpdateProjectProps) {\r\n        super(props);\r\n        this.state = {\r\n            selected: false,\r\n            editing: false,\r\n            val: props.project.Name\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <li className={this.props.selected ? \"update-project selected\" : \"update-project\"} onClick={event => {\r\n                event.stopPropagation();\r\n                this.props.select(() => {});\r\n            }}>\r\n                <div className={\"project-name\"}>\r\n                    <input type={'text'}\r\n                           value={this.state.val}\r\n                           disabled={!this.state.editing}\r\n                           ref={this.inputElem}\r\n                           onChange={ev => this.setState({val: ev.target.value})}\r\n                    />\r\n                    <button className={'danger'} onClick={() => this.props.delete()}>\r\n                        Delete\r\n                    </button>\r\n                    <button disabled={this.state.editing}\r\n                            onClick={() => {\r\n                                this.setState({editing: true}, () => this.inputElem.current?.focus());\r\n                            }}\r\n                    >\r\n                        Edit\r\n                    </button>\r\n                    <button disabled={!this.state.editing}\r\n                            onClick={() => {\r\n                                this.props.update(ProjectDescription.Create(this.state.val, this.props.project.TaskTags));\r\n                                this.setState({editing: false});\r\n                            }}\r\n                    >\r\n                        Save\r\n                    </button>\r\n                    <button disabled={!this.state.editing}\r\n                            onClick={() => {\r\n                                this.setState({val: this.props.project.Name, editing: false});\r\n                            }}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n                <div className={this.props.selected ? \"project-tags\" : \"hide\"}>\r\n                    <h4>\r\n                       Tags for tasks related to this project:\r\n                    </h4>\r\n                    <ul>\r\n                        {\r\n                            this.props.project.TaskTags.map(tag => {\r\n                                return (\r\n                                    <li key={tag}>\r\n                                        {tag}\r\n                                        <button\r\n                                            className={\"danger small\"}\r\n                                            onClick={() => {\r\n                                                this.props.update(ProjectDescription.Create(this.props.project.Name, this.props.project.TaskTags.filter(t => t !== tag)))\r\n                                            }}\r\n                                        > Delete </button>\r\n                                    </li>\r\n                                );\r\n                            })\r\n                        }\r\n                        <li>\r\n                            <input\r\n                                type={\"text\"}\r\n                                placeholder={\"New Tag Name Here...\"}\r\n                                ref={this.tagInputElem}\r\n                            />\r\n                            <button onClick={() => {\r\n                                if (this.tagInputElem.current\r\n                                    && this.tagInputElem.current.value !== ''\r\n                                    && this.props.project.TaskTags.indexOf(this.tagInputElem.current.value) === -1\r\n                                ) {\r\n                                    this.props.update(ProjectDescription.Create(this.props.project.Name, [...this.props.project.TaskTags, this.tagInputElem.current.value]));\r\n                                    this.tagInputElem.current.value = '';\r\n                                }\r\n                            }}> Add </button>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nclass UpdateProjects extends React.Component<Props, {selected: number}> {\r\n\r\n    private newInput = React.createRef<HTMLInputElement>();\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: -1\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"status-container\"} onClick={() => {this.setState({selected: -1})}}>\r\n                <h2>\r\n                    Current Projects:\r\n                </h2>\r\n                <ul className={'projects'}>\r\n                    {\r\n                        this.props.projects.map((project, index) =>\r\n                            <UpdateProject\r\n                                project={project}\r\n                                selected={index === this.state.selected}\r\n                                delete={() => {\r\n                                    store.dispatch((() => {\r\n                                        return async (dispatch: any) => {\r\n                                            const name = project.Name;\r\n                                            const projectSave = ProjectDescription.Create(name, project.TaskTags);\r\n                                            try {\r\n                                                await table?.deleteEntity(projectSave);\r\n                                                dispatch(\r\n                                                    this.props.updateProjects(\r\n                                                        this.props.projects.filter(\r\n                                                            value => value.Name !== projectSave.Name\r\n                                                        )\r\n                                                    )\r\n                                                );\r\n                                            } catch (e) {\r\n                                                alert(`Could not delete project. Send error output to Riley or debug: ${e}.`);\r\n                                            }\r\n                                        }\r\n                                    })());\r\n                                }}\r\n                                update={(newVal: ProjectDescription) => {\r\n                                    store.dispatch((() => {\r\n                                        return async (dispatch: any) => {\r\n                                            if (project.Name === newVal.Name\r\n                                                && project.TaskTags.length === newVal.TaskTags.length\r\n                                            ) {\r\n                                                return;\r\n                                            }\r\n                                            try {\r\n                                                await table?.deleteEntity(project);\r\n                                                await table?.put(newVal);\r\n                                                dispatch(\r\n                                                    this.props.updateProjects(\r\n                                                        [...this.props.projects.filter(\r\n                                                            value => value.Name !== newVal.Name\r\n                                                        ), newVal]\r\n                                                    )\r\n                                                );\r\n                                            } catch (e) {\r\n                                                alert(`Could not update project. Send error output to Riley or debug: ${e}.`);\r\n                                            }\r\n                                        }\r\n                                    })());\r\n                                }}\r\n                                select={(callback) => {\r\n                                    this.setState({selected: index}, callback);\r\n                                }}\r\n                                key={project.Name}\r\n                            />)\r\n                    }\r\n                    <li>\r\n                        <input ref={this.newInput} type={'text'} placeholder={'New Project Name...'} />\r\n                        <button onClick={() => {\r\n                                store.dispatch((() => {\r\n                                    return async (dispatch: any) => {\r\n                                        if (this.newInput.current && this.newInput.current.value.trim() !== '') { // check that input fits params\r\n                                            try {\r\n                                                const newProjectName = ProjectDescription.Create((this.newInput as any).current.value, []);\r\n                                                await table?.put(newProjectName);\r\n                                                dispatch(this.props.updateProjects([...this.props.projects, newProjectName]));\r\n                                                this.newInput.current.value = '';\r\n                                            } catch (e) {\r\n                                                alert(`Could not add project. Send error output to Riley or debug: ${e}.`);\r\n                                            }\r\n                                        }\r\n                                }})());\r\n                        }}>\r\n                            Add\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connector(UpdateProjects);","import React from \"react\";\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport {RootState, StudentProjectIteration} from \"./actions\";\r\n\r\nconst mapState = (state: RootState) => {\r\n    return {\r\n        currentProject: state.currentProject,\r\n        currentIteration: state.currentIteration,\r\n        spiData: state.spiData,\r\n        students: state.students\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\nclass Table extends React.Component<Props, {displayTable: boolean}> {\r\n\r\n    private tableRef = React.createRef<HTMLTableElement>();\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            displayTable: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'table-container'}>\r\n                <div className={'table-description'}>\r\n                    <button\r\n                        className={'right safe'}\r\n                        onClick={() => {\r\n                            this.setState({displayTable: !this.state.displayTable});\r\n                        }}\r\n                    >\r\n                        Display\r\n                    </button>\r\n                    <h2>\r\n                        {this.props.currentProject.Name} : {this.props.currentIteration + 1}\r\n                    </h2>\r\n                    <p>\r\n                        Below is the data collected for iteration [{this.props.currentIteration + 1}] of project [{this.props.currentProject.Name}].\r\n                    </p>\r\n                </div>\r\n                <table className={this.state.displayTable ? '' : 'hide'} ref={this.tableRef}>\r\n                    <thead>\r\n                        <tr>\r\n                        <th>\r\n                            WUSTL Key\r\n                        </th>\r\n                        <th>\r\n                            HIT 1\r\n                        </th>\r\n                        <th>\r\n                            HIT 1 Count\r\n                        </th>\r\n                        <th>\r\n                            HIT 2\r\n                        </th>\r\n                        <th>\r\n                            Hit 2 Count\r\n                        </th>\r\n                        <th>\r\n                            HIT 3\r\n                        </th>\r\n                        <th>\r\n                            Hit 3 Count\r\n                        </th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        this.props.students.map((student, index) => {\r\n                            let spiData: StudentProjectIteration = {\r\n                                name1: 'none',\r\n                                name2: 'none',\r\n                                name3: 'none',\r\n                                count1: 0,\r\n                                count2: 0,\r\n                                count3: 0\r\n                            };\r\n                            if (this.props.spiData) {\r\n                                const spiDataForStud = this.props.spiData[student.wustlKey];\r\n                                if (spiDataForStud !== undefined) {\r\n                                    const projDataForStud = spiDataForStud[this.props.currentProject.Name];\r\n                                    if (projDataForStud !== undefined) {\r\n                                        const iterDataForStud = projDataForStud[this.props.currentIteration];\r\n                                        if (iterDataForStud !== undefined) {\r\n                                            spiData = iterDataForStud;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <th>\r\n                                        {student.wustlKey}\r\n                                    </th>\r\n                                    <td>\r\n                                        {spiData.name1}\r\n                                    </td>\r\n                                    <td>\r\n                                        {spiData.count1}\r\n                                    </td>\r\n                                    <td>\r\n                                        {spiData.name2}\r\n                                    </td>\r\n                                    <td>\r\n                                        {spiData.count2}\r\n                                    </td>\r\n                                    <td>\r\n                                        {spiData.name3}\r\n                                    </td>\r\n                                    <td>\r\n                                        {spiData.count3}\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connector(Table);\r\n","import {AuthenticationDetails, CognitoUser, CognitoUserPool, CognitoUserSession} from 'amazon-cognito-identity-js';\r\nimport { AwsClient } from 'aws4fetch';\r\nimport {Region} from \"./aws-constants\";\r\nimport {createTable as dbCreateTable} from \"./db\";\r\nimport {fetchProjects, fetchSPIData} from \"./actions\";\r\nimport {store} from \"./store\";\r\n\r\nconst AWS = require(\"aws-sdk\");\r\n\r\nconst IdentityPoolId = \"us-east-1:b69d4b85-5cd8-4a07-aabf-e730ede479d9\";\r\nconst ClientId = \"15f397ambvh0db4i20usm454a0\";\r\nconst UserPoolId = \"us-east-1_B4YHaKqVR\";\r\n\r\nAWS.config.region = Region; // Region\r\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n    IdentityPoolId: IdentityPoolId,\r\n});\r\n\r\nconst userPool = new CognitoUserPool({\r\n    UserPoolId: UserPoolId,\r\n    ClientId: ClientId,\r\n});\r\n\r\nlet cognitoUser: CognitoUser | null = userPool.getCurrentUser();\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nlet sessionUserAttributes: CognitoUserSession | null | undefined = null;\r\nlet awsFetchClient: AwsClient | null = null;\r\n\r\nconst createCredentials = (result: CognitoUserSession) => {\r\n    AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n        IdentityPoolId: IdentityPoolId,\r\n        Logins: {\r\n            [`cognito-idp.${Region}.amazonaws.com/${UserPoolId}`]: result.getIdToken().getJwtToken(),\r\n        },\r\n    });\r\n}\r\n\r\nconst createFetchClient = () => {\r\n    awsFetchClient = new AwsClient({\r\n        secretAccessKey: AWS.config.credentials.secretAccessKey,\r\n        accessKeyId: AWS.config.credentials.accessKeyId,\r\n        sessionToken: AWS.config.credentials.sessionToken\r\n    });\r\n    return !AWS.config.credentials.expired;\r\n}\r\n\r\nconst refreshCredentials = async () => {\r\n    return await new Promise<boolean>((resolve, fail) => {\r\n        AWS.config.credentials.refresh((error: any) => {\r\n            if (error) {\r\n                fail(error);\r\n            }\r\n            createFetchClient();\r\n            resolve(true);\r\n        });\r\n    });\r\n}\r\n\r\nconst createTable = () => {\r\n    if (awsFetchClient === null) {\r\n        throw new Error('AWS Fetch Client is null, cannot construct database connection.');\r\n    }\r\n    dbCreateTable(awsFetchClient as AwsClient);\r\n}\r\n\r\nconst asyncStore = () => {\r\n    store.dispatch(fetchProjects());\r\n    store.dispatch(fetchSPIData());\r\n}\r\n\r\nconst nullifyAllServiceGlobals = () => {\r\n    cognitoUser = null;\r\n    sessionUserAttributes = null;\r\n    awsFetchClient = null;\r\n}\r\n\r\nconst clearIncorrectUserdata = () => {\r\n    cognitoUser = null;\r\n    sessionUserAttributes = null;\r\n}\r\n\r\nexport const awsLogin = async (username: string, password: string) => {\r\n    if (username !== '' && password !== '') { // if username and password are given\r\n        console.log(cognitoUser)\r\n        if (cognitoUser === null) {\r\n            cognitoUser = new CognitoUser({\r\n                Username: username,\r\n                Pool: userPool,\r\n            });\r\n        }\r\n        const authenticationDetails = new AuthenticationDetails({\r\n            Username: username,\r\n            Password: password,\r\n        });\r\n        return await new Promise<boolean>((resolve, fail) => {\r\n\r\n            cognitoUser?.authenticateUser(authenticationDetails, {\r\n                onSuccess: async result => {\r\n                    try {\r\n                        createCredentials(result);\r\n                        await refreshCredentials();\r\n                        createTable();\r\n                        asyncStore();\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        clearIncorrectUserdata();\r\n                        fail(e);\r\n                    }\r\n                },\r\n\r\n                onFailure: err => {\r\n                    clearIncorrectUserdata();\r\n                    fail(err);\r\n                },\r\n\r\n                newPasswordRequired: (userAttributes, requiredAttributes) => {\r\n                    return cognitoUser?.completeNewPasswordChallenge(password, requiredAttributes, {\r\n                        onSuccess: session => {\r\n                            sessionUserAttributes = session;\r\n                            resolve(true);\r\n                        },\r\n                        onFailure: err => {\r\n                            clearIncorrectUserdata();\r\n                            fail(err);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    } else {\r\n        return await new Promise<boolean>((resolve, fail) => {\r\n            if (cognitoUser !== null) {\r\n                cognitoUser.getSession(async (err: any, result: any) => {\r\n                    if (result) {\r\n                        try {\r\n                            createCredentials(result);\r\n                            await refreshCredentials();\r\n                            createTable();\r\n                            asyncStore();\r\n                            resolve(true);\r\n                        } catch (e) {\r\n                            clearIncorrectUserdata();\r\n                            console.log(e)\r\n                            fail(e);\r\n                        }\r\n                    } else {\r\n                        clearIncorrectUserdata();\r\n                        fail(err);\r\n                    }\r\n                });\r\n            } else {\r\n                clearIncorrectUserdata();\r\n                fail(\"No user session.\")\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const awsLogout = async () => {\r\n    if (cognitoUser) {\r\n        return await new Promise<boolean>((resolve, fail) => {\r\n            // @ts-ignore\r\n            try {\r\n                cognitoUser?.signOut();\r\n                nullifyAllServiceGlobals();\r\n                resolve(true);\r\n            } catch (e) {\r\n                nullifyAllServiceGlobals();\r\n                fail(e);\r\n            }\r\n        });\r\n    }\r\n    return true;\r\n}\r\n","import React from \"react\";\r\nimport {RootState, updateStudents} from \"./actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nconst csvp = require('csv-parse');\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        students: state.students\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {\r\n    updateStudents\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\nenum UploadStatus {\r\n    NO_UPLOAD = 'No file has been uploaded yet.',\r\n    SUCCESS = 'File has been successfully uploaded and parsed.',\r\n    FAILURE = 'The file that was uploaded could not be parsed or did not validate.',\r\n}\r\n\r\ntype State = {\r\n    fileUploaded: UploadStatus;\r\n}\r\n\r\nexport default connector(class StudentFileInput extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            fileUploaded: UploadStatus.NO_UPLOAD,\r\n        }\r\n    }\r\n\r\n    validateStudents(values: string[][]): boolean {\r\n        return values.length > 1\r\n            && values[0][0].trim() === 'WUSTL Key'\r\n            && values[0][1].trim() === 'AWS IAM ID'\r\n            && values[0][2].trim() === 'AWS IAM SECRET'\r\n            && values.every(row => {\r\n                return row.length === 3;\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"student-file-input\"}>\r\n                <div>\r\n                    <h3>\r\n                        {this.state.fileUploaded}\r\n                    </h3>\r\n                    <FileInput onFileChange={(data: string[][]) => {\r\n                        if (this.validateStudents(data)) {\r\n                            this.props.updateStudents(\r\n                                data\r\n                                    .slice(1)\r\n                                    .map(studData => {\r\n                                        return {\r\n                                            wustlKey: studData[0].trim(),\r\n                                            id: studData[1].trim(),\r\n                                            secret: studData[2].trim(),\r\n                                        };\r\n                                    })\r\n                            );\r\n                            this.setState({fileUploaded: UploadStatus.SUCCESS});\r\n                        } else {\r\n                            this.setState({fileUploaded: UploadStatus.FAILURE});\r\n                        }\r\n                    }} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\ntype FileInputProps = {\r\n    onFileChange: (values: string[][]) => any\r\n}\r\n\r\nexport class FileInput extends React.Component<FileInputProps, {}> {\r\n\r\n    private fileInput = React.createRef<HTMLInputElement>();\r\n\r\n    render() {\r\n        return (\r\n                <form>\r\n                    <input\r\n                        ref={this.fileInput}\r\n                        type={\"file\"}\r\n                        accept={\"text/csv\"}\r\n                        className={\"input-file\"}\r\n                        name={\"student-input\"}\r\n                        id={\"student-input\"}\r\n                        onChange={event => {\r\n                            const file = event.target.files?.item(0);\r\n                            if (file) {\r\n                                const fr = new FileReader();\r\n                                fr.onloadend = () => {\r\n                                    if (fr.readyState === FileReader.DONE) {\r\n                                        csvp(fr.result, {}, (err: any, out: string[][]) => {\r\n                                            if (err) {\r\n                                                alert(`Could not parse file correctly. Error: ${err}.`)\r\n                                            } else {\r\n                                                console.log(out);\r\n                                                this.props.onFileChange(out);\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                };\r\n                                fr.readAsText(file, 'utf-8');\r\n                            }\r\n                       }}\r\n                    />\r\n                    <label\r\n                        className={\"student-input\"}\r\n                        htmlFor={\"student-input\"}\r\n                    >\r\n                        Input File of Student Credentials Here...\r\n                    </label>\r\n                </form>\r\n        );\r\n    }\r\n\r\n}","import {RootState, login, logout} from \"./actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {awsLogin, awsLogout} from \"./aws-service\";\r\n\r\nconst mapState = (state: RootState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    login,\r\n    logout\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\nexport const Login = connector(class Login extends React.Component<Props, {}> {\r\n\r\n    usernameField = React.createRef<HTMLInputElement>();\r\n    passwordField = React.createRef<HTMLInputElement>();\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        awsLogin('', '')\r\n            .then(\r\n            value => {\r\n                if (value) {\r\n                    this.props.login();\r\n                }\r\n            },\r\n            reason => {\r\n                // error -> rejection\r\n            })\r\n            .catch(reason => {\r\n               // do nothing\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={\"login-container\"}>\r\n                <form onSubmit={\r\n                    async ev => {\r\n                        ev.preventDefault();\r\n                        if (this.usernameField.current &&\r\n                            this.passwordField.current\r\n                        ) {\r\n                            const success = await awsLogin(this.usernameField.current.value, this.passwordField.current.value)\r\n                            if (success) {\r\n                                this.props.login();\r\n                            }\r\n                        }\r\n                    }}\r\n                    >\r\n                    <h1>\r\n                        CSE 256 Console\r\n                    </h1>\r\n                    <fieldset>\r\n                        <label>Username:</label>\r\n                        <input type=\"text\" placeholder={\"Username...\"} ref={this.usernameField} autoComplete=\"username\"/>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <label>Password:</label>\r\n                        <input type=\"password\" placeholder={\"Password...\"} ref={this.passwordField} autoComplete=\"current-password\"/>\r\n                    </fieldset>\r\n                    <button className=\"basic\" type=\"submit\"> Login </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n});\r\n\r\nexport const Logout = connector(class Logout extends React.Component<Props, {}> {\r\n\r\n    render() {\r\n        return (<button className=\"safe\" onClick={async () => {\r\n            if (await awsLogout()) {\r\n                this.props.logout();\r\n            }\r\n        }}> Logout </button>);\r\n    }\r\n\r\n});","import React from \"react\";\r\n\r\ntype Props = {\r\n    buttonTitle: string;\r\n    description: string;\r\n    buttonClass: string;\r\n    onClick: (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => any;\r\n    display: boolean;\r\n};\r\n\r\ntype State = {\r\n    display: boolean;\r\n};\r\n\r\nexport default class ButtonWithDescription extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            display: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.display ? (\r\n            <div className={'button-with-description'}>\r\n                <div className={'button-container'}>\r\n                    <button onClick={this.props.onClick} className={this.props.buttonClass}>{this.props.buttonTitle}</button>\r\n                    <button className=\"info\" onClick={() => this.setState({display: !this.state.display})}>Info</button>\r\n                </div>\r\n                <div className={this.state.display ? 'action-description' : 'action-description hide'}>{this.props.description}</div>\r\n            </div>\r\n        ): null;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {RootState, updateStudents, updateSPIData, SPIData, DefaultStudentProjectIteration} from \"./actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport ButtonWithDescription from \"./button-with-description\";\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        currentIteration: state.currentIteration,\r\n        currentProject: state.currentProject,\r\n        students: state.students,\r\n        spiData: state.spiData\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {\r\n    updateStudents,\r\n    updateSPIData\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\nenum Generated {\r\n    LOADING ,\r\n    NOT_GENERATED,\r\n    GENERATED,\r\n}\r\n\r\ntype State = {\r\n}\r\n\r\nexport default connector(class HITGenerator extends React.Component<Props, State> {\r\n\r\n    threeRands(max: number) {\r\n        if (max < 3) {\r\n            return [0, 0, 0];\r\n        }\r\n        let rands = [-1, -1, -1];\r\n        let index = 0;\r\n        while(rands.indexOf(-1) !== -1) {\r\n            const ri = Math.floor(Math.random() * Math.floor(max));\r\n            if (rands.indexOf(ri) === -1) {\r\n                rands[index] = ri;\r\n                index += 1;\r\n            }\r\n        }\r\n        return rands;\r\n    }\r\n\r\n    generate() {\r\n        if (this.props.spiData === null) {\r\n            alert('Cannot generate when data has not been loaded from database.');\r\n        }\r\n        const newSPIData = {};\r\n        Object.assign(newSPIData, this.props.spiData);\r\n        this.props.students.forEach(stud => {\r\n            // @ts-ignore\r\n            let studSPI = newSPIData[stud.wustlKey];\r\n            if (studSPI === undefined) {\r\n                studSPI = {};\r\n                // @ts-ignore\r\n                newSPIData[stud.wustlKey] = studSPI;\r\n            }\r\n            let pis = studSPI[this.props.currentProject.Name];\r\n            if (pis === undefined) {\r\n                pis = [];\r\n                studSPI[this.props.currentProject.Name] = pis;\r\n            }\r\n            while (pis.length <= this.props.currentIteration) {\r\n                pis.push(DefaultStudentProjectIteration());\r\n            }\r\n            const rands = this.threeRands(this.props.currentProject.TaskTags.length);\r\n            const tags = rands.map(ind => this.props.currentProject.TaskTags[ind]);\r\n            pis[this.props.currentIteration] = {\r\n                name1: tags[0],\r\n                name2: tags[1],\r\n                name3: tags[2],\r\n                count1: 0,\r\n                count2: 0,\r\n                count3: 0\r\n            };\r\n            console.log(pis[pis.length - 1]);\r\n        });\r\n        this.props.updateSPIData(newSPIData);\r\n        // upload new data to database\r\n    }\r\n\r\n    render() {\r\n        const generated = this.props.spiData === null\r\n            ? Generated.LOADING\r\n            : this.props.students.some(stud => {\r\n                const studData = (this.props.spiData as SPIData)[stud.wustlKey];\r\n                if (studData) {\r\n                    const pi = studData[this.props.currentProject.Name];\r\n                    if (pi) {\r\n                        return pi[this.props.currentIteration] !== undefined;\r\n                    }\r\n                }\r\n                return false;\r\n            }) ? Generated.GENERATED : Generated.NOT_GENERATED;\r\n        return (\r\n            <div className={'flex-actions'}>\r\n                <div className={generated === Generated.LOADING ? '' : 'hide'}>\r\n                    <h3>\r\n                        The necessary data to display the available actions has not loaded from the database yet. If the database is properly configured and running this page will automatically refresh when the data is loaded.\r\n                    </h3>\r\n                </div>\r\n                <ButtonWithDescription\r\n                    buttonTitle={'Generate'}\r\n                    description={'This button will generate the HIT assignments for all students. Nothing that is already in the database will be changed, modified, or destroyed by this action. Use this button once for each iteration of each project. This will generate a set of HITs for each student to perform for the requested iteration.'}\r\n                    buttonClass={'safe'}\r\n                    onClick={() => {\r\n                        this.generate();\r\n                    }}\r\n                    display={generated === Generated.NOT_GENERATED}\r\n                />\r\n                <ButtonWithDescription\r\n                    buttonTitle={'Regenerate'}\r\n                    description={'This button will REGENERATE the HIT assignments for all students. This will generate a new list of tasks for each student for this iteration and overwrite them in the database. Only run this if HITs have not already been submitted to MTurk. If they have do not run this or it will be impossible to connect logs generated from MTurk to the student that that log belongs to.'}\r\n                    buttonClass={'danger'}\r\n                    onClick={() => {\r\n                        this.generate();\r\n                    }}\r\n                    display={generated === Generated.GENERATED}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n});","import React from 'react';\r\nimport './App.css';\r\nimport {HitManagementTab, PostHitManagementTab, SemesterManagementTab, SessionManagementTab} from \"./tab\";\r\nimport {RootState} from \"./actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {Login} from \"./login\";\r\n\r\nenum NavLocation {\r\n    SessionManagement = 'Session',\r\n    HITManagement = 'Deploy',\r\n    PostHITManagement = 'Post Deployment',\r\n    SemesterManagement = 'Semester Setup',\r\n}\r\n\r\nclass NavBar extends React.Component<{ startNavLocation: NavLocation, onUpdateActive: (input: NavLocation) => any }, { currentActive: { index: number, navLocation: NavLocation } }> {\r\n    rs = new Array<() => React.RefObject<HTMLButtonElement>>(Object.keys(NavLocation).length).fill(() => React.createRef<HTMLButtonElement>(), 0, Object.keys(NavLocation).length).map(fun => fun());\r\n\r\n    constructor(props: { startNavLocation: NavLocation, onUpdateActive: (input: NavLocation) => any }) {\r\n        super(props);\r\n        this.state = {\r\n            currentActive: {index: 0, navLocation: NavLocation.SemesterManagement}\r\n        };\r\n    }\r\n\r\n    updateActive(index: number, navLocation: NavLocation) {\r\n        const oldActive = this.state.currentActive;\r\n        if (oldActive.index === index) {\r\n            return;\r\n        }\r\n        this.rs[oldActive.index].current?.classList.remove('active');\r\n        this.rs[index].current?.classList.add('active');\r\n        this.setState({currentActive: {index: index, navLocation: navLocation}});\r\n        this.props.onUpdateActive(navLocation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"header\">\r\n                {\r\n                    [\r\n                        (<div className={\"filler logo\"} key={-1}>\r\n                            CSE 256\r\n                        </div>), ...this.rs.map((val, index) => {\r\n                        const ind = index;\r\n                        const navLocation = Object.values(NavLocation)[ind];\r\n                        return (\r\n                            <button ref={val} key={ind}\r\n                                    className={this.props.startNavLocation === navLocation ? \"active\" : \"\"}\r\n                                    onClick={() => this.updateActive(ind, navLocation)}>\r\n                                {navLocation}\r\n                            </button>\r\n                        );\r\n                    })]\r\n                }\r\n            </nav>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nclass Footer extends React.Component<{}, {}> {\r\n    render() {\r\n        return (\r\n            <div className={\"footer\"}>\r\n                <div className={\"attribution\"}>\r\n                    Icons made by&nbsp;\r\n                    <a href=\"https://www.flaticon.com/authors/google\" title=\"Google\">\r\n                        Google\r\n                    </a>\r\n                    &nbsp;from&nbsp;\r\n                    <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n                        www.flaticon.com\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapState = (state: RootState) => {\r\n    return {\r\n        loggedIn: state.loggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\nclass App extends React.Component<Props, { navLocation: NavLocation }> {\r\n\r\n    rs = {\r\n        [NavLocation.SemesterManagement]: React.createRef<any>(),\r\n        [NavLocation.HITManagement]: React.createRef<any>(),\r\n        [NavLocation.PostHITManagement]: React.createRef<any>(),\r\n        [NavLocation.SessionManagement]: React.createRef<any>(),\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            navLocation: NavLocation.SessionManagement,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return this.props.loggedIn ?\r\n            (<div className=\"app\">\r\n                <NavBar startNavLocation={this.state.navLocation}\r\n                        onUpdateActive={(navLocation) => this.setState({navLocation: navLocation})}/>\r\n                <SessionManagementTab display={this.state.navLocation === NavLocation.SessionManagement}/>\r\n                <HitManagementTab display={this.state.navLocation === NavLocation.HITManagement}/>\r\n                <PostHitManagementTab display={this.state.navLocation === NavLocation.PostHITManagement}/>\r\n                <SemesterManagementTab display={this.state.navLocation === NavLocation.SemesterManagement}/>\r\n                <Footer/>\r\n            </div>)\r\n            :\r\n            (<div className=\"app\">\r\n                <Login/>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default connector(App);\r\n","import React from \"react\";\r\nimport DBStatus from \"./db-status\";\r\nimport ProjectIterationSelector from \"./project-iteration-selector\";\r\nimport UpdateProjects from \"./update-projects\";\r\nimport Table from \"./table\";\r\nimport {Logout} from \"./login\";\r\nimport ButtonWithDescription from \"./button-with-description\";\r\nimport StudentFileInput from \"./file-input\";\r\nimport HITGenerator from \"./hit-generator\";\r\n\r\ninterface TabProps {\r\n    actions: {name: string, description: string, component: JSX.Element}[];\r\n    display: boolean\r\n}\r\n\r\ninterface TabState {\r\n    index: number\r\n}\r\n\r\nexport class Tab extends React.Component<TabProps, TabState> {\r\n\r\n    constructor(props: TabProps) {\r\n        super(props);\r\n        this.state = {\r\n            index: 0,\r\n        }\r\n    }\r\n\r\n    display(index: number) {\r\n        this.setState({index});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.display ? \"tab\" : \"tab hide\"}>\r\n                <div className={\"tab-content\"}>\r\n                    <div className={\"sidebar\"}>\r\n                        {\r\n                            [...this.props.actions.map((action, index) => (\r\n                                <button\r\n                                    className={index === this.state.index ? 'action active' : 'action'}\r\n                                    onClick={() => this.display(index)}\r\n                                    key={index}\r\n                                >\r\n                                    {\r\n                                        action.name\r\n                                    }\r\n                                </button>\r\n                            )), <div className={\"sidebar-filler\"} key={this.props.actions.length}> </div>]\r\n                        }\r\n                    </div>\r\n                    <div className={\"output-container\"}>\r\n                        <div className={\"output\"}>\r\n                            {this.props.children ? this.props.children: null}\r\n                            {\r\n                                this.props.actions.map((action, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            className={index === this.state.index ? 'component-wrapper' : 'component-wrapper hide'}\r\n                                            key={index}\r\n                                        >\r\n                                            <div className={'tab-header'}>\r\n                                                <h1>\r\n                                                    {\r\n                                                        action.name\r\n                                                    }\r\n                                                </h1>\r\n                                                <p className={\"description\"}>\r\n                                                    {\r\n                                                        action.description\r\n                                                    }\r\n                                                </p>\r\n                                            </div>\r\n                                            {\r\n                                                action.component\r\n                                            }\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\ninterface ConcreteTabProps {\r\n    display: boolean;\r\n}\r\n\r\nexport class SemesterManagementTab extends React.Component<ConcreteTabProps, {}> {\r\n\r\n    render() {\r\n        return <Tab\r\n            display={this.props.display}\r\n            actions={[\r\n                {\r\n                    name: 'Clear Database',\r\n                    description: 'Deletes all data from the database that is specific to a semester. Retains login data and other non-semester specific data.',\r\n                    component: (<div>\r\n                                    <div>\r\n                                        <ButtonWithDescription buttonTitle={'Clear Database'}\r\n                                                               description={'Clicking this button will delete all data from the database that is not meant to be carried over. This includes: HIT assignments, Student ID to HIT ID mappings and more. Click this button once the semester is completely over and you are ready to clean out all of the old data.'}\r\n                                                               buttonClass={'danger'} onClick={() => {}} display={true} />\r\n                                    </div>\r\n                                    <DBStatus/>\r\n                                </div>)\r\n                },\r\n                {\r\n                    name: 'Change Projects',\r\n                    description: 'Allows you to view and change projects for this course.',\r\n                    component: <UpdateProjects/>\r\n                }\r\n            ]}\r\n        />\r\n    }\r\n\r\n}\r\n\r\nexport class HitManagementTab extends React.Component<ConcreteTabProps, {}> {\r\n\r\n    render() {\r\n        return <Tab\r\n                display={this.props.display}\r\n                actions={[\r\n                    {\r\n                        name: 'Generate HITs',\r\n                        description: 'Generate HITs for each student. HITs will be generated based on current project and iteration as well as information about which HITs that they have had for previous iterations.',\r\n                        component: (\r\n                            <div>\r\n                                <HITGenerator/>\r\n                                <DBStatus/>\r\n                                <Table />\r\n                            </div>)\r\n                    }\r\n                ]}\r\n        >\r\n            <ProjectIterationSelector />\r\n        </Tab>\r\n    }\r\n\r\n}\r\n\r\nexport class PostHitManagementTab extends React.Component<ConcreteTabProps, {}> {\r\n\r\n    render() {\r\n        return <Tab\r\n            display={this.props.display}\r\n            actions={[]}\r\n        />\r\n    }\r\n\r\n}\r\n\r\nexport class SessionManagementTab extends React.Component<ConcreteTabProps, {}> {\r\n\r\n    render() {\r\n        return <Tab\r\n            display={this.props.display}\r\n            actions={\r\n                [\r\n                    {\r\n                        name: 'Load Student Credentials',\r\n                        description: 'Load in student credentials if you need to interact with students and/or their Mturk accounts.',\r\n                        component:\r\n                            <div>\r\n                                <StudentFileInput />\r\n                                <ButtonWithDescription\r\n                                    buttonTitle={'Download CSV Template...'}\r\n                                    description={'This will download a CSV Template that you can then fill out with student credentials. This template has correctly spelt and formatted headers so that there are no validation errors when uploading it later.'}\r\n                                    buttonClass={'safe'}\r\n                                    onClick={() => {\r\n                                        const uri = 'data:text/plain;charset=utf-8,' + encodeURIComponent(\"WUSTL Key,AWS IAM ID, AWS IAM SECRET\\n\");\r\n                                        const a = document.createElement('a');\r\n                                        a.style.display = 'none';\r\n                                        a.href = uri;\r\n                                        a.download = 'student-credentials.csv';\r\n                                        document.body.appendChild(a);\r\n                                        a.click();\r\n                                        a.remove();\r\n                                    }}\r\n                                    display={true}\r\n                                />\r\n                            </div>\r\n                    },\r\n                    {\r\n                        name: 'Logout',\r\n                        description: 'Use this to log out of the application.',\r\n                        component: <Logout />\r\n                    },\r\n                ]}\r\n        />\r\n    }\r\n\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}