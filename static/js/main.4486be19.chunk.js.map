{"version":3,"sources":["aws/aws-constants.ts","aws/db.ts","redux/actions.ts","aws/mturk.ts","components/db-status.tsx","components/project-iteration-selector.tsx","redux/reducers.ts","redux/store.ts","components/update-projects.tsx","components/table.tsx","aws/aws-service.ts","components/file-input.tsx","components/login.tsx","components/button-with-description.tsx","components/hit-generator.tsx","app/App.tsx","components/toggle.tsx","components/account-balances.tsx","components/submit-hits.tsx","components/cancel-hits.tsx","components/download-zip.tsx","components/pay-hits.tsx","components/hit-status.tsx","components/disqualify.tsx","components/tab.tsx","service-worker/serviceWorker.ts","index.tsx"],"names":["METHODS","Region","BaseURL","process","Types","table","PrimaryKey","name","prefix","metaDataKeyName","metaDataType","this","pk","parsePrefixRegEx","exec","data","toMetaData","key","parseDataRegEx","SortKey","metaDataKeyNames","metaDataTypes","prefixRegEx","test","Error","sk","values","slice","split","length","ret","forEach","value","index","push","obj","val","undefined","indexOf","AEntity","type","Str","Bool","trim","toLowerCase","Num","Number","Object","keys","primaryKey","getMetaDataKeyName","convert","toMetaDataFromData","getMetaDataType","sortKey","metaData","getMetaDataTypes","getMetaDataKeyNames","includes","DynamoDB","Converter","marshall","ClassTable","fetchClient","Name","PKName","SKName","addEntity","HIT","ProjectDescription","entity","delete","PKMeta","SKMeta","get","query","PK","sortKeyPrefix","map","item","wustlKey","sortKeyData","hitID","assignmentID","workerID","time","log","Log","Create","put","keyMidFix","filter","Key","pkName","skName","entities","Map","mapMap","primaryKeyPrefix","set","KeyType","AttributeName","AttributeType","url","request","fetch","json","method","GET","headers","fetchJSON","resp","TableNames","POST","body","JSON","stringify","TableName","getName","Item","toDBForm","deleted","console","puted","getKey","unmarshall","ctor","getEntityConstructor","getPrefixFromPK","getPrefixFromSK","DELETE","keyConditionExpression","expressionAttributeValues","KeyConditionExpression","ExpressionAttributeValues","ClassTableEntity","Task","tag","description","ProjectName","Tasks","parsedTags","construct","parse","task","tasks","toString","WUSTLKey","Iteration","HITName","Cnt","AWSIDs","projectName","iteration","hitName","cnt","awsIDs","PKD","HITID","AssignmentID","WorkerID","TimeOfSubmission","keyParts","taskName","logFileName","fileName","dummyPrimaryKey","EDBStatus","MTPool","accts","sandboxAccts","realAccts","accessID","accessSecret","addRealAccount","AWS","MTurk","region","endpoint","credentials","accessKeyId","secretAccessKey","addSandboxAccount","acct","sandbox","MTurkMode","SANDBOX","fun","Promise","resolve","reject","getAccountBalance","err","balance","AvailableBalance","setSandbox","forp","a","urls","urlsForStud","urlCountPair","count","setTimeout","createHIT","AssignmentDurationInSeconds","AutoApprovalDelayInSeconds","Description","LifetimeInSeconds","MaxAssignments","Reward","price","Title","Question","MTurkPool","HitConfig","error","code","message","promise","listHITs","hits","HITs","hit","updateExpirationForHIT","ExpireAt","Date","HITId","i","row","approveAssignment","AssignmentId","$response","rejectAssignment","RequesterFeedback","sendBonus","WorkerId","BonusAmount","Reason","UniqueRequestToken","Data","promises","entry","reduce","prev","cur","available","NumberOfAssignmentsAvailable","pending","NumberOfAssignmentsPending","completed","Math","max","HITStatus","sEntry","SubmitHITDataType","LoginStatus","header","find","every","queryTerm","expectedValue","login","loggedIn","SUCCEEDED","logout","FAILED","updateProjects","projects","sortedProjects","sort","b","currentProject","updateSPIData","spiData","updateStudents","students","stud","add","id","secret","updateMTurkMode","mturkMode","fetchSPIData","dispatch","e","fetchAccountBalances","getAccountBalances","all","balances","accountBalances","mapDispatchToProps","updateDBStatus","dbStatus","connector","connect","state","className","onClick","props","exists","Created","DoesNotExist","Unknown","renderCheck","status","React","Component","updateCurrentProject","updateCurrentIteration","currentIteration","iterations","onChange","ev","target","selectedIndex","project","selected","parseInt","num","ffor","defaultState","UNATTEMPTED","submitHITData","dataType","COUNT_NOT_GIVEN","store","createStore","action","reducerHelper","updates","assign","lin","lout","udbs","up","ui","ucp","uci","uspid","us","ub","ushd","umm","compose","applyMiddleware","thunk","UpdateProject","inputElem","createRef","tagInputElem","editing","event","stopPropagation","select","disabled","ref","setState","current","focus","update","FileDrop","onDrop","files","reader","FileReader","addEventListener","parsed","result","Array","isArray","context","question","alert","readAsText","newInput","projectSave","deleteEntity","newVal","callback","placeholder","newProjectName","csvp","require","updateSubmitHITData","Compiler","filterExpr","expr","tok","k","ind","tokens","conds","eq","input","amper","conditions","cond","evaluate","lex","instance","Table","fileInput","displayTable","compiler","setData","csv","hk","COUNT_GIVEN","accept","file","fr","onloadend","readyState","DONE","out","updateCSVData","htmlFor","dispData","execute","renderFileInput","setFilterExpression","DataTable","IdentityPoolId","config","CognitoIdentityCredentials","UploadStatus","userPool","CognitoUserPool","UserPoolId","ClientId","cognitoUser","getCurrentUser","awsFetchClient","createCredentials","Logins","getIdToken","getJwtToken","refreshCredentials","fail","refresh","AwsClient","sessionToken","expired","createTable","dbCreateTable","asyncStore","getProjectNames","nullifyAllServiceGlobals","clearIncorrectUserdata","awsLogin","username","password","CognitoUser","Username","Pool","authenticationDetails","AuthenticationDetails","Password","authenticateUser","onSuccess","onFailure","newPasswordRequired","userAttributes","requiredAttributes","completeNewPasswordChallenge","session","getSession","awsLogout","signOut","downloadAllFiles","Login","usernameField","passwordField","onSubmit","preventDefault","autoComplete","Logout","ButtonWithDescription","display","buttonClass","buttonTitle","Generated","fileUploaded","NO_UPLOAD","onFileChange","validateStudents","studData","SUCCESS","FAILURE","FileInput","NavLocation","rands","ri","floor","random","newSPIData","studSPI","pis","tags","threeRands","generated","LOADING","some","pi","GENERATED","NOT_GENERATED","generate","Toggle","active","toggles","toggle","text","mapDispatchToSandboxToggleProps","SandboxToggle","sandboxToggleConnector","REAL","aVal","parseFloat","bVal","pair","ready","activeTable","errors","projData","iterData","taskData","taskTag","hitData","wKey","countSoFar","studConfig","studProjConfig","studHitConfigData","buildURL","buildFromCountGiven","buildFromCountNotGiven","buildURLS","uploadHits","resetValues","re","findFirstEntry","toFixed","min","step","getDiffData","cancelHits","LoadingContainer","startsWith","color","loadingStatus","zipData","document","createElement","style","appendChild","href","s3Key","setAttribute","localFileName","click","window","URL","revokeObjectURL","removeChild","download","payHits","getStatuses","midfix","idSet","Set","getLogEntries","size","Tab","tabRef","tab","urlName","actions","findIndex","children","component","SemesterManagementTab","HitManagementTab","PostHitManagementTab","SessionManagementTab","uri","encodeURIComponent","remove","NavBar","rs","fill","currentActive","navLocation","SemesterManagement","oldActive","classList","onUpdateActive","startNavLocation","updateActive","str","charAt","toUpperCase","join","Footer","title","Tabs","HITManagement","PostHITManagement","SessionManagement","loc","location","hash","path","displayName","then","reason","catch","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.4486be19.chunk.js","sourcesContent":["export const Region = 'us-east-1';\r\nexport const BaseURL = process.env.REACT_APP_BASE_URL;\r\nexport const TableName = process.env.REACT_APP_TABLE_NAME;\r\n\r\nexport enum METHODS {\r\n    GET= 'GET',\r\n    POST = 'POST',\r\n    PUT = 'PUT',\r\n    DELETE = 'DELETE'\r\n}\r\n\r\nexport const AppJSONHeaders = () => {\r\n    return {\r\n        'Content-Type': 'application/json'\r\n    }\r\n}","import DynamoDB from \"aws-sdk/clients/dynamodb\";\r\nimport {AppJSONHeaders, BaseURL, METHODS, TableName} from \"./aws-constants\";\r\nimport {AwsClient} from \"aws4fetch\";\r\n//\r\n// {\r\n//     \"TableName\": \"CSE256-Data-Testing\",\r\n//     \"Key\": {\r\n//          \"PKMeta\": {\"S\": \"#CLASS:ProjectName\"},\r\n//          \"SKMeta\": {\"S\": \"#PROJECT_NAME:Cognitive Load\"}\r\n//     }\r\n// }\r\n//\r\n\r\nexport let table: ClassTable | null = null;\r\n\r\nexport const createTable = (awsFetchClient: AwsClient) => {\r\n    table = new ClassTable(awsFetchClient);\r\n}\r\n\r\nexport const getTable = () => {\r\n    return table;\r\n}\r\n\r\nenum Types {\r\n    Bool,\r\n    Num,\r\n    Str\r\n}\r\n\r\nclass PrimaryKey {\r\n\r\n    public static readonly parsePrefixRegEx = /^#([a-zA-Z0-9_.]+):/;\r\n    public static readonly parseDataRegEx = /^#[a-zA-Z0-9_.]+:([a-zA-Z0-9_.]+)/;\r\n\r\n    public static getPrefixFromPK(pk: string): string {\r\n        return (PrimaryKey.parsePrefixRegEx.exec(pk) as RegExpExecArray)[1];\r\n    }\r\n\r\n    private readonly name: string;\r\n    private readonly prefix: string;\r\n    private readonly metaDataKeyName: string;\r\n    private readonly metaDataType: Types;\r\n\r\n    constructor(name: string, prefix: string, metaDataKeyName: string, metaDataType: Types) {\r\n        this.name = name;\r\n        this.prefix = prefix;\r\n        this.metaDataKeyName = metaDataKeyName;\r\n        this.metaDataType = metaDataType;\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getMetaDataKeyName(): string {\r\n        return this.metaDataKeyName;\r\n    }\r\n\r\n    getMetaDataType(): Types {\r\n        return this.metaDataType;\r\n    }\r\n\r\n    toMetaDataFromData(data: DynamoDB.DocumentClient.AttributeMap): string {\r\n        return this.toMetaData(data[this.name]);\r\n    }\r\n\r\n    toMetaData(key: string) {\r\n        return (PrimaryKey.parseDataRegEx.exec(key) as RegExpExecArray)[1];\r\n    }\r\n\r\n    toString(data: string) {\r\n        return `#${this.prefix}:${data}`;\r\n    }\r\n\r\n}\r\n\r\ntype SKMetaData = {\r\n    key: string,\r\n    value: string\r\n}[];\r\n\r\nclass SortKey {\r\n\r\n    public static readonly prefixRegEx = /([a-zA-Z0-9_.]+)/;\r\n    public static readonly parsePrefixRegEx = /^#([a-zA-Z0-9_.]+):/;\r\n\r\n    public static getPrefixFromSK(sk: string): string {\r\n        return (SortKey.parsePrefixRegEx.exec(sk) as RegExpExecArray)[1];\r\n    }\r\n\r\n    private readonly name: string;\r\n    private readonly prefix: string;\r\n    private readonly metaDataKeyNames: string[];\r\n    private readonly metaDataTypes: Types[];\r\n\r\n    constructor(name: string, prefix: string, metaDataKeyNames: string[], metaDataTypes: Types[]) {\r\n        if (!SortKey.prefixRegEx.test(prefix)) {\r\n            throw new Error('Prefix is only allowed to take format: /([a-zA-Z0-9_.]+)/.');\r\n        }\r\n        this.name = name;\r\n        this.prefix = prefix;\r\n        this.metaDataKeyNames = metaDataKeyNames;\r\n        this.metaDataTypes = metaDataTypes;\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getMetaDataKeyNames(): string[] {\r\n        return this.metaDataKeyNames;\r\n    }\r\n\r\n    getMetaDataTypes(): Types[] {\r\n        return this.metaDataTypes;\r\n    }\r\n\r\n    toMetaDataFromData(data: DynamoDB.DocumentClient.AttributeMap) {\r\n        return this.toMetaData(data[this.name]);\r\n    }\r\n\r\n    toMetaData(key: string): SKMetaData {\r\n        if (key[0] === '#') {\r\n            key = key.slice(1); // Slice pound off of front of string\r\n            const values = key.split(':');\r\n            if ((values.length - 1) === this.metaDataKeyNames.length) {\r\n                const ret: SKMetaData = [];\r\n                values.forEach((value, index) => {\r\n                   if (index > 0) { // Skip prefix string\r\n                       ret.push({\r\n                           key: this.metaDataKeyNames[index - 1],\r\n                           value: value\r\n                       });\r\n                   }\r\n                });\r\n                return ret;\r\n            }\r\n            throw new Error(`Provided key does not have the expected number of values.`)\r\n        }\r\n        throw new Error(`Provided key does not follow expected pattern. Missing '#' at front of string.`)\r\n    }\r\n\r\n    toString(obj: any) {\r\n        let ret = `#${this.prefix}`;\r\n        this.metaDataKeyNames.forEach(key => {\r\n            const val = '' + obj[key];\r\n            if (val === undefined || val === null) {\r\n                throw new Error(`Provided object must have a non-null value for every key in sort key metaData. This object was missing at least this key: ${key}.`);\r\n            }\r\n            if (val.indexOf(':') !== -1 || val.indexOf('#') !== -1) {\r\n                throw new Error('Sort Key meta data cannot include # or : in it. This will ruin the invariant that allows the parser to work.')\r\n            }\r\n            ret += `:${val}`;\r\n        });\r\n        return ret;\r\n    }\r\n}\r\n\r\ninterface EntityConstructor {\r\n    new (data: DynamoDB.DocumentClient.AttributeMap): IEntity;\r\n    readonly sortKeyPrefix: string;\r\n    readonly primaryKeyPrefix: string;\r\n}\r\n\r\ninterface IEntity {\r\n    primaryKey(): PrimaryKey;\r\n    sortKey(): SortKey;\r\n    toDBForm(): DynamoDB.DocumentClient.PutItemInputAttributeMap;\r\n}\r\n\r\nabstract class AEntity implements IEntity {\r\n\r\n    protected constructor() {}\r\n\r\n    convert(data: string, type: Types) {\r\n        switch (type) {\r\n            case Types.Str:\r\n                return data;\r\n            case Types.Bool:\r\n                return data.trim().toLowerCase() === 'true';\r\n            case Types.Num:\r\n                return Number(data);\r\n        }\r\n    }\r\n\r\n    construct(data: DynamoDB.DocumentClient.AttributeMap) {\r\n        Object.keys(data).forEach(key => {\r\n            (this as any)[key] = data[key];\r\n        });\r\n        (this as any)[this.primaryKey().getMetaDataKeyName()] = this.convert(this.primaryKey().toMetaDataFromData(data), this.primaryKey().getMetaDataType());\r\n        this.sortKey()\r\n            .toMetaDataFromData(data)\r\n            .forEach((metaData, index) => {\r\n                (this as any)[metaData.key] = this.convert(metaData.value, this.sortKey().getMetaDataTypes()[index]);\r\n            });\r\n    }\r\n\r\n    toDBForm(): DynamoDB.DocumentClient.PutItemInputAttributeMap {\r\n        const ret = {};\r\n        Object.keys(this).forEach(key => {\r\n            if ((!this.sortKey().getMetaDataKeyNames().includes(key)) && (this.primaryKey().getMetaDataKeyName() !== key)) {\r\n                (ret as any)[key] = (this as any)[key];\r\n            }\r\n        });\r\n        return DynamoDB.Converter.marshall(ret);\r\n    }\r\n\r\n    abstract primaryKey(): PrimaryKey;\r\n\r\n    abstract sortKey(): SortKey;\r\n\r\n}\r\n\r\nclass Table {\r\n\r\n    private readonly fetchClient: AwsClient;\r\n    private readonly name: string;\r\n    private readonly pkName: string;\r\n    private readonly skName: string;\r\n    private readonly entities: Map<string, Map<string, EntityConstructor>>;\r\n\r\n    constructor(fetchClient: AwsClient, name: string, pkName: string, skName: string) {\r\n        this.fetchClient = fetchClient;\r\n        this.name = name;\r\n        this.pkName = pkName;\r\n        this.skName = skName;\r\n        this.entities = new Map<string, Map<string, EntityConstructor>>();\r\n    }\r\n\r\n    //// Misc. helpers\r\n\r\n    addEntity(entity: EntityConstructor): Table {\r\n        let mapMap = this.entities.get(entity.primaryKeyPrefix);\r\n        if (mapMap === undefined || mapMap === null) {\r\n            mapMap = new Map<string, EntityConstructor>();\r\n            this.entities.set(entity.primaryKeyPrefix, mapMap);\r\n        }\r\n        mapMap.set(entity.sortKeyPrefix, entity);\r\n        return this;\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getEntityConstructor(primaryKeyPrefix: string, sortKeyPrefix: string) {\r\n        return this.entities.get(primaryKeyPrefix)?.get(sortKeyPrefix);\r\n    }\r\n\r\n    getKeySchema() {\r\n        return [\r\n            {\r\n                KeyType: 'HASH',\r\n                AttributeName: this.pkName\r\n            },\r\n            {\r\n                KeyType: 'RANGE',\r\n                AttributeName: this.skName\r\n            }\r\n        ];\r\n    }\r\n\r\n    getAttributeDefinitions() {\r\n        return [\r\n            {\r\n                AttributeName: this.pkName,\r\n                AttributeType: 'S'\r\n            },\r\n            {\r\n                AttributeName: this.skName,\r\n                AttributeType: 'S'\r\n            }\r\n        ];\r\n    }\r\n\r\n    getKey(pk: string, sk: string) {\r\n        const key: any = {};\r\n        key[this.pkName] = pk;\r\n        key[this.skName] = sk;\r\n        return key;\r\n    }\r\n\r\n    async fetchJSON(url: string, request: RequestInit) {\r\n        return (await this.fetchClient.fetch(url, request)).json();\r\n    }\r\n\r\n    //// Table operations:\r\n\r\n    // create(throughput: DynamoDB.ProvisionedThroughput) {\r\n    //     return this.dbClient.createTable({\r\n    //         TableName: this.name,\r\n    //         KeySchema: this.getKeySchema(),\r\n    //         AttributeDefinitions: this.getAttributeDefinitions(),\r\n    //         ProvisionedThroughput: throughput\r\n    //     }).promise();\r\n    // }\r\n\r\n    // delete() {\r\n    //     return this.dbClient.deleteTable({\r\n    //         TableName: this.name\r\n    //     }).promise();\r\n    // }\r\n\r\n    // describe() {\r\n    //     return this.dbClient.describeTable({\r\n    //         TableName: this.name\r\n    //     }).promise();\r\n    // }\r\n\r\n    async exists() {\r\n        const path = '/db/tables';\r\n        const url = BaseURL + path;\r\n        let request = {\r\n            method: METHODS.GET,\r\n            headers: AppJSONHeaders(),\r\n        } as any;\r\n        const resp = await this.fetchJSON(url, request);\r\n        return (resp.TableNames as string[]).indexOf(TableName as string) !== -1;\r\n    }\r\n\r\n    //// Item operations:\r\n\r\n    async put(item: IEntity) {\r\n        const path = '/db/table';\r\n        const url = BaseURL + path;\r\n        let request = {\r\n            method: METHODS.POST,\r\n            headers: AppJSONHeaders(),\r\n            body: JSON.stringify({\r\n                TableName: this.getName(),\r\n                Item: item.toDBForm()\r\n            })\r\n        };\r\n        return this.fetchJSON(url, request);\r\n    }\r\n\r\n    async update(pk: string, sk: string, entity: IEntity) {\r\n        const deleted = await this.delete(pk, sk);\r\n        console.log(deleted);\r\n        const puted = await this.put(entity);\r\n        console.log(puted);\r\n    }\r\n\r\n    async get(pk: string, sk: string) {\r\n        const path = '/db/table/get-item';\r\n        const url = BaseURL + path;\r\n        const key = this.getKey(pk, sk);\r\n        const request = {\r\n            method: METHODS.POST,\r\n            headers: AppJSONHeaders(),\r\n            body: JSON.stringify({\r\n                TableName: this.getName(),\r\n                Key: DynamoDB.Converter.marshall(key)\r\n            })\r\n        };\r\n        const item = DynamoDB.Converter.unmarshall((await this.fetchJSON(url, request))['Item']);\r\n        if (item === undefined) {\r\n            return item;\r\n        }\r\n        const ctor = this.getEntityConstructor(PrimaryKey.getPrefixFromPK(item[this.pkName]), SortKey.getPrefixFromSK(item[this.skName]));\r\n        return new (ctor as any)(item);\r\n    }\r\n\r\n    async delete(pk: string, sk: string) {\r\n        const path = '/db/table';\r\n        const url = BaseURL + path;\r\n        const key = this.getKey(pk, sk);\r\n        const request = {\r\n            method: METHODS.DELETE,\r\n            headers: AppJSONHeaders(),\r\n            body: JSON.stringify({\r\n                TableName: this.getName(),\r\n                Key: DynamoDB.Converter.marshall(key)\r\n            })\r\n        };\r\n        console.log(await this.fetchJSON(url, request));\r\n        // const item = DynamoDB.Converter.unmarshall((await this.fetchJSON(url, request))['Item']);\r\n    }\r\n\r\n    async query(keyConditionExpression: string, expressionAttributeValues: {[key: string]: any}): Promise<{[p: string]: any}[]> {\r\n        const path = '/db/table/query';\r\n        const url = BaseURL + path;\r\n        let request = {\r\n            method: METHODS.POST,\r\n            headers: AppJSONHeaders(),\r\n            body: JSON.stringify({\r\n                TableName: this.getName(),\r\n                KeyConditionExpression: keyConditionExpression,\r\n                ExpressionAttributeValues: DynamoDB.Converter.marshall(expressionAttributeValues)\r\n            })\r\n        };\r\n        return (await this.fetchJSON(url, request))['Items'].map((item: DynamoDB.AttributeMap) => DynamoDB.Converter.unmarshall(item));\r\n    }\r\n\r\n}\r\n\r\nexport class ClassTable extends Table {\r\n\r\n    public static readonly Name = TableName as string;\r\n    public static readonly PKName = 'PKMeta';\r\n    public static readonly SKName = 'SKMeta';\r\n\r\n    constructor(fetchClient: AwsClient) {\r\n        super(fetchClient, ClassTable.Name, ClassTable.PKName, ClassTable.SKName);\r\n        this.addEntity(HIT)\r\n            .addEntity(ProjectDescription);\r\n        // this.getProjectNames().then(console.log).catch(console.log)\r\n    }\r\n\r\n    async deleteEntity(entity: ClassTableEntity) {\r\n        return this.delete(entity.PKMeta, entity.SKMeta);\r\n    }\r\n\r\n    async getEntity(entity: ClassTableEntity) {\r\n        return this.get(entity.PKMeta, entity.SKMeta);\r\n    }\r\n\r\n    async getProjectNames() {\r\n        return (await this.query(\r\n            'PKMeta = :pk AND begins_with(SKMeta, :skp)',\r\n            {\r\n                ':pk': ProjectDescription.PK,\r\n                ':skp': '#' + ProjectDescription.sortKeyPrefix\r\n            }))\r\n            .map(item => new ProjectDescription(item));\r\n    }\r\n\r\n    async incrementHITCount(wustlKey: string, sortKeyData: HITSortKeyData) {\r\n        // const key = this.getKey(wustlKey, HIT.sortKey.toString(sortKeyData));\r\n        // const ret = await this.docClient.update({\r\n        //     TableName: this.getName(),\r\n        //     Key: key,\r\n        //     ExpressionAttributeValues: {':c': 1},\r\n        //     UpdateExpression: 'ADD Cnt :c',\r\n        //     ReturnValues: 'ALL_OLD'\r\n        // }).promise();\r\n        // return (this.getEntityConstructor(HIT.sortKeyPrefix))(ret.)\r\n        // return ret;\r\n    }\r\n\r\n    async createLogEntry(hitID: string, assignmentID: string, workerID: string, key: string, time: string) {\r\n        const log = Log.Create(hitID, assignmentID, workerID, key, time);\r\n        const resp = await this.put(log);\r\n        return log;\r\n    }\r\n\r\n    async getLogEntries(keyMidFix: string) {\r\n        return (await this.query(\r\n            'PKMeta = :pk',\r\n            {\r\n                ':pk': '#STUDENT:D'\r\n            },\r\n        )).\r\n        map(item => new Log(item)).\r\n        filter(log => log.Key.includes(keyMidFix)).\r\n        filter(log => !log.Key.includes('riley.mccuen.t'));\r\n    }\r\n\r\n}\r\n\r\ntype HITSortKeyData = {\r\n    ProjectName: string,\r\n    Iteration: number,\r\n    HITName: string\r\n}\r\n\r\nabstract class ClassTableEntity extends AEntity {\r\n    // @ts-ignore\r\n    PKMeta: string;      // Partition Key\r\n    // @ts-ignore\r\n    SKMeta: string;      // Sort Key\r\n\r\n}\r\n\r\nexport class Task {\r\n    tag: string;\r\n    description: string;\r\n\r\n    constructor(tag: string, description: string) {\r\n        this.tag = tag;\r\n        this.description = description;\r\n    }\r\n}\r\n\r\nexport class ProjectDescription extends ClassTableEntity {\r\n\r\n    static ProjectName = 'ProjectName';\r\n    static primaryKeyPrefix = 'CLASS';\r\n    static sortKeyPrefix = 'PROJECT_NAME';\r\n    static PK = '#' + ProjectDescription.primaryKeyPrefix + ':' + ProjectDescription.ProjectName;\r\n    public static readonly primaryKey = new PrimaryKey(ClassTable.PKName, ProjectDescription.primaryKeyPrefix, ProjectDescription.ProjectName, Types.Str);\r\n    public static readonly sortKey = new SortKey(ClassTable.SKName, ProjectDescription.sortKeyPrefix, ['Name'], [Types.Str]);\r\n\r\n    // @ts-ignore\r\n    ProjectName: string;\r\n    // @ts-ignore\r\n    Name: string;\r\n    // @ts-ignore\r\n    Tasks: string;\r\n    parsedTags: Task[];\r\n\r\n    constructor(data: DynamoDB.DocumentClient.AttributeMap) {\r\n        data['ProjectName'] = ProjectDescription.ProjectName;\r\n        super();\r\n        this.construct(data);\r\n        // @ts-ignore\r\n        if (this.Tasks === undefined) {\r\n            this.parsedTags = [];\r\n        } else {\r\n            this.parsedTags = JSON.parse(this.Tasks).map((task: any) => new Task(task.tag, task.description));\r\n        }\r\n    }\r\n\r\n    primaryKey(): PrimaryKey {\r\n        return ProjectDescription.primaryKey;\r\n    }\r\n\r\n    sortKey(): SortKey {\r\n        return ProjectDescription.sortKey;\r\n    }\r\n\r\n    get sortKeyPrefix(): string {\r\n        return ProjectDescription.sortKeyPrefix;\r\n    }\r\n\r\n    public static Create(name: string, tasks: string) {\r\n        if (tasks === '') {\r\n            tasks = '[]';\r\n        }\r\n        return new ProjectDescription({\r\n            PKMeta: ProjectDescription.PK,\r\n            SKMeta: this.sortKey.toString({Name: name}),\r\n            Tasks: tasks\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport class HIT extends ClassTableEntity {\r\n\r\n    static primaryKeyPrefix = 'STUDENT';\r\n    static sortKeyPrefix = 'HIT';\r\n    public static readonly primaryKey = new PrimaryKey(ClassTable.PKName, HIT.primaryKeyPrefix, 'WUSTLKey', Types.Str);\r\n    public static readonly sortKey = new SortKey(ClassTable.SKName, HIT.sortKeyPrefix, ['ProjectName', 'Iteration', 'HITName'], [Types.Str, Types.Num, Types.Str]);\r\n\r\n    // @ts-ignore\r\n    WUSTLKey: string;    // WUSTLKey\r\n    // @ts-ignore\r\n    ProjectName: string; // ProjectName\r\n    // @ts-ignore\r\n    Iteration: number;   // Iteration\r\n    // @ts-ignore\r\n    HITName: string;     // HITName\r\n    // @ts-ignore\r\n    Cnt: number;         // Cnt (short for Count or Counter which are both reserved keywords)\r\n    // @ts-ignore\r\n    AWSIDs: string[];    // AWSIDs\r\n\r\n    constructor(data: DynamoDB.DocumentClient.AttributeMap) {\r\n        super();\r\n        this.construct(data);\r\n    }\r\n\r\n    primaryKey(): PrimaryKey {\r\n        return HIT.primaryKey;\r\n    }\r\n\r\n    sortKey(): SortKey {\r\n        return HIT.sortKey;\r\n    }\r\n\r\n    get sortKeyPrefix(): string {\r\n        return HIT.sortKeyPrefix;\r\n    }\r\n\r\n    public static Create(wustlKey: string, projectName: string, iteration: number, hitName: string, cnt: number, awsIDs: string[]) {\r\n        return new HIT({\r\n            PKMeta: this.primaryKey.toString(wustlKey),\r\n            SKMeta: this.sortKey.toString({ProjectName: projectName, Iteration: iteration, HITName: hitName}),\r\n            Cnt: cnt,\r\n            AWSIDs: awsIDs\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport class Log extends ClassTableEntity {\r\n\r\n    static primaryKeyPrefix = 'STUDENT';\r\n    static sortKeyPrefix = 'LOG';\r\n    static dummyPrimaryKey = 'D';\r\n    public static readonly  primaryKey = new PrimaryKey(ClassTable.PKName, Log.primaryKeyPrefix, 'PKD', Types.Str);\r\n    public static readonly sortKey = new SortKey(ClassTable.SKName, Log.sortKeyPrefix, ['HITID', 'AssignmentID', 'WorkerID'], [Types.Str, Types.Str, Types.Str]);\r\n\r\n    // @ts-ignore\r\n    PKD: string; // Dummy placeholder key\r\n    // @ts-ignore\r\n    HITID: string;\r\n    // @ts-ignore\r\n    AssignmentID: string;\r\n    // @ts-ignore\r\n    WorkerID: string;\r\n    // @ts-ignore\r\n    Key: string;\r\n    // @ts-ignore\r\n    TimeOfSubmission: string;\r\n\r\n    constructor(data: DynamoDB.DocumentClient.AttributeMap) {\r\n        super();\r\n        this.construct(data);\r\n    }\r\n\r\n    primaryKey(): PrimaryKey {\r\n        return Log.primaryKey;\r\n    }\r\n\r\n    sortKey(): SortKey {\r\n        return Log.sortKey;\r\n    }\r\n\r\n    get sortKeyPrefix(): string {\r\n        return Log.sortKeyPrefix;\r\n    }\r\n\r\n    keyFileNamePair(): {\r\n        key: string;\r\n        fileName: string;\r\n    } {\r\n        const keyParts = this.Key.split('/');\r\n        if (keyParts.length === 5) {\r\n            const wustlKey = keyParts[0];\r\n            const taskName = keyParts[3];\r\n            const logFileName = keyParts[4];\r\n            return {\r\n                key: this.Key,\r\n                fileName: wustlKey + '_' + taskName + '_' + logFileName,\r\n            };\r\n        }\r\n        return {\r\n            key: this.Key,\r\n            fileName: this.Key,\r\n        }\r\n    }\r\n\r\n    public static Create(hitID: string, assignmentID: string, workerID: string, key: string, time: string) {\r\n        return new Log({\r\n            PKMeta: this.primaryKey.toString(Log.dummyPrimaryKey),\r\n            SKMeta: this.sortKey.toString({HITID: hitID, AssignmentID: assignmentID, WorkerID: workerID}),\r\n            Key: key,\r\n            TimeOfSubmission: time,\r\n        });\r\n    }\r\n\r\n}","import {table, ClassTable, ProjectDescription, Task} from \"../aws/db\";\r\nimport MTPool, {TAccountBalances} from \"../aws/mturk\";\r\nimport {store} from \"./store\";\r\nimport {Parser} from \"papaparse\";\r\n\r\nexport enum EDBStatus {\r\n    Unknown,\r\n    Created,\r\n    DoesNotExist,\r\n}\r\n\r\n// action types\r\nexport const LOGIN = 'LOGIN';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const UPDATE_DB_STATUS = 'UPDATE_DB_STATUS';\r\nexport const UPDATE_PROJECTS = 'UPDATE_PROJECTS';\r\nexport const UPDATE_ITERATIONS = 'UPDATE_ITERATIONS';\r\nexport const UPDATE_CURRENT_PROJECT = 'UPDATE_CURRENT_PROJECT';\r\nexport const UPDATE_CURRENT_ITERATION = 'UPDATE_CURRENT_ITERATION';\r\nexport const UPDATE_SPI_DATA = 'UPDATE_SPI_DATA';\r\nexport const UPDATE_STUDENTS = 'UPDATE_STUDENTS';\r\nexport const UPDATE_BALANCES = 'UPDATE_BALANCES';\r\nexport const UPDATE_SUBMIT_HIT_DATA = 'UPDATE_SUBMIT_HIT_DATA';\r\nexport const UPDATE_MTURK_MODE = 'UPDATE_MTURK_MODE';\r\n\r\nexport enum SubmitHITDataType {\r\n    COUNT_GIVEN,\r\n    COUNT_NOT_GIVEN,\r\n}\r\n\r\nexport class Data {\r\n    header: string[];\r\n    values: string[][];\r\n\r\n    constructor(header: string[], values: string[][]) {\r\n        this.header = header;\r\n        this.values = values;\r\n    }\r\n\r\n    indexOfHeader(key: string) {\r\n        return this.header.indexOf(key);\r\n    }\r\n\r\n    findFirstEntry(query: {index: number, expectedValue: string}[]) {\r\n        const ret = this.values.find(row => {\r\n            return query.every(queryTerm => {\r\n                if (row[queryTerm.index] === queryTerm.expectedValue) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    resetValues() {\r\n        this.values = [];\r\n        return this;\r\n    }\r\n}\r\n\r\nexport interface SubmitHITData {\r\n    dataType: SubmitHITDataType,\r\n    data: Data,\r\n}\r\n\r\nexport interface StudentProjectIterationTask {\r\n    name: string;\r\n    count: number;\r\n}\r\n\r\nexport interface StudentProjectIteration {\r\n    tasks: StudentProjectIterationTask[];\r\n}\r\n\r\nexport interface SPIData {\r\n    [wustlKey: string]: {\r\n        [projectName: string]: StudentProjectIteration[]\r\n    };\r\n}\r\n\r\nexport interface Student {\r\n    url: string;\r\n    wustlKey: string;\r\n    id: string;\r\n    secret: string;\r\n}\r\n\r\nexport enum LoginStatus {\r\n    UNATTEMPTED,\r\n    FAILED,\r\n    SUCCEEDED\r\n}\r\n\r\nexport interface Tasks {\r\n    [projectName: string]: Task[]\r\n}\r\n\r\nexport enum MTurkMode {\r\n    SANDBOX,\r\n    REAL\r\n}\r\n\r\nexport interface RootState {\r\n    loggedIn: LoginStatus;\r\n    dbStatus: EDBStatus;\r\n    projects: ProjectDescription[];\r\n    iterations: number;\r\n    currentProject: ProjectDescription;\r\n    currentIteration: number;\r\n    spiData: null | SPIData;\r\n    students: Student[];\r\n    accountBalances: TAccountBalances;\r\n    submitHITData: SubmitHITData,\r\n    mturkMode: MTurkMode;\r\n}\r\n\r\nexport const login = () => {\r\n    return {\r\n        type: LOGIN,\r\n        loggedIn: LoginStatus.SUCCEEDED\r\n    };\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: LOGOUT,\r\n        loggedIn: LoginStatus.FAILED\r\n    };\r\n}\r\n\r\nexport const updateDBStatus = (dbStatus: EDBStatus) => {\r\n    return {\r\n        type: UPDATE_DB_STATUS,\r\n        dbStatus\r\n    };\r\n}\r\n\r\nexport const updateProjects = (projects: ProjectDescription[]) => {\r\n    const sortedProjects = projects.sort((a, b) => a.Name < b.Name ? -1 : 1);\r\n    return {\r\n        type: UPDATE_PROJECTS,\r\n        projects: sortedProjects,\r\n        currentProject: sortedProjects[0] ? sortedProjects[0] : ProjectDescription.Create('No Projects Yet', '')\r\n    }\r\n}\r\n\r\nexport const updateIterations = (iterations: number) => {\r\n    return {\r\n        type: UPDATE_ITERATIONS,\r\n        iterations,\r\n        iteration: 0\r\n    }\r\n}\r\n\r\nexport const updateCurrentProject = (currentProject: ProjectDescription) => {\r\n    return {\r\n        type: UPDATE_CURRENT_PROJECT,\r\n        currentProject\r\n    };\r\n}\r\n\r\nexport const updateCurrentIteration = (currentIteration: number) => {\r\n    return {\r\n        type: UPDATE_CURRENT_ITERATION,\r\n        currentIteration\r\n    };\r\n}\r\n\r\nexport const updateSPIData = (spiData: SPIData) => {\r\n    return {\r\n        type: UPDATE_SPI_DATA,\r\n        spiData\r\n    }\r\n}\r\n\r\nexport const updateStudents = (students: Student[]) => {\r\n    students.forEach(stud => {\r\n        MTPool.add(stud.wustlKey, stud.id, stud.secret);\r\n    });\r\n    return {\r\n        type: UPDATE_STUDENTS,\r\n        students\r\n    }\r\n}\r\n\r\nexport const updateBalances = (accountBalances: TAccountBalances) => {\r\n    return {\r\n        type: UPDATE_BALANCES,\r\n        accountBalances\r\n    };\r\n}\r\n\r\nexport const updateSubmitHITData = (submitHITData: SubmitHITData) => {\r\n    return {\r\n        type: UPDATE_SUBMIT_HIT_DATA,\r\n        submitHITData\r\n    }\r\n}\r\n\r\nexport const updateMTurkMode = (mturkMode: MTurkMode) => {\r\n    return {\r\n        type: UPDATE_MTURK_MODE,\r\n        mturkMode\r\n    }\r\n}\r\n\r\nexport const fetchProjects = () => {\r\n    return async (dispatch: any) => {\r\n        try {\r\n            const projects = (await (table as ClassTable).getProjectNames());\r\n            console.log(projects)\r\n            dispatch(updateProjects(projects));\r\n        } catch (e) {console.log(e);}\r\n    }\r\n}\r\n\r\nexport const fetchSPIData = () => {\r\n    return async (dispatch: any) => {\r\n        try {\r\n            dispatch(updateSPIData({}));\r\n        } catch (e) {console.log(e);}\r\n    }\r\n}\r\n\r\nexport const fetchAccountBalances = (sandbox: MTurkMode) => {\r\n    return async(dispatch: any) => {\r\n        try {\r\n            const balances = await Promise.all(await MTPool.getAccountBalances(sandbox));\r\n            console.log(balances)\r\n            dispatch(updateBalances(balances));\r\n        } catch (e) {console.log(e);}\r\n    }\r\n}\r\n","import AWS, {AWSError} from 'aws-sdk';\r\nimport {GetAccountBalanceResponse} from \"aws-sdk/clients/mturk\";\r\nimport {Region} from \"./aws-constants\";\r\nimport {Data, MTurkMode} from \"../redux/actions\";\r\n\r\ntype MTurkAccounts = { [wustlKey: string]: AWS.MTurk };\r\nexport type AccountPair = {wustlKey: string, balance: string};\r\nexport type TAccountBalances = AccountPair[];\r\n\r\ntype AWSTableError = {\r\n    wustlKey: string,\r\n    error: string,\r\n    code: string,\r\n    message: string,\r\n};\r\nclass MTurkPool {\r\n    private accts: MTurkAccounts = {};\r\n    private sandboxAccts: MTurkAccounts = {};\r\n    private realAccts: MTurkAccounts = {};\r\n    private static HitConfig(url: string): string {\r\n        return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n                    <ExternalQuestion xmlns=\"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd\">\r\n                        <ExternalURL>${url}</ExternalURL>\r\n                        <FrameHeight>0</FrameHeight>\r\n                    </ExternalQuestion>`;\r\n    }\r\n\r\n    add(wustlKey: string, accessID: string, accessSecret: string) {\r\n        this.addRealAccount(wustlKey, new AWS.MTurk({\r\n            region: Region,\r\n            endpoint: 'https://mturk-requester.us-east-1.amazonaws.com',\r\n            credentials: {\r\n                accessKeyId: accessID,\r\n                secretAccessKey: accessSecret\r\n            }\r\n        }));\r\n        this.addSandboxAccount(wustlKey, new AWS.MTurk({\r\n            region: Region,\r\n            endpoint: 'https://mturk-requester-sandbox.us-east-1.amazonaws.com',\r\n            credentials: {\r\n                accessKeyId: accessID,\r\n                secretAccessKey: accessSecret\r\n            }\r\n        }));\r\n    }\r\n\r\n    addRealAccount(wustlKey: string, acct: AWS.MTurk) {\r\n        this.realAccts[wustlKey] = acct;\r\n    }\r\n\r\n    addSandboxAccount(wustlKey: string, acct: AWS.MTurk) {\r\n        this.sandboxAccts[wustlKey] = acct;\r\n    }\r\n\r\n    private setSandbox(sandbox: MTurkMode) {\r\n        if (sandbox === MTurkMode.SANDBOX) {\r\n            this.accts = this.sandboxAccts;\r\n        } else {\r\n            this.accts = this.realAccts;\r\n        }\r\n    }\r\n\r\n    private forp<E>(fun: (wustlKey: string, acct: AWS.MTurk) => E): E[] {\r\n        return Object.keys(this.accts).map(key => {\r\n            return fun(key, this.accts[key]);\r\n        });\r\n    }\r\n\r\n    async getAccountBalance(wustlKey: string, acct: AWS.MTurk) {\r\n        return new Promise<AccountPair>((resolve, reject) => {\r\n            acct.getAccountBalance((err: AWSError, data: GetAccountBalanceResponse) => {\r\n                if (err) {\r\n                    resolve({wustlKey: wustlKey, balance: \"Not Available.\"});\r\n                } else {\r\n                    resolve({wustlKey: wustlKey, balance: data.AvailableBalance ? data.AvailableBalance : \"Not Available.\"});\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    async getAccountBalances(sandbox: MTurkMode) {\r\n        this.setSandbox(sandbox);\r\n        return this.forp(async (wustlKey, acct) => {\r\n            return this.getAccountBalance(wustlKey, acct);\r\n        });\r\n    }\r\n\r\n    async uploadHit() {\r\n\r\n    }\r\n\r\n    async uploadHits(urls: {[wustlKey: string]: {count: number, url: string, price: string}[]}, sandbox: MTurkMode) {\r\n        this.setSandbox(sandbox);\r\n        return this.forp(async (wustlKey, acct) => {\r\n            return new Promise<AccountPair | AWSTableError>((resolve, reject) => {\r\n                const urlsForStud = urls[wustlKey];\r\n                if (urlsForStud) {\r\n                    urlsForStud.forEach(async urlCountPair => {\r\n                        // console.log(wustlKey + ' ' + urlCountPair.url + ' ' + urlCountPair.count);\r\n                        if (urlCountPair.count > 0) {\r\n                            setTimeout(async () => {\r\n                                acct.createHIT({ // TODO: fix this to be generalizable config\r\n                                        AssignmentDurationInSeconds: 360,\r\n                                        AutoApprovalDelayInSeconds: 2592000,\r\n                                        Description: 'You will be given a scenario for a website user. Please navigate through the website to find the answer - your path is tracked as you work. When you are on the page with the answer, fill out the text box in the drop down at the top of the page and click submit. Correct answers will receive bonuses of up to $.25.',\r\n                                        LifetimeInSeconds: (60 * 60 * 20), // 20 hours\r\n                                        MaxAssignments: urlCountPair.count,\r\n                                        Reward: urlCountPair.price,\r\n                                        Title: \"Information Foraging WUSTL\",\r\n                                        Question: MTurkPool.HitConfig(urlCountPair.url)\r\n                                    },\r\n                                    async (err, data) => {\r\n                                        if (err) {\r\n                                            console.log(\"ERROR: \" + err);\r\n                                            resolve({\r\n                                                wustlKey: wustlKey,\r\n                                                error: err.name,\r\n                                                code: err.code,\r\n                                                message: err.message\r\n                                            });\r\n                                        } else {\r\n                                            console.log(\"DATA: \" + data);\r\n                                            resolve({\r\n                                                wustlKey: wustlKey,\r\n                                                balance: (await acct.getAccountBalance().promise()).AvailableBalance as string,\r\n                                            });\r\n                                        }\r\n                                    });\r\n                            },100);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    async cancelHits() {\r\n        return this.forp(async (wustlKey, acct) => {\r\n            return new Promise<AccountPair>(async (resolve, reject) => {\r\n                const hits = await acct.listHITs().promise();\r\n                hits.HITs?.forEach(hit => {\r\n                    setTimeout(() => {\r\n                        acct.updateExpirationForHIT({\r\n                            ExpireAt: new Date(),\r\n                            HITId: hit.HITId as string\r\n                        }, (err, data) => {\r\n                            if (err) {\r\n                                console.log(\"ERROR: \" + err);\r\n                            } else {\r\n                                console.log(\"DATA: \" + data);\r\n                            }\r\n                        });\r\n                    },100);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    async payHits(data: Data) {\r\n        for (let i = 0; i < data.values.length; i++) {\r\n            const row = data.values[i];\r\n            const acct = this.accts[row[0]];\r\n            let resp;\r\n            try {\r\n                if (acct != undefined) {\r\n                    switch (row[3]) {\r\n                        case 'approve':\r\n                            resp = await acct.approveAssignment({\r\n                                AssignmentId: row[2],\r\n                            }).promise();\r\n                            console.log(resp.$response);\r\n                            break;\r\n                        case 'reject':\r\n                            resp = await acct.rejectAssignment({\r\n                                AssignmentId: row[2],\r\n                                RequesterFeedback: 'The log of your actions on the website and the written response did not show substantial effort in completing this task and therefore do not warrant payment.'\r\n                            }).promise();\r\n                            console.log(resp.$response);\r\n                            break;\r\n                        case 'bonus':\r\n                            resp = await acct.approveAssignment({\r\n                                AssignmentId: row[2],\r\n                            }).promise();\r\n                            console.log(resp.$response);\r\n                            resp = await acct.sendBonus({\r\n                                AssignmentId: row[2],\r\n                                WorkerId: row[1],\r\n                                BonusAmount: '0.10',\r\n                                Reason: 'Your work showed an honest effort to complete the task and you either found the correct answer or put in strong logical thought in your actions. Thank your for your time, and we hope this bonus makes the HIT feel more worthwhile.',\r\n                                UniqueRequestToken: ''\r\n                            }).promise();\r\n                            console.log(resp.$response);\r\n                            break;\r\n                        default:\r\n                            console.log(row);\r\n                            console.log('^^ the above row did not contain a valid action ^^');\r\n                            break;\r\n                    }\r\n                } else {\r\n                    console.log(row);\r\n                    console.log('^^ row was undefined ^^');\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getStatuses(sandbox: MTurkMode) {\r\n        this.setSandbox(sandbox);\r\n        let data = new Data(['WUSTL Key', 'Awaiting Acceptance', 'In Progress', 'Completed'], []);\r\n        let promises = this.forp(async (key: string, acct: AWS.MTurk) => {\r\n            let entry = [key, 0, 0, 0];\r\n            const hits = (await acct.listHITs().promise()).HITs;\r\n            if (hits && hits.length > 0) {\r\n                const as = hits.map(hit => hit.MaxAssignments ? hit.MaxAssignments : 0).reduce((prev: number, cur: number) => prev + cur, 0);\r\n                hits.forEach(hit => {\r\n                    const available = hit.NumberOfAssignmentsAvailable ? hit.NumberOfAssignmentsAvailable : 0;\r\n                    const pending = hit.NumberOfAssignmentsPending ? hit.NumberOfAssignmentsPending : 0;\r\n                    let completed = hit.MaxAssignments ? hit.MaxAssignments : 0;\r\n                    completed -= (available + pending);\r\n                    completed = Math.max(completed, 0);\r\n                    switch (hit.HITStatus) {\r\n                        case \"Assignable\":\r\n                            (entry[1] as number) += available;\r\n                            break;\r\n                        case \"Unassignable\":\r\n                            (entry[2] as number) += pending;\r\n                            break;\r\n                        case \"Reviewable\":\r\n                            (entry[3] as number) += completed;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                });\r\n            }\r\n            let sEntry = entry.map(item => item + '');\r\n            data.values.push(sEntry);\r\n            return true;\r\n        });\r\n        if (promises) {\r\n            for (let promise of promises) {\r\n                await promise;\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n}\r\n\r\nconst MTPool = new MTurkPool();\r\n\r\nexport default MTPool;\r\n","import React from \"react\";\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport {EDBStatus, RootState, updateDBStatus} from \"../redux/actions\";\r\nimport {table} from \"../aws/db\";\r\n\r\nconst mapState = (state: RootState) => {\r\n    return {\r\n        dbStatus: state.dbStatus\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateDBStatus\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\nclass DBStatus extends React.Component<Props, {}> {\r\n\r\n    renderCheck() {\r\n        return (\r\n          <button className={\"status-update safe right\"} onClick={async () => {\r\n              this.props.updateDBStatus((await table?.exists) ? EDBStatus.Created : EDBStatus.DoesNotExist);\r\n          }}>\r\n              Check\r\n          </button>\r\n        );\r\n    }\r\n\r\n    status() {\r\n        switch (this.props.dbStatus) {\r\n            case EDBStatus.Unknown:\r\n                return 'The status is currently unknown. Would you like to check?';\r\n            case EDBStatus.Created:\r\n                return 'The database is created and awaiting requests.';\r\n            case EDBStatus.DoesNotExist:\r\n                return 'The database does not exist. You should initialize it if you would like to use it.';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"status-container\"}>\r\n                {this.renderCheck()}\r\n                <h2>\r\n                    Database Status:\r\n                </h2>\r\n                <p className={\"status\"}>\r\n                    {this.status()}\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connector(DBStatus);","import React from \"react\";\r\nimport {RootState, updateCurrentIteration, updateCurrentProject} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {ProjectDescription} from \"../aws/db\";\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        projects: state.projects,\r\n        iterations: state.iterations,\r\n        currentProject: state.currentProject,\r\n        currentIteration: state.currentIteration\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {\r\n    updateCurrentProject,\r\n    updateCurrentIteration\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\ntype State = {\r\n}\r\n\r\nconst ffor = (num: number, fun: (num: number) => any) => {\r\n    let ret = [];\r\n    for (let i = 0; i < num; i++) {\r\n        ret.push(fun(i));\r\n    }\r\n    return ret;\r\n};\r\n\r\nclass ProjectIterationSelector extends React.Component<Props, State> {\r\n\r\n    render() {\r\n        return (\r\n            <div className={'project-iteration-selector'}>\r\n                <div className={'project-iteration-description'}>\r\n                    Project Name: Iteration\r\n                </div>\r\n                <div>\r\n                    <select className={'project-selector'} onChange={ev => this.props.updateCurrentProject(this.props.projects[ev.target.selectedIndex])}>\r\n                        {\r\n                            this.props.projects.map((project, index) => {\r\n                                return (\r\n                                    <option key={project.Name} value={project.Name} selected={project.Name === this.props.currentProject.Name}>\r\n                                        {project.Name}\r\n                                    </option>\r\n                                );\r\n                            })\r\n                        }\r\n                    </select>\r\n                    <span className={'separator'}>:</span>\r\n                    <select className={'iteration-selector'} onChange={ev => this.props.updateCurrentIteration(parseInt(ev.target.value))}>\r\n                        {\r\n                            ffor(this.props.iterations, (iteration => {\r\n                                return (\r\n                                    <option key={iteration} value={iteration} selected={iteration === this.props.currentIteration}>\r\n                                        {iteration}\r\n                                    </option>\r\n                                );\r\n                            }))\r\n                        }\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connector(ProjectIterationSelector);","import {\r\n    Data,\r\n    EDBStatus,\r\n    LOGIN,\r\n    LoginStatus,\r\n    LOGOUT,\r\n    MTurkMode,\r\n    RootState,\r\n    SPIData,\r\n    Student, SubmitHITData,\r\n    SubmitHITDataType,\r\n    UPDATE_BALANCES,\r\n    UPDATE_CURRENT_ITERATION,\r\n    UPDATE_CURRENT_PROJECT,\r\n    UPDATE_DB_STATUS,\r\n    UPDATE_ITERATIONS,\r\n    UPDATE_MTURK_MODE,\r\n    UPDATE_PROJECTS,\r\n    UPDATE_SPI_DATA,\r\n    UPDATE_STUDENTS, UPDATE_SUBMIT_HIT_DATA\r\n} from \"./actions\";\r\nimport {ProjectDescription} from \"../aws/db\";\r\nimport {TAccountBalances} from \"../aws/mturk\";\r\n\r\n// const defaultState: RootState = {\r\n//     loggedIn: false,\r\n//     dbStatus: EDBStatus.Unknown,\r\n//     projects: ['project 1', 'project 2', 'project 3'],\r\n//     iterations: 3,\r\n//     currentProject: 'project 1',\r\n//     currentIteration: 0,\r\n//     spiData: {'riley.mccuen': {project1: [{name1: 'math', name2: 'birthdays', name3: 'treats', count1: 2, count2: 2, count3: 3}]}},\r\n//     students: [{wustlKey: 'riley.mccuen', id: '', secret: ''}]\r\n// };\r\n\r\nconst defaultState: RootState = {\r\n    loggedIn: LoginStatus.UNATTEMPTED,\r\n    dbStatus: EDBStatus.Unknown,\r\n    projects: [],\r\n    iterations: 4,\r\n    currentProject: ProjectDescription.Create('', ''),\r\n    currentIteration: 0,\r\n    spiData: null,\r\n    students: [],\r\n    accountBalances: [],\r\n    submitHITData: {dataType: SubmitHITDataType.COUNT_NOT_GIVEN, data: new Data([], [])},\r\n    mturkMode: MTurkMode.SANDBOX,\r\n};\r\n\r\nexport function rootReducer(state=defaultState, action: any){\r\n    const reducerHelper = (updates: object) => {\r\n        return Object.assign({}, state, updates);\r\n    };\r\n    switch(action.type) {\r\n        case LOGIN:\r\n            const lin = action as {loggedIn: LoginStatus};\r\n            return reducerHelper({\r\n                loggedIn: lin.loggedIn\r\n            });\r\n        case LOGOUT:\r\n            const lout = action as {loggedIn: LoginStatus};\r\n            return reducerHelper({\r\n                loggedIn: lout.loggedIn\r\n            });\r\n        case UPDATE_DB_STATUS:\r\n            const udbs = action as {dbStatus: EDBStatus};\r\n            return reducerHelper({\r\n                dbStatus: udbs.dbStatus\r\n            });\r\n        case UPDATE_PROJECTS:\r\n            const up = action as {projects: string[], currentProject: string};\r\n            return reducerHelper({\r\n                projects: up.projects,\r\n                currentProject: up.currentProject\r\n            });\r\n        case UPDATE_ITERATIONS:\r\n            const ui = action as {iterations: number, iteration: number};\r\n            return reducerHelper({\r\n                iterations: ui.iterations,\r\n                currentIteration: ui.iteration\r\n            });\r\n        case UPDATE_CURRENT_PROJECT:\r\n            const ucp = action as {currentProject: string};\r\n            return reducerHelper({\r\n                currentProject: ucp.currentProject\r\n            });\r\n        case UPDATE_CURRENT_ITERATION:\r\n            const uci = action as {currentIteration: number};\r\n            return reducerHelper({\r\n                currentIteration: uci.currentIteration\r\n            });\r\n        case UPDATE_SPI_DATA:\r\n            const uspid = action as {spiData: SPIData};\r\n            return reducerHelper({\r\n                spiData: uspid.spiData\r\n            });\r\n        case UPDATE_STUDENTS:\r\n            const us = action as {students: Student[]};\r\n            return reducerHelper({\r\n                students: us.students\r\n            });\r\n        case UPDATE_BALANCES:\r\n            const ub = action as {accountBalances: TAccountBalances};\r\n            return reducerHelper({\r\n                accountBalances: ub.accountBalances,\r\n            });\r\n        case UPDATE_SUBMIT_HIT_DATA:\r\n            const ushd = action as {submitHITData: SubmitHITData};\r\n            console.log(ushd)\r\n            return reducerHelper({\r\n                submitHITData: ushd.submitHITData,\r\n            });\r\n        case UPDATE_MTURK_MODE:\r\n            const umm = action as {mturkMode: MTurkMode};\r\n            return reducerHelper({\r\n                mturkMode: umm.mturkMode\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import {applyMiddleware, compose, createStore} from \"redux\";\r\nimport {rootReducer} from \"./reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport const store = createStore(rootReducer, compose(\r\n    applyMiddleware(thunk)\r\n));","import React from \"react\";\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport {RootState, updateProjects} from \"../redux/actions\";\r\nimport {store} from \"../redux/store\";\r\nimport {ProjectDescription, table, Task} from \"../aws/db\";\r\nimport {FileDrop} from \"react-file-drop\";\r\n\r\nconst mapState = (state: RootState) => {\r\n    return {\r\n        projects: state.projects\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateProjects\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\ntype UpdateProjectProps = {\r\n    project: ProjectDescription,\r\n    selected: boolean,\r\n    delete: () => any,\r\n    update: (newVal: ProjectDescription) => any,\r\n    select: (callback: () => any) => any\r\n}\r\n\r\nclass UpdateProject extends React.Component<UpdateProjectProps, { editing: boolean, val: string, selected: boolean }> {\r\n\r\n    private inputElem = React.createRef<HTMLInputElement>();\r\n    private tagInputElem = React.createRef<HTMLInputElement>();\r\n\r\n    constructor(props: UpdateProjectProps) {\r\n        super(props);\r\n        this.state = {\r\n            selected: false,\r\n            editing: false,\r\n            val: props.project.Name\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <li className={this.props.selected ? \"update-project selected\" : \"update-project\"}\r\n                onClick={event => {\r\n                    event.stopPropagation();\r\n                    this.props.select(() => {\r\n                    });\r\n                }}\r\n            >\r\n                <div className={\"project-name\"}>\r\n                    <input type={'text'}\r\n                           value={this.state.val}\r\n                           disabled={!this.state.editing}\r\n                           ref={this.inputElem}\r\n                           onChange={ev => this.setState({val: ev.target.value})}\r\n                    />\r\n                    <button className={'danger'} onClick={() => this.props.delete()}>\r\n                        Delete\r\n                    </button>\r\n                    <button disabled={this.state.editing}\r\n                            onClick={() => {\r\n                                this.setState({editing: true}, () => this.inputElem.current?.focus());\r\n                            }}\r\n                    >\r\n                        Edit\r\n                    </button>\r\n                    <button disabled={!this.state.editing}\r\n                            onClick={() => {\r\n                                this.props.update(ProjectDescription.Create(this.state.val, this.props.project.Tasks));\r\n                                this.setState({editing: false});\r\n                            }}\r\n                    >\r\n                        Save\r\n                    </button>\r\n                    <button disabled={!this.state.editing}\r\n                            onClick={() => {\r\n                                this.setState({val: this.props.project.Name, editing: false});\r\n                            }}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n                <div className={this.props.selected ? \"project-tags\" : \"hide\"}>\r\n                    <FileDrop\r\n                        className={'file-drop'}\r\n                        onDrop={(files) => {\r\n                            if (files === null) {\r\n                                alert('Please put an actual file into the drop zone.');\r\n                                return;\r\n                            }\r\n                            if (files.length !== 1) {\r\n                                alert('Only input exactly one file into the drag and drop function.')\r\n                                return;\r\n                            }\r\n                            try {\r\n                                const reader = new FileReader();\r\n                                reader.addEventListener('loadend', (e) => {\r\n                                    try {\r\n                                        const parsed = JSON.parse(reader.result as string);\r\n                                        if (Array.isArray(parsed)) {\r\n                                            if (parsed.every(item => ('context' in item) && ('question' in item) && ('tag' in item)))\r\n                                            {\r\n                                                const tasks = JSON.stringify(parsed.map(item => {return {tag: item.tag, description: item.context + item.question}}));\r\n                                                this.props.update(ProjectDescription.Create(this.props.project.Name, tasks));\r\n                                            } else {\r\n                                                alert('Elements in array do not conform to specification.');\r\n                                            }\r\n                                        } else {\r\n                                            alert('Input JSON document should be an array at the top level.');\r\n                                        }\r\n                                    } catch (e) {\r\n                                        console.log(e);\r\n                                        alert(e);\r\n                                    }\r\n                                });\r\n                                reader.readAsText(files[0]);\r\n                            } catch (e) {\r\n                                console.log(e);\r\n                                alert(e);\r\n                            }\r\n                        }}\r\n                    >\r\n                        Drop json file with scenario context here!\r\n                    </FileDrop>\r\n                </div>\r\n                <ul>\r\n                    {\r\n                        this.props.project.parsedTags.map((tag, index) => {\r\n                            return <li key={tag.tag+tag.description}>\r\n                                <h3> {tag.tag} </h3>\r\n                                <p>\r\n                                    {tag.description}\r\n                                </p>\r\n                            </li>;\r\n                        })\r\n                    }\r\n                </ul>\r\n            </li>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nclass UpdateProjects extends React.Component<Props, { selected: number }> {\r\n\r\n    private newInput = React.createRef<HTMLInputElement>();\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: 0\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"status-container\"} onClick={() => {\r\n                this.setState({selected: -1})\r\n            }}>\r\n                <h2>\r\n                    Current Projects:\r\n                </h2>\r\n                <ul className={'projects'}>\r\n                    {\r\n                        this.props.projects.map((project, index) =>\r\n                            <UpdateProject\r\n                                project={project}\r\n                                selected={index === this.state.selected}\r\n                                delete={() => {\r\n                                    store.dispatch((() => {\r\n                                        return async (dispatch: any) => {\r\n                                            const name = project.Name;\r\n                                            const projectSave = ProjectDescription.Create(name, project.Tasks);\r\n                                            try {\r\n                                                await table?.deleteEntity(projectSave);\r\n                                                dispatch(\r\n                                                    this.props.updateProjects(\r\n                                                        this.props.projects.filter(\r\n                                                            value => value.Name !== projectSave.Name\r\n                                                        )\r\n                                                    )\r\n                                                );\r\n                                            } catch (e) {\r\n                                                alert(`Could not delete project. Send error output to Riley or debug: ${e}.`);\r\n                                            }\r\n                                        }\r\n                                    })());\r\n                                }}\r\n                                update={(newVal: ProjectDescription) => {\r\n                                    store.dispatch((() => {\r\n                                        return async (dispatch: any) => {\r\n                                            const tasks = project.parsedTags;\r\n                                            if (project.Name === newVal.Name\r\n                                                && tasks.length === newVal.parsedTags.length\r\n                                            ) {\r\n                                                return;\r\n                                            }\r\n                                            try {\r\n                                                await table?.deleteEntity(project);\r\n                                                await table?.put(newVal);\r\n                                                dispatch(\r\n                                                    this.props.updateProjects(\r\n                                                        [...this.props.projects.filter(\r\n                                                            value => value.Name !== newVal.Name\r\n                                                        ), newVal]\r\n                                                    )\r\n                                                );\r\n                                            } catch (e) {\r\n                                                alert(`Could not update project. Send error output to Riley or debug: ${e}.`);\r\n                                            }\r\n                                        }\r\n                                    })());\r\n                                }}\r\n                                select={(callback) => {\r\n                                    this.setState({selected: index}, callback);\r\n                                }}\r\n                                key={project.Name}\r\n                            />)\r\n                    }\r\n                    <li>\r\n                        <input ref={this.newInput} type={'text'} placeholder={'New Project Name...'}/>\r\n                        <button onClick={() => {\r\n                            store.dispatch((() => {\r\n                                return async (dispatch: any) => {\r\n                                    if (this.newInput.current && this.newInput.current.value.trim() !== '') { // check that input fits params\r\n                                        try {\r\n                                            const newProjectName = ProjectDescription.Create((this.newInput as any).current.value, '');\r\n                                            await table?.put(newProjectName);\r\n                                            dispatch(this.props.updateProjects([...this.props.projects, newProjectName]));\r\n                                            this.newInput.current.value = '';\r\n                                        } catch (e) {\r\n                                            alert(`Could not add project. Send error output to Riley or debug: ${e}.`);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })());\r\n                        }}>\r\n                            Add\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connector(UpdateProjects);","import React from \"react\";\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport {\r\n    Data,\r\n    RootState,\r\n    StudentProjectIteration,\r\n    updateSubmitHITData,\r\n    updateSPIData,\r\n    SubmitHITDataType\r\n} from \"../redux/actions\";\r\nconst csvp = require('csv-parse');\r\n\r\nconst mapState = (state: RootState) => {\r\n    return {\r\n        currentProject: state.currentProject,\r\n        currentIteration: state.currentIteration,\r\n        spiData: state.spiData,\r\n        students: state.students,\r\n        submitHITData: state.submitHITData\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateSPIData,\r\n    updateSubmitHITData\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\ntype State = {\r\n    input: string;\r\n    displayTable: boolean;\r\n    compiler: Compiler;\r\n}\r\n\r\ntype Condition = (input: string[]) => boolean;\r\n\r\nfunction createCond(index: number, value: string) {\r\n    return (input: string[]) => input[index] === value;\r\n}\r\n\r\nclass Compiler {\r\n\r\n    private static instance = new Compiler();\r\n\r\n    private data: Data | null;\r\n    private filterExpr: string | null;\r\n\r\n    constructor() {\r\n        this.data = null;\r\n        this.filterExpr = null;\r\n    }\r\n\r\n    setData(data: Data | null) {\r\n        this.data = data;\r\n        return this;\r\n    }\r\n\r\n    setFilterExpression(expr: string | null) {\r\n        this.filterExpr = expr;\r\n        return this;\r\n    }\r\n\r\n    static I() {\r\n        return Compiler.instance;\r\n    }\r\n\r\n    private lex() {\r\n        if (this.filterExpr === null) {\r\n            throw new Error('filter expression has not been set yet, therefore lex cannot be called yet');\r\n        }\r\n        return this\r\n            .filterExpr\r\n            .trim()\r\n            .split(' ')\r\n            .map(tok => tok.trim())\r\n            .filter(tok => tok !== '');\r\n    }\r\n\r\n    private key(k: string) {\r\n        if (this.data === null) {\r\n            throw new Error('data has not been set yet, therefore key cannot be called yet');\r\n        }\r\n        if (k === '&&' || k === '==') {\r\n            throw new Error('invalid key supplied (special symbol was provided instead of a key)');\r\n        }\r\n        const ind = this.data.header.indexOf(k);\r\n        console.log(k, ind);\r\n        if (ind === -1) {\r\n            throw new Error('invalid key supplied');\r\n        }\r\n        return ind;\r\n    }\r\n\r\n    private eq(k: string) {\r\n        if (k !== '==') {\r\n            throw new Error('invalid equality detected');\r\n        }\r\n    }\r\n\r\n    private value(k: string) {\r\n        if (k === '&&' || k === '==') {\r\n            throw new Error('invalid value supplied (special symbol was provided instead of a value)');\r\n        }\r\n        return k;\r\n    }\r\n\r\n    private amper(k: string) {\r\n        if (k !== '&&') {\r\n            throw new Error('invalid expression connector detected');\r\n        }\r\n    }\r\n\r\n    private parse(tokens: string[]): Condition[] {\r\n        if (tokens.length < 3) {\r\n            throw new Error('cannot parse expression with less than 3 tokens')\r\n        }\r\n        if (tokens.length % 2 !== 1) {\r\n            throw new Error('cannot parse expression with even number of tokens');\r\n        }\r\n        let conds: Condition[] = [];\r\n        let ind = -1;\r\n        let val = '';\r\n        tokens.forEach((tok, i) => {\r\n            switch (i % 4) {\r\n                case 0:\r\n                    ind = this.key(tok);\r\n                    break;\r\n                case 1:\r\n                    this.eq(tok);\r\n                    break;\r\n                case 2:\r\n                    val = this.value(tok);\r\n                    conds.push(createCond(ind, val));\r\n                    break;\r\n                case 3:\r\n                    this.amper(tok);\r\n                    break;\r\n                default:\r\n                    throw new Error('i dont know how i got here, and should not have');\r\n            }\r\n\r\n        });\r\n        return conds;\r\n    }\r\n\r\n    private evaluate(conditions: Condition[]): string[][] {\r\n        if (this.data === null) {\r\n            throw new Error('data is null, cannot evaluate a an expression without any data')\r\n        }\r\n        const ret = this.data.values.filter(row => {\r\n            return conditions.map(cond => cond(row)).every(cond => cond);\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    execute (): string[][] {\r\n        return this.evaluate(this.parse(this.lex()));\r\n    }\r\n}\r\n\r\nclass Table extends React.Component<Props, State> {\r\n\r\n    private fileInput = React.createRef<HTMLInputElement>();\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            input: '',\r\n            displayTable: false,\r\n            compiler: new Compiler().setData(this.props.submitHITData.data)\r\n        };\r\n    }\r\n\r\n    updateCSVData(csv: string[][]) {\r\n        let header: string[] = [];\r\n        let values: string[][] = [];\r\n        try {\r\n            if (csv.length >= 2) {\r\n                header = csv[0];\r\n                values = csv.slice(1);\r\n            }\r\n        } catch (e) {\r\n            alert(e);\r\n            header = [];\r\n            values = [];\r\n        }\r\n        let dt = undefined;\r\n        if (\r\n            header.length === 3 &&\r\n            ['WUSTL Key', 'Task Tag', 'Count'].every(hk => header.includes(hk))\r\n        ) {\r\n            this.props.updateSubmitHITData({dataType: SubmitHITDataType.COUNT_GIVEN, data: new Data(header, values)});\r\n        } else if (\r\n            header.length === 4 &&\r\n            ['WUSTL Key', 'Task 1', 'Task 2', 'Task 3'].every(hk => header.includes(hk))\r\n        ) {\r\n            this.props.updateSubmitHITData({dataType: SubmitHITDataType.COUNT_NOT_GIVEN, data: new Data(header, values)});\r\n        } else {\r\n            alert('CSV is in invalid format. Cannot load the given file.')\r\n        }\r\n    }\r\n\r\n    renderFileInput() {\r\n            return (\r\n                <form>\r\n                    <input\r\n                        ref={this.fileInput}\r\n                        type={\"file\"}\r\n                        accept={\"text/csv\"}\r\n                        className={\"input-file\"}\r\n                        name={\"csv-input\"}\r\n                        id={\"csv-input\"}\r\n                        onChange={event => {\r\n                            const file = event.target.files?.item(0);\r\n                            if (file) {\r\n                                const fr = new FileReader();\r\n                                fr.onloadend = () => {\r\n                                    if (fr.readyState === FileReader.DONE) {\r\n                                        csvp(fr.result, {}, (err: any, out: string[][]) => {\r\n                                            if (err) {\r\n                                                alert(`Could not parse file correctly. Error: ${err}.`)\r\n                                            } else {\r\n                                                this.updateCSVData(out);\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                };\r\n                                fr.readAsText(file, 'utf-8');\r\n                            }\r\n                        }}\r\n                    />\r\n                    <label\r\n                        className={\"csv-input\"}\r\n                        htmlFor={\"csv-input\"}\r\n                    >\r\n                        Input File of HIT Assignments here...\r\n                    </label>\r\n                </form>\r\n            );\r\n    }\r\n    render() {\r\n        let dispData = [];\r\n        console.log(this.props.submitHITData)\r\n        console.log(this.props.submitHITData.data)\r\n        console.log(this.props.submitHITData.dataType)\r\n        try {\r\n            dispData = this.state.compiler.setData(this.props.submitHITData.data).execute();\r\n        } catch (e) {\r\n            // console.log(e);\r\n            dispData = this.props.submitHITData.data.values;\r\n        }\r\n        return (\r\n            <div className={\"status-container\"}>\r\n                {this.renderFileInput()}\r\n                <input\r\n                    type={\"text\"}\r\n                    value={this.state.input}\r\n                    className={\"filter-input\"}\r\n                    onChange={ev => {\r\n                        this.state.compiler.setFilterExpression(ev.target.value);\r\n                        this.setState({input: ev.target.value});\r\n                    }}\r\n                    placeholder={\"Enter your data filter expression here...\"}\r\n                />\r\n                <DataTable data={new Data(this.props.submitHITData.data.header, dispData)} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport class DataTable extends React.Component<{data: Data}, any> {\r\n\r\n    render() {\r\n        if (this.props.data === undefined || this.props.data === null || this.props.data.header.length === 0) {\r\n            return (\r\n                <div>\r\n                    <h2> No data to display. </h2>\r\n                </div>\r\n            );\r\n        }\r\n        return <table className={\"hit-data\"}>\r\n            <thead>\r\n            <tr>\r\n                {\r\n                    this\r\n                        .props\r\n                        .data\r\n                        .header\r\n                        .map((key, index) => <th key={key+index}>{key}</th>)\r\n                }\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                this\r\n                    .props\r\n                    .data\r\n                    .values\r\n                    .map((row, index) =>\r\n                        <tr key={index}>\r\n                            {\r\n                                row\r\n                                    .map((val, index) => <td key={val+index}>{val}</td>)\r\n                            }\r\n                        </tr>\r\n                    )\r\n            }\r\n            </tbody>\r\n        </table>\r\n    }\r\n\r\n}\r\n\r\nexport default connector(Table);\r\n","import {AuthenticationDetails, CognitoUser, CognitoUserPool, CognitoUserSession} from 'amazon-cognito-identity-js';\r\nimport { AwsClient } from 'aws4fetch';\r\nimport {AppJSONHeaders, BaseURL, METHODS, Region} from \"./aws-constants\";\r\nimport {createTable as dbCreateTable} from \"./db\";\r\nimport {fetchProjects, fetchSPIData} from \"../redux/actions\";\r\nimport {store} from \"../redux/store\";\r\n\r\nconst AWS = require(\"aws-sdk\");\r\n\r\nconst IdentityPoolId = \"us-east-1:b69d4b85-5cd8-4a07-aabf-e730ede479d9\";\r\nconst ClientId = \"15f397ambvh0db4i20usm454a0\";\r\nconst UserPoolId = \"us-east-1_B4YHaKqVR\";\r\n\r\nAWS.config.region = Region; // Region\r\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n    IdentityPoolId: IdentityPoolId,\r\n});\r\n\r\nconst userPool = new CognitoUserPool({\r\n    UserPoolId: UserPoolId,\r\n    ClientId: ClientId,\r\n});\r\n\r\nlet cognitoUser: CognitoUser | null = userPool.getCurrentUser();\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nlet sessionUserAttributes: CognitoUserSession | null | undefined = null;\r\nlet awsFetchClient: AwsClient | null = null;\r\n\r\nconst createCredentials = (result: CognitoUserSession) => {\r\n    AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n        IdentityPoolId: IdentityPoolId,\r\n        Logins: {\r\n            [`cognito-idp.${Region}.amazonaws.com/${UserPoolId}`]: result.getIdToken().getJwtToken(),\r\n        },\r\n    });\r\n}\r\n\r\nconst createFetchClient = () => {\r\n    awsFetchClient = new AwsClient({\r\n        secretAccessKey: AWS.config.credentials.secretAccessKey,\r\n        accessKeyId: AWS.config.credentials.accessKeyId,\r\n        sessionToken: AWS.config.credentials.sessionToken\r\n    });\r\n    return !AWS.config.credentials.expired;\r\n}\r\n\r\nconst refreshCredentials = async () => {\r\n    return await new Promise<boolean>((resolve, fail) => {\r\n        AWS.config.credentials.refresh((error: any) => {\r\n            if (error) {\r\n                fail(error);\r\n            }\r\n            createFetchClient();\r\n            resolve(true);\r\n        });\r\n    });\r\n}\r\n\r\nconst createTable = () => {\r\n    if (awsFetchClient === null) {\r\n        throw new Error('AWS Fetch Client is null, cannot construct database connection.');\r\n    }\r\n    dbCreateTable(awsFetchClient as AwsClient);\r\n}\r\n\r\nconst asyncStore = () => {\r\n    store.dispatch(fetchProjects());\r\n    store.dispatch(fetchSPIData());\r\n}\r\n\r\nconst nullifyAllServiceGlobals = () => {\r\n    cognitoUser = null;\r\n    sessionUserAttributes = null;\r\n    awsFetchClient = null;\r\n}\r\n\r\nconst clearIncorrectUserdata = () => {\r\n    cognitoUser = null;\r\n    sessionUserAttributes = null;\r\n}\r\n\r\nexport const awsLogin = async (username: string, password: string) => {\r\n    if (username !== '' && password !== '') { // if username and password are given\r\n        console.log(cognitoUser)\r\n        if (cognitoUser === null) {\r\n            cognitoUser = new CognitoUser({\r\n                Username: username,\r\n                Pool: userPool,\r\n            });\r\n        }\r\n        const authenticationDetails = new AuthenticationDetails({\r\n            Username: username,\r\n            Password: password,\r\n        });\r\n        return await new Promise<boolean>((resolve, fail) => {\r\n\r\n            cognitoUser?.authenticateUser(authenticationDetails, {\r\n                onSuccess: async result => {\r\n                    try {\r\n                        createCredentials(result);\r\n                        await refreshCredentials();\r\n                        createTable();\r\n                        asyncStore();\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        clearIncorrectUserdata();\r\n                        fail(e);\r\n                    }\r\n                },\r\n\r\n                onFailure: err => {\r\n                    clearIncorrectUserdata();\r\n                    fail(err);\r\n                },\r\n\r\n                newPasswordRequired: (userAttributes, requiredAttributes) => {\r\n                    return cognitoUser?.completeNewPasswordChallenge(password, requiredAttributes, {\r\n                        onSuccess: session => {\r\n                            sessionUserAttributes = session;\r\n                            resolve(true);\r\n                        },\r\n                        onFailure: err => {\r\n                            clearIncorrectUserdata();\r\n                            fail(err);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    } else {\r\n        return await new Promise<boolean>((resolve, fail) => {\r\n            if (cognitoUser !== null) {\r\n                cognitoUser.getSession(async (err: any, result: any) => {\r\n                    if (result) {\r\n                        try {\r\n                            createCredentials(result);\r\n                            await refreshCredentials();\r\n                            createTable();\r\n                            asyncStore();\r\n                            resolve(true);\r\n                        } catch (e) {\r\n                            clearIncorrectUserdata();\r\n                            console.log(e)\r\n                            fail(e);\r\n                        }\r\n                    } else {\r\n                        clearIncorrectUserdata();\r\n                        fail(err);\r\n                    }\r\n                });\r\n            } else {\r\n                clearIncorrectUserdata();\r\n                fail(\"No user session.\")\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const awsLogout = async () => {\r\n    if (cognitoUser) {\r\n        return await new Promise<boolean>((resolve, fail) => {\r\n            // @ts-ignore\r\n            try {\r\n                cognitoUser?.signOut();\r\n                nullifyAllServiceGlobals();\r\n                resolve(true);\r\n            } catch (e) {\r\n                nullifyAllServiceGlobals();\r\n                fail(e);\r\n            }\r\n        });\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const downloadAllFiles = async (project: string, iteration: number) => {\r\n    const url = BaseURL + `/logs?project=${project}&iteration=${iteration}`;\r\n    const resp = (await (awsFetchClient as AwsClient).fetch(url, {\r\n        method: METHODS.GET,\r\n        headers: AppJSONHeaders()\r\n    }));\r\n    return resp.json();\r\n}\r\n","import React from \"react\";\r\nimport {RootState, updateStudents} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nconst csvp = require('csv-parse');\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        students: state.students\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {\r\n    updateStudents\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\nenum UploadStatus {\r\n    NO_UPLOAD = 'No file has been uploaded yet.',\r\n    SUCCESS = 'File has been successfully uploaded and parsed.',\r\n    FAILURE = 'The file that was uploaded could not be parsed or did not validate.',\r\n}\r\n\r\ntype State = {\r\n    fileUploaded: UploadStatus;\r\n}\r\n\r\nexport default connector(class StudentFileInput extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            fileUploaded: UploadStatus.NO_UPLOAD,\r\n        }\r\n    }\r\n\r\n    validateStudents(values: string[][]): boolean {\r\n        return values.length > 1\r\n            && values[0][0].trim() === 'WUSTL Key'\r\n            && values[0][1].trim() === 'GH Pages URL'\r\n            && values[0][2].trim() === 'AWS IAM ID'\r\n            && values[0][3].trim() === 'AWS IAM SECRET'\r\n            && values.every(row => {\r\n                return row.length === 4;\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"student-file-input\"}>\r\n                <div>\r\n                    <h3>\r\n                        {this.state.fileUploaded}\r\n                    </h3>\r\n                    <FileInput onFileChange={(data: string[][]) => {\r\n                        if (this.validateStudents(data)) {\r\n                            this.props.updateStudents(\r\n                                data\r\n                                    .slice(1)\r\n                                    .map(studData => {\r\n                                        return {\r\n                                            wustlKey: studData[0].trim(),\r\n                                            url: studData[1].trim(),\r\n                                            id: studData[2].trim(),\r\n                                            secret: studData[3].trim(),\r\n                                        };\r\n                                    })\r\n                            );\r\n                            this.setState({fileUploaded: UploadStatus.SUCCESS});\r\n                        } else {\r\n                            this.setState({fileUploaded: UploadStatus.FAILURE});\r\n                        }\r\n                    }} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\ntype FileInputProps = {\r\n    onFileChange: (values: string[][]) => any\r\n}\r\n\r\nexport class FileInput extends React.Component<FileInputProps, {}> {\r\n\r\n    private fileInput = React.createRef<HTMLInputElement>();\r\n\r\n    render() {\r\n        return (\r\n                <form>\r\n                    <input\r\n                        ref={this.fileInput}\r\n                        type={\"file\"}\r\n                        accept={\"text/csv\"}\r\n                        className={\"input-file\"}\r\n                        name={\"student-input\"}\r\n                        id={\"student-input\"}\r\n                        onChange={event => {\r\n                            const file = event.target.files?.item(0);\r\n                            if (file) {\r\n                                const fr = new FileReader();\r\n                                fr.onloadend = () => {\r\n                                    if (fr.readyState === FileReader.DONE) {\r\n                                        csvp(fr.result, {}, (err: any, out: string[][]) => {\r\n                                            if (err) {\r\n                                                alert(`Could not parse file correctly. Error: ${err}.`)\r\n                                            } else {\r\n                                                console.log(out);\r\n                                                this.props.onFileChange(out);\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                };\r\n                                fr.readAsText(file, 'utf-8');\r\n                            }\r\n                       }}\r\n                    />\r\n                    <label\r\n                        className={\"student-input\"}\r\n                        htmlFor={\"student-input\"}\r\n                    >\r\n                        Input File of Student Credentials Here...\r\n                    </label>\r\n                </form>\r\n        );\r\n    }\r\n\r\n}","import {RootState, login, logout} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {awsLogin, awsLogout} from \"../aws/aws-service\";\r\n\r\nconst mapState = (state: RootState) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    login,\r\n    logout\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\nexport const Login = connector(class Login extends React.Component<Props, {}> {\r\n\r\n    usernameField = React.createRef<HTMLInputElement>();\r\n    passwordField = React.createRef<HTMLInputElement>();\r\n\r\n    render() {\r\n        return (\r\n            <div id={\"login-container\"}>\r\n                <form onSubmit={\r\n                    async ev => {\r\n                        ev.preventDefault();\r\n                        if (this.usernameField.current &&\r\n                            this.passwordField.current\r\n                        ) {\r\n                            const success = await awsLogin(this.usernameField.current.value, this.passwordField.current.value)\r\n                            if (success) {\r\n                                this.props.login();\r\n                            }\r\n                        }\r\n                    }}\r\n                    >\r\n                    <h1>\r\n                        CSE 256 Console\r\n                    </h1>\r\n                    <fieldset>\r\n                        <label>Username:</label>\r\n                        <input type=\"text\" placeholder={\"Username...\"} ref={this.usernameField} autoComplete=\"username\"/>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <label>Password:</label>\r\n                        <input type=\"password\" placeholder={\"Password...\"} ref={this.passwordField} autoComplete=\"current-password\"/>\r\n                    </fieldset>\r\n                    <button className=\"basic\" type=\"submit\"> Login </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n});\r\n\r\nexport const Logout = connector(class Logout extends React.Component<Props, {}> {\r\n\r\n    render() {\r\n        return (<button className=\"safe\" onClick={async () => {\r\n            if (await awsLogout()) {\r\n                this.props.logout();\r\n            }\r\n        }}> Logout </button>);\r\n    }\r\n\r\n});","import React from \"react\";\r\n\r\ntype Props = {\r\n    buttonTitle: string;\r\n    description: string;\r\n    buttonClass: string;\r\n    onClick: (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => any;\r\n    display: boolean;\r\n};\r\n\r\ntype State = {\r\n    display: boolean;\r\n};\r\n\r\nexport default class ButtonWithDescription extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            display: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.display ? (\r\n            <div className={'button-with-description'}>\r\n                <div className={'button-container'}>\r\n                    <button onClick={this.props.onClick} className={this.props.buttonClass}>{this.props.buttonTitle}</button>\r\n                    <button className=\"info\" onClick={() => this.setState({display: !this.state.display})}>Info</button>\r\n                </div>\r\n                <div className={this.state.display ? 'action-description' : 'action-description hide'}>{this.props.description}</div>\r\n            </div>\r\n        ): null;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {RootState, updateStudents, updateSPIData, SPIData} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport ButtonWithDescription from \"./button-with-description\";\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        currentIteration: state.currentIteration,\r\n        currentProject: state.currentProject,\r\n        students: state.students,\r\n        spiData: state.spiData\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {\r\n    updateStudents,\r\n    updateSPIData\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\nenum Generated {\r\n    LOADING ,\r\n    NOT_GENERATED,\r\n    GENERATED,\r\n}\r\n\r\ntype State = {\r\n}\r\n\r\nexport default connector(class HITGenerator extends React.Component<Props, State> {\r\n\r\n    threeRands(max: number) {\r\n        if (max < 3) {\r\n            return [0, 0, 0];\r\n        }\r\n        let rands = [-1, -1, -1];\r\n        let index = 0;\r\n        while(rands.indexOf(-1) !== -1) {\r\n            const ri = Math.floor(Math.random() * Math.floor(max));\r\n            if (rands.indexOf(ri) === -1) {\r\n                rands[index] = ri;\r\n                index += 1;\r\n            }\r\n        }\r\n        return rands;\r\n    }\r\n\r\n    generate() {\r\n        if (this.props.spiData === null) {\r\n            alert('Cannot generate when data has not been loaded from database.');\r\n        }\r\n        const tasks = this.props.currentProject.parsedTags;\r\n        if (tasks !== undefined\r\n            && tasks.length === 0\r\n        ) {\r\n            alert('Cannot generate task assignment when no tasks exist for this project. Add tags to this project on Semester Setup > Change Project.')\r\n            return;\r\n        }\r\n        const newSPIData: SPIData = {};\r\n        Object.assign(newSPIData, this.props.spiData);\r\n        this.props.students.forEach(stud => {\r\n            // @ts-ignore\r\n            let studSPI = newSPIData[stud.wustlKey];\r\n            if (studSPI === undefined) {\r\n                studSPI = {};\r\n                // @ts-ignore\r\n                newSPIData[stud.wustlKey] = studSPI;\r\n            }\r\n            let pis = studSPI[this.props.currentProject.Name];\r\n            if (pis === undefined) {\r\n                pis = [];\r\n                studSPI[this.props.currentProject.Name] = pis;\r\n            }\r\n            while (pis.length <= this.props.currentIteration) {\r\n                pis.push({tasks: []});\r\n            }\r\n            const rands = this.threeRands(tasks.length);\r\n            const tags = rands.map(ind => tasks[ind]);\r\n            pis[this.props.currentIteration].tasks = [\r\n                {\r\n                    name: tags[0].tag,\r\n                    count: 0\r\n                },\r\n                {\r\n                    name: tags[1].tag,\r\n                    count: 0\r\n                },\r\n                {\r\n                    name: tags[2].tag,\r\n                    count: 0\r\n                },\r\n            ];\r\n            console.log(pis[pis.length - 1]);\r\n        });\r\n        this.props.updateSPIData(newSPIData);\r\n        // upload new data to database\r\n    }\r\n\r\n    render() {\r\n        const generated = this.props.spiData === null\r\n            ? Generated.LOADING\r\n            : this.props.students.some(stud => {\r\n                const studData = (this.props.spiData as SPIData)[stud.wustlKey];\r\n                if (studData) {\r\n                    const pi = studData[this.props.currentProject.Name];\r\n                    if (pi) {\r\n                        return pi[this.props.currentIteration] !== undefined;\r\n                    }\r\n                }\r\n                return false;\r\n            }) ? Generated.GENERATED : Generated.NOT_GENERATED;\r\n        return (\r\n            <div className={'flex-actions'}>\r\n                <div className={generated === Generated.LOADING ? '' : 'hide'}>\r\n                    <h3>\r\n                        The necessary data to display the available actions has not loaded from the database yet. If the database is properly configured and running this page will automatically refresh when the data is loaded.\r\n                    </h3>\r\n                </div>\r\n                <ButtonWithDescription\r\n                    buttonTitle={'Generate'}\r\n                    description={'This button will generate the HIT assignments for all students. Nothing that is already in the database will be changed, modified, or destroyed by this action. Use this button once for each iteration of each project. This will generate a set of HITs for each student to perform for the requested iteration.'}\r\n                    buttonClass={'safe'}\r\n                    onClick={() => {\r\n                        this.generate();\r\n                    }}\r\n                    display={generated === Generated.NOT_GENERATED}\r\n                />\r\n                <ButtonWithDescription\r\n                    buttonTitle={'Regenerate'}\r\n                    description={'This button will REGENERATE the HIT assignments for all students. This will generate a new list of tasks for each student for this iteration and overwrite them in the database. Only run this if HITs have not already been submitted to MTurk. If they have do not run this or it will be impossible to connect logs generated from MTurk to the student that that log belongs to.'}\r\n                    buttonClass={'danger'}\r\n                    onClick={() => {\r\n                        this.generate();\r\n                    }}\r\n                    display={generated === Generated.GENERATED}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n});","import React from 'react';\r\nimport './App.css';\r\nimport {HitManagementTab, PostHitManagementTab, SemesterManagementTab, SessionManagementTab, Tab} from \"../components/tab\";\r\nimport {login, LoginStatus, logout, RootState} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {Login} from \"../components/login\";\r\nimport {awsLogin} from \"../aws/aws-service\";\r\n\r\nenum NavLocation {\r\n    SessionManagement = 'session',\r\n    HITManagement = 'deploy',\r\n    PostHITManagement = 'post_deployment',\r\n    SemesterManagement = 'semester_setup',\r\n}\r\n\r\nclass NavBar extends React.Component<{ startNavLocation: NavLocation, onUpdateActive: (input: NavLocation) => any }, { currentActive: { index: number, navLocation: NavLocation } }> {\r\n    rs = new Array<() => React.RefObject<HTMLButtonElement>>(Object.keys(NavLocation).length).fill(() => React.createRef<HTMLButtonElement>(), 0, Object.keys(NavLocation).length).map(fun => fun());\r\n\r\n    constructor(props: { startNavLocation: NavLocation, onUpdateActive: (input: NavLocation) => any }) {\r\n        super(props);\r\n        this.state = {\r\n            currentActive: {index: 0, navLocation: NavLocation.SemesterManagement}\r\n        };\r\n    }\r\n\r\n    updateActive(index: number, navLocation: NavLocation) {\r\n        const oldActive = this.state.currentActive;\r\n        if (oldActive.index === index) {\r\n            return;\r\n        }\r\n        this.rs[oldActive.index].current?.classList.remove('active');\r\n        this.rs[index].current?.classList.add('active');\r\n        this.setState({currentActive: {index: index, navLocation: navLocation}});\r\n        this.props.onUpdateActive(navLocation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"header\">\r\n                {\r\n                    [\r\n                        (<div className={\"filler logo\"} key={-1}>\r\n                            CSE 256\r\n                        </div>), ...this.rs.map((val, index) => {\r\n                        const ind = index;\r\n                        const navLocation = Object.values(NavLocation)[ind];\r\n                        return (\r\n                            <button ref={val} key={ind}\r\n                                    className={this.props.startNavLocation === navLocation ? \"active\" : \"\"}\r\n                                    onClick={() => this.updateActive(ind, navLocation)}>\r\n                                {\r\n                                    navLocation\r\n                                        .split(\"_\")\r\n                                        .map(str => str.charAt(0).toUpperCase() + str.slice(1))\r\n                                        .join(\" \")\r\n                                }\r\n                            </button>\r\n                        );\r\n                    })]\r\n                }\r\n            </nav>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nclass Footer extends React.Component<{}, {}> {\r\n    render() {\r\n        return (\r\n            <div className={\"footer\"}>\r\n                <div className={\"attribution\"}>\r\n                    Icons made by&nbsp;\r\n                    <a href=\"https://www.flaticon.com/authors/google\" title=\"Google\">\r\n                        Google\r\n                    </a>\r\n                    &nbsp;from&nbsp;\r\n                    <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n                        www.flaticon.com\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapState = (state: RootState) => {\r\n    return {\r\n        loggedIn: state.loggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    login,\r\n    logout\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\ntype TabRef = {tab: Tab | undefined}\r\ntype TabMap = {[key: string]: TabRef}\r\n\r\nclass Tabs extends React.Component<any, { navLocation: NavLocation }> {\r\n\r\n    rs: TabMap = {\r\n        [NavLocation.SemesterManagement as string]: {tab: undefined},\r\n        [NavLocation.HITManagement as string]: {tab: undefined},\r\n        [NavLocation.PostHITManagement as string]: {tab: undefined},\r\n        [NavLocation.SessionManagement as string]: {tab: undefined},\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            navLocation: NavLocation.SessionManagement,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        const loc = location.hash;\r\n        if (loc === \"\") {\r\n            return;\r\n        }\r\n        const path = loc.split(\".\");\r\n        if (path.length >= 3) {\r\n            return;\r\n        }\r\n        const tab = path[0].slice(1) as NavLocation;\r\n        const action = path.length === 2 ? path[1] : \"\";\r\n        if (Object.values(NavLocation).includes(tab)) {\r\n            this.setState({navLocation: tab}, () => {\r\n                (this.rs[tab].tab as Tab).displayName(action);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"app\">\r\n            <NavBar startNavLocation={this.state.navLocation}\r\n                    onUpdateActive={(navLocation) => this.setState({navLocation: navLocation})}/>\r\n            <SessionManagementTab tabRef={this.rs[NavLocation.SessionManagement]} display={this.state.navLocation === NavLocation.SessionManagement}/>\r\n            <HitManagementTab tabRef={this.rs[NavLocation.HITManagement]} display={this.state.navLocation === NavLocation.HITManagement}/>\r\n            <PostHitManagementTab tabRef={this.rs[NavLocation.PostHITManagement]} display={this.state.navLocation === NavLocation.PostHITManagement}/>\r\n            <SemesterManagementTab tabRef={this.rs[NavLocation.SemesterManagement]} display={this.state.navLocation === NavLocation.SemesterManagement}/>\r\n            <Footer/>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nclass App extends React.Component<Props, {}> {\r\n\r\n    componentDidMount() {\r\n        console.log(\"mounted\")\r\n        awsLogin('', '')\r\n            .then(\r\n                value => {\r\n                    if (value) {\r\n                        console.log(\"login\")\r\n                        this.props.login();\r\n                    } else {\r\n                        console.log(\"logout\")\r\n                        this.props.logout();\r\n                    }\r\n                },\r\n                reason => {\r\n                    console.log(reason)\r\n                    this.props.logout();\r\n                    // error -> rejection\r\n                })\r\n            .catch(reason => {\r\n                // do nothing\r\n                console.log(\"logout\")\r\n                console.log(reason)\r\n                this.props.logout();\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (this.props.loggedIn === LoginStatus.UNATTEMPTED) {\r\n            return <div className={\"app splash\"}></div>;\r\n        } else if (this.props.loggedIn === LoginStatus.SUCCEEDED) {\r\n            return <Tabs></Tabs>;\r\n        } else {\r\n            return <div className=\"app\"><Login/></div>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default connector(App);\r\n","import React from 'react';\r\nimport {MTurkMode, RootState, updateMTurkMode} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\n\r\ntype Props = {\r\n    onChange: (num: number) => any;\r\n    toggles: {text: string, action?: () => any}[];\r\n    active: number;\r\n}\r\n\r\nexport class Toggle extends React.Component<Props, {}> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    onClick(active: number) {\r\n        this.props.onChange(active);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"toggle-container\">\r\n                {\r\n                    this.props.toggles.map((toggle, ind) =>\r\n                        <button\r\n                            key={toggle.text}\r\n                            className={this.props.active === ind ? \"safe toggle active\" : \"safe toggle\"}\r\n                            onClick={() => {\r\n                                this.onClick(ind);\r\n                                if (toggle.action) {\r\n                                    toggle.action();\r\n                                }\r\n                            }}\r\n                        >\r\n                            {toggle.text}\r\n                        </button>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype SingleToggleState = {\r\n    active: number;\r\n}\r\n\r\nexport class SingleToggle extends React.Component<Props, SingleToggleState> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            active: props.active\r\n        };\r\n    }\r\n\r\n    onClick(active: number) {\r\n        this.props.onChange(active);\r\n        this.setState({active: active});\r\n    }\r\n\r\n    render() {\r\n        return <Toggle\r\n            onChange={num => this.onClick(num)}\r\n            toggles={this.props.toggles}\r\n            active={this.state.active}\r\n        />;\r\n    }\r\n}\r\n\r\nexport const mapStateSandboxToggle = (state: RootState) => {\r\n    return {\r\n        mturkMode: state.mturkMode,\r\n    };\r\n};\r\n\r\nexport const mapDispatchToSandboxToggleProps = {\r\n    updateMTurkMode,\r\n};\r\n\r\nconst sandboxToggleConnector = connect(mapStateSandboxToggle, mapDispatchToSandboxToggleProps);\r\n\r\ntype SandboxToggleProps = ConnectedProps<typeof sandboxToggleConnector>;\r\n\r\ntype SandboxToggleState = {}\r\n\r\nexport const SandboxToggle = sandboxToggleConnector(class SandboxToggle extends React.Component<SandboxToggleProps, SandboxToggleState>{\r\n\r\n    render() {\r\n        return (\r\n            <Toggle\r\n                onChange={(num: number) => {\r\n                    const sandbox = num === 0; // 1 is real mturk\r\n                    // set the global state of sandbox to true\r\n                }}\r\n                active={this.props.mturkMode === MTurkMode.SANDBOX ? 0 : 1}\r\n                toggles={[\r\n                    {\r\n                        text: \"Submit to Sandbox MTurk\",\r\n                        action: () => {\r\n                            this.props.updateMTurkMode(MTurkMode.SANDBOX);\r\n                        }\r\n                    },\r\n                    {\r\n                        text: \"Submit to Real MTurk\",\r\n                        action: () => {\r\n                            this.props.updateMTurkMode(MTurkMode.REAL);\r\n                        }\r\n                    }\r\n                ]}\r\n            />\r\n        );\r\n    }\r\n});\r\n","import React from \"react\";\r\nimport {AccountPair} from \"../aws/mturk\";\r\nimport {fetchAccountBalances, RootState} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {store} from \"../redux/store\";\r\nimport {SandboxToggle} from \"./toggle\";\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        balances: state.accountBalances,\r\n        mturkMode: state.mturkMode,\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\ntype State = {};\r\n\r\nclass AccountBalances extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.balances === []) {\r\n            store.dispatch(fetchAccountBalances(this.props.mturkMode));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className={\"act basic refresh\"} onClick={() => store.dispatch(fetchAccountBalances(this.props.mturkMode))}> Refresh </button>\r\n                <SandboxToggle />\r\n                <table className={\"component\"}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>\r\n                                WUSTL Key\r\n                            </th>\r\n                            <th>\r\n                                Balance\r\n                            </th>\r\n                            <th>\r\n                                Ready for Submission\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.props.balances\r\n                                .sort((a, b) => {\r\n                                    const aVal = parseFloat(a.balance);\r\n                                    const bVal = parseFloat(b.balance);\r\n                                    if (aVal <= 9.99 && bVal <= 9.99) {\r\n                                        return 0;\r\n                                    } else if (aVal <= 9.99) {\r\n                                        return -1;\r\n                                    } else {\r\n                                        return 1;\r\n                                    }\r\n                                })\r\n                                .map((pair: AccountPair) => {\r\n                                const ready = parseFloat(pair.balance) > 9.99;\r\n                                return (<tr key={pair.wustlKey}>\r\n                                    <th>\r\n                                        {pair.wustlKey}\r\n                                    </th>\r\n                                    <td>\r\n                                        {pair.balance}\r\n                                    </td>\r\n                                    <td className={ready ? \"ready\" : \"not-ready\"}>\r\n                                        {ready ? \"Ready\" : \"Not Ready\"}\r\n                                    </td>\r\n                                </tr>);\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connector(AccountBalances);","import React from \"react\";\r\nimport Table, {DataTable} from \"./table\";\r\nimport {Data, fetchSPIData, MTurkMode, RootState, SubmitHITDataType, updateMTurkMode} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport MTPool from \"../aws/mturk\";\r\nimport {SandboxToggle, Toggle} from \"./toggle\";\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        projects: state.projects,\r\n        iterations: state.iterations,\r\n        currentProject: state.currentProject,\r\n        currentIteration: state.currentIteration,\r\n        spiData: state.spiData,\r\n        submitHITData: state.submitHITData,\r\n        students: state.students,\r\n        mturkMode: state.mturkMode,\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {\r\n    updateMTurkMode,\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\ntype State = {\r\n    activeTable: number,\r\n    price: string,\r\n    errors: Data,\r\n}\r\n\r\nclass SubmitHits extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            activeTable: 0,\r\n            price: '0.40',\r\n            errors: new Data(['WUSTL Key', 'Error', 'Count'], []),\r\n        };\r\n    }\r\n\r\n    getDiffData() {\r\n        fetchSPIData();\r\n        let values: string[][] = [];\r\n        const ret = new Data(this.props.submitHITData.data.header, []);\r\n        try {\r\n            const spiData = this.props.spiData;\r\n            if (spiData !== null) {\r\n                this.props.submitHITData.data.values.forEach(row => {\r\n                    const studData = spiData[row[0]];\r\n                    if (studData) {\r\n                        const projData = studData[this.props.currentProject.Name];\r\n                        if (projData) {\r\n                            const iterData = projData[this.props.currentIteration];\r\n                            if (iterData) {\r\n                                const taskData = iterData.tasks.find(item => item.name === row[1]);\r\n                                if (taskData) {\r\n                                    values.push([\r\n                                        row[0],\r\n                                        row[1],\r\n                                        '' + taskData.count\r\n                                    ]);\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    values.push(row);\r\n                });\r\n            } else {\r\n                values = this.props.submitHITData.data.values;\r\n            }\r\n            ret.values = values;\r\n            return ret;\r\n        } catch (e) {\r\n            alert(e);\r\n            return this.props.submitHITData.data;\r\n        }\r\n    }\r\n\r\n    buildURL(wustlKey: string, url: string, taskTag: string) {\r\n        return `${url}/?wustl_key=${wustlKey}&amp;sandbox=${this.props.mturkMode === MTurkMode.SANDBOX}&amp;project=${this.props.currentProject.Name}&amp;iteration=${this.props.currentIteration + 1}&amp;tag=${taskTag}`;\r\n    }\r\n\r\n    async buildFromCountNotGiven(): Promise<{[wustlKey: string]: {count: number, url: string, price: string}[]}> {\r\n        const hitData: {[key: string]: {count: number, url: string, price: string}[]} = {};\r\n        //this.props.cs\r\n        this.props.submitHITData.data.values.forEach(row => {\r\n            const urls: {count: number, url: string, price: string}[] = [];\r\n            const wKey = row[0];\r\n            const tasks = row.slice(1);\r\n            let countSoFar: {[key: string]: number} = {};\r\n            tasks.forEach(tag => {\r\n                countSoFar[tag] = 0;\r\n            });\r\n            if (this.props.spiData) {\r\n                // const studHitConfigData = this.props.spiData[stud.wustlKey][this.props.currentProject.Name][this.props.currentIteration];\r\n                const studConfig = this.props.spiData[wKey];\r\n                if (studConfig) {\r\n                    const studProjConfig = studConfig[this.props.currentProject.Name];\r\n                    if (studProjConfig) {\r\n                        const studHitConfigData = studProjConfig[this.props.currentIteration];\r\n                        if (studHitConfigData) {\r\n                            tasks.forEach(tag => {\r\n                                const task = studHitConfigData.tasks.find(task => task.name === tag);\r\n                                if (task) {\r\n                                    countSoFar[tag] = task.count;\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const stud = this.props.students.find(stud => stud.wustlKey === wKey);\r\n            console.log(wKey);\r\n            if (stud) {\r\n                tasks.forEach(tag => {\r\n                    urls.push({\r\n                        count:  Math.max(0, 3 - countSoFar[tag]),\r\n                        url: this.buildURL(stud.wustlKey, stud.url, tag),\r\n                        price: this.state.price\r\n                    });\r\n                });\r\n            }\r\n            hitData[wKey] = urls;\r\n            console.log(urls);\r\n        });\r\n        return hitData;\r\n    }\r\n\r\n    async buildFromCountGiven(): Promise<{[wustlKey: string]: {count: number, url: string, price: string}[]}> {\r\n        let hitData: {[wustlKey: string]: {count: number, url: string, price: string}[]} = {};\r\n        this.props.submitHITData.data.values.forEach(row => {\r\n            let urls = hitData[row[0]];\r\n            if (urls === undefined) {\r\n                urls = [];\r\n                hitData[row[0]] = urls;\r\n            }\r\n            const stud = this.props.students.find(stud => stud.wustlKey === row[0]);\r\n            if (stud){\r\n                urls.push({\r\n                    count:  parseInt(row[2]),\r\n                    url: this.buildURL(stud.wustlKey, stud.url, row[1]),\r\n                    price: this.state.price\r\n                });\r\n            }\r\n        });\r\n        console.log(hitData)\r\n        return hitData;\r\n    }\r\n\r\n    buildURLS(): Promise<{[wustlKey: string]: {count: number, url: string, price: string}[]}> {\r\n        if (this.props.submitHITData.dataType === SubmitHITDataType.COUNT_GIVEN) {\r\n            return this.buildFromCountGiven();\r\n        } else {\r\n            return this.buildFromCountNotGiven();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <button\r\n                className={\"refresh danger\"}\r\n                onClick={async () => {\r\n                    const hitData = await this.buildURLS();\r\n                    const resp = await MTPool.uploadHits(hitData, this.props.mturkMode);\r\n                    this.state.errors.resetValues();\r\n                    for(let i = 0; i < resp.length; i++) {\r\n                        const re = await resp[i];\r\n                        if ('error' in re) {\r\n                            const row = this.state.errors.findFirstEntry([{index: 0, expectedValue: re.wustlKey}, {index: 1, expectedValue: re.code}]);\r\n                            if (row) {\r\n                                row[row.length - 1] = '' + (parseInt(row[row.length - 1]) + 1);\r\n                            } else {\r\n                                this.state.errors.values.push([re.wustlKey, re.code, re.error, '1']);\r\n                            }\r\n                        } else {\r\n                            // do nothing, got updated account balances\r\n                        }\r\n                    }\r\n                }}\r\n            > Submit Hits </button>\r\n            <SandboxToggle />\r\n            <Toggle\r\n                onChange={(num: number) => {\r\n                    this.setState({activeTable: num});\r\n                }}\r\n                toggles={[\r\n                    {\r\n                        text: \"Original Assignments\",\r\n                    },\r\n                    {\r\n                        text: \"Remaining Assignments\",\r\n                    }\r\n                ]}\r\n                active={0}\r\n            />\r\n            <div className={'payment-input'}>\r\n                <label>\r\n                    Payout per HIT:\r\n                </label>\r\n                <input type={'number'} value={this.state.price} onChange={ev => this.setState({price: parseFloat(ev.target.value).toFixed(2)})} min={.05} max={.95} step={0.05}/>\r\n            </div>\r\n            {\r\n                this.state.activeTable === 0 ? <Table/> : <DataTable data={this.getDiffData()}/>\r\n            }\r\n            <div>\r\n                <h3>\r\n                    Errors for submission:\r\n                </h3>\r\n                <DataTable data={this.state.errors} />\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default connector(SubmitHits);\r\n","import React from \"react\";\r\nimport {RootState} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport MTPool from \"../aws/mturk\";\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        projects: state.projects,\r\n        iterations: state.iterations,\r\n        currentProject: state.currentProject,\r\n        currentIteration: state.currentIteration,\r\n        spiData: state.spiData,\r\n        students: state.students,\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\ntype State = {\r\n}\r\n\r\nclass CancelHits extends React.Component<Props, State> {\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"status-container\"}>\r\n                <button className={\"status-update safe right\"} onClick={async () => {\r\n                    MTPool.cancelHits();\r\n                }}>\r\n                    Cancel\r\n                </button>\r\n                <h2>\r\n                    Cancel all HITs.\r\n                </h2>\r\n                <p>\r\n                    Cancels all live hits for all individuals listed in the current credentials file.\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connector(CancelHits);","import React from \"react\";\r\nimport {downloadAllFiles} from \"../aws/aws-service\";\r\nimport {RootState} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport ButtonWithDescription from \"./button-with-description\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        currentIteration: state.currentIteration,\r\n        currentProject: state.currentProject\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\ntype State = {\r\n    loadingStatus: string;\r\n}\r\n\r\nconst Loading = \"Loading\";\r\n\r\ntype LoadingContainerProps = {\r\n    status: string;\r\n}\r\n\r\nclass LoadingContainer extends React.Component<LoadingContainerProps, {}> {\r\n\r\n    constructor(props: LoadingContainerProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n              { this.props.status.startsWith(Loading) ? <ReactLoading type={\"spin\"} color={\"red\"}/> : <p> { this.props.status } </p> }\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connector(class DownloadZip extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n          loadingStatus: 'Have not started a download yet...',\r\n        };\r\n    }\r\n\r\n    async download(iteration: number) {\r\n        try {\r\n            this.setState({loadingStatus: 'Loading the log files from the cloud...'});\r\n            const zipData = await downloadAllFiles(this.props.currentProject.Name, iteration);\r\n            if ('s3Key' in zipData && 'localFileName' in zipData) {\r\n                // https://davidwalsh.name/javascript-download\r\n                const a = document.createElement(\"a\");\r\n                a.style.display = \"none\";\r\n                document.body.appendChild(a);\r\n\r\n                a.href = zipData.s3Key;\r\n\r\n                // Use download attribute to set set desired file name\r\n                a.setAttribute(\"download\", zipData.localFileName);\r\n\r\n                // Trigger the download by simulating click\r\n                a.click();\r\n\r\n                // Cleanup\r\n                window.URL.revokeObjectURL(a.href);\r\n                document.body.removeChild(a);\r\n            } else {\r\n                alert('Error while downloading files: ' + JSON.stringify(zipData));\r\n            }\r\n            this.setState({loadingStatus: `Done! Your downloaded file name is: ${zipData.localFileName}`});\r\n        } catch (e){\r\n            this.setState({loadingStatus: `An error occurred during the download: ${e.toString()}`});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <LoadingContainer status={this.state.loadingStatus} />\r\n                <ButtonWithDescription\r\n                    buttonTitle={'Download All 0th Logs'}\r\n                    description={'Downloads all logs in iteration 0. Iteration 0 is meant for use in collecting base line data and not meant for collecting information on student\\'s hits.'}\r\n                    buttonClass={'safe'}\r\n                    onClick={() => this.download(0)}\r\n                    display={true}\r\n                />\r\n                <ButtonWithDescription\r\n                    buttonTitle={`Download All Logs for ${this.props.currentProject.Name} project, iteration ${this.props.currentIteration}.`}\r\n                    description={'Downloads all logs for the currently selected project and iteration. This is meant for collecting logs for student\\'s hits following a successful HIT deployment to MTurk.'}\r\n                    buttonClass={'safe'}\r\n                    onClick={() => this.download(this.props.currentIteration)}\r\n                    display={true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n});","import React from \"react\";\r\nimport {Data, RootState, updateMTurkMode} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {DataTable} from \"./table\";\r\nimport ButtonWithDescription from \"./button-with-description\";\r\nimport MTPool from \"../aws/mturk\";\r\nconst csvp = require('csv-parse');\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        projects: state.projects,\r\n        iterations: state.iterations,\r\n        currentProject: state.currentProject,\r\n        currentIteration: state.currentIteration,\r\n        spiData: state.spiData,\r\n        submitHITData: state.submitHITData,\r\n        students: state.students,\r\n        mturkMode: state.mturkMode,\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {\r\n    updateMTurkMode,\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\ntype State = {\r\n    data: Data,\r\n}\r\n\r\nclass PayHits extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            data: new Data([], []),\r\n        };\r\n    }\r\n\r\n    updateCSVData(data: string[][]) {\r\n        this.setState({data: new Data(data[0], data.slice(1))});\r\n    }\r\n\r\n    renderFileInput() {\r\n        return (\r\n            <form>\r\n                <input\r\n                    //ref={this.fileInput}\r\n                    type={\"file\"}\r\n                    accept={\"text/csv\"}\r\n                    className={\"input-file\"}\r\n                    name={\"csv-input-1\"}\r\n                    id={\"csv-input-1\"}\r\n                    onChange={event => {\r\n                        const file = event.target.files?.item(0);\r\n                        if (file) {\r\n                            const fr = new FileReader();\r\n                            fr.onloadend = () => {\r\n                                if (fr.readyState === FileReader.DONE) {\r\n                                    csvp(fr.result, {}, (err: any, out: string[][]) => {\r\n                                        if (err) {\r\n                                            alert(`Could not parse file correctly. Error: ${err}.`)\r\n                                        } else {\r\n                                            this.updateCSVData(out);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            };\r\n                            fr.readAsText(file, 'utf-8');\r\n                        }\r\n                    }}\r\n                />\r\n                <label\r\n                    className={\"csv-input\"}\r\n                    htmlFor={\"csv-input-1\"}\r\n                >\r\n                    Input File of HIT Payments here...\r\n                </label>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderFileInput()}\r\n                <ButtonWithDescription\r\n                    buttonTitle={'Pay'}\r\n                    description={'Resolves all of the HITs listed with the action that is provided for it. Valid actions are: approve, bonus, and reject.'}\r\n                    buttonClass={'safe'}\r\n                    onClick={() => {\r\n                        MTPool.payHits(this.state.data);\r\n                    }}\r\n                    display={true}\r\n                />\r\n                {this.state.data.values.length === 0 ? null : <DataTable data={this.state.data} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connector(PayHits);","import React from \"react\";\r\nimport {DataTable} from \"./table\";\r\nimport {Data, RootState} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport ButtonWithDescription from \"./button-with-description\";\r\nimport MTPool from \"../aws/mturk\";\r\nimport {SandboxToggle} from \"./toggle\";\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        mturkMode: state.mturkMode\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {};\r\n\r\ntype State = {\r\n    data: Data,\r\n}\r\n\r\nclass HitStatuses extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            data: new Data([], []),\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SandboxToggle />\r\n                <ButtonWithDescription\r\n                    buttonTitle={'Refresh'}\r\n                    description={'Gets the current status of all HITs for all accounts.'}\r\n                    buttonClass={'basic'}\r\n                    onClick={async () => {\r\n                        const data = await MTPool.getStatuses(this.props.mturkMode);\r\n                        this.setState({data: data});\r\n                    }}\r\n                    display={true}\r\n                />\r\n                <DataTable data={this.state.data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connector(HitStatuses);\r\n","import React from \"react\";\r\nimport ButtonWithDescription from \"./button-with-description\";\r\nimport {getTable} from \"../aws/db\";\r\nimport {RootState} from \"../redux/actions\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\n\r\nexport const mapState = (state: RootState) => {\r\n    return {\r\n        currentIteration: state.currentIteration,\r\n        currentProject: state.currentProject\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapState, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {\r\n\r\n}\r\n\r\ntype State = {\r\n\r\n}\r\n\r\nexport default connector(class Disqualify extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ButtonWithDescription\r\n                    buttonTitle={'Disqualify'}\r\n                    description={'Disqualifies all mturk workers from the previous iteration.'}\r\n                    buttonClass={'info'}\r\n                    onClick={async () => {\r\n                        const table = getTable();\r\n                        if (table) {\r\n                            const midfix = `/${this.props.currentProject.Name}/${this.props.currentIteration}/`;\r\n                            console.log(midfix)\r\n                            let idSet = new Set<string>();\r\n                            (await table.getLogEntries(midfix)).\r\n                                map(log => {console.log(log); return log.WorkerID;}).\r\n                                forEach(id => idSet.add(id));\r\n                            idSet.forEach(id => console.log(id));\r\n                            console.log(idSet.size);\r\n                        }\r\n                    }}\r\n                    display={true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n});","import React from \"react\";\r\nimport DBStatus from \"./db-status\";\r\nimport ProjectIterationSelector from \"./project-iteration-selector\";\r\nimport UpdateProjects from \"./update-projects\";\r\nimport Table from \"./table\";\r\nimport {Logout} from \"./login\";\r\nimport ButtonWithDescription from \"./button-with-description\";\r\nimport StudentFileInput from \"./file-input\";\r\nimport HITGenerator from \"./hit-generator\";\r\nimport AccountBalances from \"./account-balances\";\r\nimport SubmitHits from \"./submit-hits\";\r\nimport CancelHits from \"./cancel-hits\";\r\nimport DownloadZip from \"./download-zip\";\r\nimport PayHits from \"./pay-hits\";\r\nimport HitStatuses from \"./hit-status\";\r\nimport Disqualify from \"./disqualify\";\r\n\r\ntype TabRef = {tab: Tab | undefined}\r\n\r\ninterface TabProps {\r\n    tabRef: TabRef;\r\n    actions: {urlName: string, name: string, description: string, component: JSX.Element}[];\r\n    display: boolean;\r\n}\r\n\r\ninterface TabState {\r\n    index: number\r\n}\r\n\r\nexport class Tab extends React.Component<TabProps, TabState> {\r\n\r\n    constructor(props: TabProps) {\r\n        super(props);\r\n        this.props.tabRef.tab = this;\r\n        this.state = {\r\n            index: 0,\r\n        }\r\n    }\r\n\r\n    displayName(urlName: string) {\r\n        const index = this.props.actions.findIndex(value => value.urlName === urlName);\r\n        if (index >= 0) {\r\n            this.display(index);\r\n        }\r\n    }\r\n\r\n    display(index: number) {\r\n        this.setState({index});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.display ? \"tab\" : \"tab hide\"}>\r\n                <div className={\"tab-content\"}>\r\n                    <div className={\"sidebar\"}>\r\n                        {\r\n                            [...this.props.actions.map((action, index) => (\r\n                                <button\r\n                                    className={index === this.state.index ? 'action active' : 'action'}\r\n                                    onClick={() => this.display(index)}\r\n                                    key={index}\r\n                                >\r\n                                    {\r\n                                        action.name\r\n                                    }\r\n                                </button>\r\n                            )), <div className={\"sidebar-filler\"} key={this.props.actions.length}> </div>]\r\n                        }\r\n                    </div>\r\n                    <div className={\"output-container\"}>\r\n                        <div className={\"output\"}>\r\n                            {this.props.children ? this.props.children: null}\r\n                            {\r\n                                this.props.actions.map((action, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            className={index === this.state.index ? 'component-wrapper' : 'component-wrapper hide'}\r\n                                            key={index}\r\n                                        >\r\n                                            <div className={'tab-header'}>\r\n                                                <h1>\r\n                                                    {\r\n                                                        action.name\r\n                                                    }\r\n                                                </h1>\r\n                                                <p className={\"description\"}>\r\n                                                    {\r\n                                                        action.description\r\n                                                    }\r\n                                                </p>\r\n                                            </div>\r\n                                            {\r\n                                                action.component\r\n                                            }\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\ninterface ConcreteTabProps {\r\n    display: boolean;\r\n    tabRef: TabRef;\r\n}\r\n\r\nexport class SemesterManagementTab extends React.Component<ConcreteTabProps, {}> {\r\n\r\n    render() {\r\n        return <Tab\r\n            tabRef={this.props.tabRef}\r\n            display={this.props.display}\r\n            actions={[\r\n                {\r\n                    urlName: 'clear_db',\r\n                    name: 'Clear Database',\r\n                    description: 'Deletes all data from the database that is specific to a semester. Retains login data and other non-semester specific data.',\r\n                    component: (<div>\r\n                                    <div>\r\n                                        <ButtonWithDescription buttonTitle={'Clear Database'}\r\n                                                               description={'Clicking this button will delete all data from the database that is not meant to be carried over. This includes: HIT assignments, Student ID to HIT ID mappings and more. Click this button once the semester is completely over and you are ready to clean out all of the old data.'}\r\n                                                               buttonClass={'danger'} onClick={() => {}} display={true} />\r\n                                    </div>\r\n                                    <DBStatus/>\r\n                                </div>)\r\n                },\r\n                {\r\n                    urlName: 'change_projects',\r\n                    name: 'Change Projects',\r\n                    description: 'Allows you to view and change projects for this course.',\r\n                    component: <UpdateProjects/>\r\n                }\r\n            ]}\r\n        />\r\n    }\r\n\r\n}\r\n\r\nexport class HitManagementTab extends React.Component<ConcreteTabProps, {}> {\r\n\r\n    render() {\r\n        return <Tab\r\n            tabRef={this.props.tabRef}\r\n                display={this.props.display}\r\n                actions={[\r\n                    {\r\n                        urlName: 'generate_hits',\r\n                        name: 'Generate HITs',\r\n                        description: 'Generate HITs for each student. HITs will be generated based on current project and iteration as well as information about which HITs that they have had for previous iterations.',\r\n                        component: (\r\n                            <div>\r\n                                <HITGenerator/>\r\n                                <DBStatus/>\r\n                                <Table />\r\n                            </div>\r\n                        )\r\n                    },\r\n                    {\r\n                        urlName: 'check_account_balances',\r\n                        name: 'Check Account Balances',\r\n                        description: 'Checks the account balances for all accounts in the uploaded credentials file.',\r\n                        component: <AccountBalances />\r\n                    },\r\n                    {\r\n                        urlName: 'submit_hits',\r\n                        name: 'Submit HITs',\r\n                        description: 'Submit hits for the current project and iteration. These hits will be submitted based on the currently generated hits for this project and iteration. You can view those in the table below. If you would like different task assignments then change them here: [insert button that leads to generate hit assignment]',\r\n                        component: <SubmitHits />\r\n                    },\r\n                    {\r\n                        urlName: 'hit_statuses',\r\n                        name: 'HIT Statuses',\r\n                        description: 'Display the status of all of the hits that are currently running on MTurk. You can use this information to determine how quickly hits are coming in.',\r\n                        component: <HitStatuses />\r\n                    },\r\n                    {\r\n                        urlName: 'cancel_hits',\r\n                        name: 'Cancel HITs',\r\n                        description: 'Allows you to cancel all hits for all accounts listed in the current credentials file.',\r\n                        component: <CancelHits />\r\n                    },\r\n                    {\r\n                        urlName: 'download_logs',\r\n                        name: 'Download Logs',\r\n                        description: 'Allows you to download all logs for a given project and iteration.',\r\n                        component: <DownloadZip />\r\n                    },\r\n                    {\r\n                        urlName: 'pay_hits',\r\n                        name: 'Pay HITs',\r\n                        description: 'Allows you to pay hits if given a csv file of payment details.',\r\n                        component: <PayHits />\r\n                    }\r\n                ]}\r\n        >\r\n            <ProjectIterationSelector />\r\n        </Tab>\r\n    }\r\n\r\n}\r\n\r\nexport class PostHitManagementTab extends React.Component<ConcreteTabProps, {}> {\r\n\r\n    render() {\r\n        return <Tab\r\n            tabRef={this.props.tabRef}\r\n            display={this.props.display}\r\n            actions={[\r\n                {\r\n                    urlName: 'disqualify',\r\n                    name: 'Disqualify HITs',\r\n                    description: 'Disqualifies workers based on the currently selected project and iteration so they cannot do the next iterations for the same project.',\r\n                    component: <Disqualify />\r\n                }\r\n            ]}\r\n        >\r\n            <ProjectIterationSelector />\r\n        </Tab>\r\n    }\r\n\r\n}\r\n\r\nexport class SessionManagementTab extends React.Component<ConcreteTabProps, {}> {\r\n\r\n    render() {\r\n        return <Tab\r\n            tabRef={this.props.tabRef}\r\n            display={this.props.display}\r\n            actions={\r\n                [\r\n                    {\r\n                        urlName: 'load_student_credentials',\r\n                        name: 'Load Student Credentials',\r\n                        description: 'Load in student credentials if you need to interact with students and/or their Mturk accounts.',\r\n                        component:\r\n                            <div>\r\n                                <StudentFileInput />\r\n                                <ButtonWithDescription\r\n                                    buttonTitle={'Download CSV Template...'}\r\n                                    description={'This will download a CSV Template that you can then fill out with student credentials. This template has correctly spelt and formatted headers so that there are no validation errors when uploading it later.'}\r\n                                    buttonClass={'safe'}\r\n                                    onClick={() => {\r\n                                        const uri = 'data:text/plain;charset=utf-8,' + encodeURIComponent(\"WUSTL Key,AWS IAM ID,AWS IAM SECRET\\n\");\r\n                                        const a = document.createElement('a');\r\n                                        a.style.display = 'none';\r\n                                        a.href = uri;\r\n                                        a.download = 'student-credentials.csv';\r\n                                        document.body.appendChild(a);\r\n                                        a.click();\r\n                                        a.remove();\r\n                                    }}\r\n                                    display={true}\r\n                                />\r\n                            </div>\r\n                    },\r\n                    {\r\n                        urlName: 'logout',\r\n                        name: 'Logout',\r\n                        description: 'Use this to log out of the application.',\r\n                        component: <Logout />\r\n                    },\r\n                ]}\r\n        />\r\n    }\r\n\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './service-worker/serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}